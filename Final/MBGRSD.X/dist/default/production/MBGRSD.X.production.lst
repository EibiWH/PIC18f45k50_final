

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed May 29 15:29:30 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    75                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    76  0000                     
    77                           ; Version 2.05
    78                           ; Generated 20/12/2018 GMT
    79                           ; 
    80                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    81                           ; All rights reserved.
    82                           ; 
    83                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    84                           ; 
    85                           ; Redistribution and use in source and binary forms, with or without modification, are
    86                           ; permitted provided that the following conditions are met:
    87                           ; 
    88                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    89                           ;        conditions and the following disclaimer.
    90                           ; 
    91                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    92                           ;        of conditions and the following disclaimer in the documentation and/or other
    93                           ;        materials provided with the distribution.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC18F45K50 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111  0000                     
   112                           	psect	idataBANK0
   113  00567C                     __pidataBANK0:
   114                           	opt callstack 0
   115                           
   116                           ;initializer for Error@F5051
   117  00567C  7E                 	db	126
   118  00567D  30                 	db	48
   119  00567E  6D                 	db	109
   120  00567F  79                 	db	121
   121  005680  33                 	db	51
   122  005681  5B                 	db	91
   123  005682  5F                 	db	95
   124  005683  70                 	db	112
   125  005684  7F                 	db	127
   126  005685  73                 	db	115
   127                           
   128                           ;initializer for _Stat
   129  005686  01                 	db	1
   130                           
   131                           	psect	nvBANK0
   132  0000F7                     __pnvBANK0:
   133                           	opt callstack 0
   134  0000F7                     _word:
   135                           	opt callstack 0
   136  0000F7                     	ds	2
   137  0000                     _ANSELA	set	3931
   138  0000                     _ANSELE	set	3935
   139  0000                     _ANSELD	set	3934
   140  0000                     _ANSELB	set	3932
   141  0000                     _ANSELC	set	3933
   142  0000                     _TRISA	set	3986
   143  0000                     _LATA	set	3977
   144  0000                     _ADRESL	set	4035
   145  0000                     _ADRESH	set	4036
   146  0000                     _PORTA	set	3968
   147  0000                     _ADCON0bits	set	4034
   148  0000                     _ADCON0	set	4034
   149  0000                     _ADCON1	set	4033
   150  0000                     _ADCON2	set	4032
   151  0000                     _TRISE	set	3990
   152  0000                     _LATE	set	3981
   153  0000                     _TRISD	set	3989
   154  0000                     _LATD	set	3980
   155  0000                     _SSP1STATbits	set	4039
   156  0000                     _SSP1BUF	set	4041
   157  0000                     _SSP1CON1bits	set	4038
   158  0000                     _SSP1ADD	set	4040
   159  0000                     _SSP1CON1	set	4038
   160  0000                     _SSP1STAT	set	4039
   161  0000                     _INTCON2bits	set	4081
   162  0000                     _WPUB	set	3973
   163  0000                     _TRISC	set	3988
   164  0000                     _TRISB	set	3987
   165  0000                     _LATC	set	3979
   166  0000                     _LATB	set	3978
   167  0000                     _ACTCON	set	4021
   168  0000                     _OSCTUNE	set	3995
   169  0000                     _OSCCON2	set	4050
   170  0000                     _OSCCON	set	4051
   171  0000                     _LATBbits	set	3978
   172  0000                     _ADIF	set	31990
   173  0000                     _ADIE	set	31982
   174  0000                     _PEIE	set	32662
   175  0000                     _GIE	set	32663
   176                           
   177                           	psect	smallconst
   178  000800                     __psmallconst:
   179                           	opt callstack 0
   180  000800  00                 	db	0
   181  000801                     STR_1:
   182                           
   183                           ; BSR set to: 15
   184  000801  22                 	db	34
   185  000802  2A                 	db	42
   186  000803  2B                 	db	43
   187  000804  2C                 	db	44
   188  000805  3A                 	db	58	;':'
   189  000806  3B                 	db	59	;';'
   190  000807  3C                 	db	60	;'<'
   191  000808  3D                 	db	61	;'='
   192  000809  3E                 	db	62	;'>'
   193  00080A  3F                 	db	63	;'?'
   194  00080B  5B                 	db	91	;'['
   195  00080C  5D                 	db	93	;']'
   196  00080D  7C                 	db	124
   197  00080E  7F                 	db	127
   198  00080F  00                 	db	0
   199  000810                     STR_3:
   200                           
   201                           ; BSR set to: 15
   202  000810  48                 	db	72	;'H'
   203  000811  6F                 	db	111	;'o'
   204  000812  6C                 	db	108	;'l'
   205  000813  61                 	db	97	;'a'
   206  000814  20                 	db	32
   207  000815  70                 	db	112	;'p'
   208  000816  65                 	db	101	;'e'
   209  000817  72                 	db	114	;'r'
   210  000818  72                 	db	114	;'r'
   211  000819  6F                 	db	111	;'o'
   212  00081A  20                 	db	32
   213  00081B  3A                 	db	58	;':'
   214  00081C  76                 	db	118	;'v'
   215  00081D  00                 	db	0
   216  00081E                     STR_6:
   217                           
   218                           ; BSR set to: 15
   219  00081E  42                 	db	66	;'B'
   220  00081F  65                 	db	101	;'e'
   221  000820  65                 	db	101	;'e'
   222  000821  44                 	db	68	;'D'
   223  000822  65                 	db	101	;'e'
   224  000823  76                 	db	118	;'v'
   225  000824  2E                 	db	46
   226  000825  74                 	db	116	;'t'
   227  000826  78                 	db	120	;'x'
   228  000827  74                 	db	116	;'t'
   229  000828  00                 	db	0
   230  0000                     
   231                           ; #config settings
   232  000829  00                 	db	0	; dummy byte at the end
   233  0000                     
   234                           	psect	cinit
   235  00533A                     __pcinit:
   236                           	opt callstack 0
   237  00533A                     start_initialization:
   238                           	opt callstack 0
   239  00533A                     __initialization:
   240                           	opt callstack 0
   241                           
   242                           ; Initialize objects allocated to BANK0 (11 bytes)
   243                           ; load TBLPTR registers with __pidataBANK0
   244  00533A  0E7C               	movlw	low __pidataBANK0
   245  00533C  6EF6               	movwf	tblptrl,c
   246  00533E  0E56               	movlw	high __pidataBANK0
   247  005340  6EF7               	movwf	tblptrh,c
   248  005342  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   249  005344  6EF8               	movwf	tblptru,c
   250  005346  EE00  F0EC         	lfsr	0,__pdataBANK0
   251  00534A  EE10 F00B          	lfsr	1,11
   252  00534E                     copy_data0:
   253  00534E  0009               	tblrd		*+
   254  005350  CFF5 FFEE          	movff	tablat,postinc0
   255  005354  50E5               	movf	postdec1,w,c
   256  005356  50E1               	movf	fsr1l,w,c
   257  005358  E1FA               	bnz	copy_data0
   258                           
   259                           ; Clear objects allocated to BIGRAM (558 bytes)
   260  00535A  EE01  F020         	lfsr	0,__pbssBIGRAM
   261  00535E  EE12 F02E          	lfsr	1,558
   262  005362                     clear_0:
   263  005362  6AEE               	clrf	postinc0,c
   264  005364  50E5               	movf	postdec1,w,c
   265  005366  50E1               	movf	fsr1l,w,c
   266  005368  E1FC               	bnz	clear_0
   267  00536A  50E2               	movf	fsr1h,w,c
   268  00536C  E1FA               	bnz	clear_0
   269                           
   270                           ; Clear objects allocated to BANK1 (32 bytes)
   271  00536E  EE01  F000         	lfsr	0,__pbssBANK1
   272  005372  0E20               	movlw	32
   273  005374                     clear_1:
   274  005374  6AEE               	clrf	postinc0,c
   275  005376  06E8               	decf	wreg,f,c
   276  005378  E1FD               	bnz	clear_1
   277                           
   278                           ; Clear objects allocated to BANK0 (17 bytes)
   279  00537A  EE00  F0DB         	lfsr	0,__pbssBANK0
   280  00537E  0E11               	movlw	17
   281  005380                     clear_2:
   282  005380  6AEE               	clrf	postinc0,c
   283  005382  06E8               	decf	wreg,f,c
   284  005384  E1FD               	bnz	clear_2
   285  005386                     end_of_initialization:
   286                           	opt callstack 0
   287  005386                     __end_of__initialization:
   288                           	opt callstack 0
   289  005386  0E00               	movlw	low (__Lmediumconst shr (0+16))
   290  005388  6EF8               	movwf	tblptru,c
   291  00538A  0100               	movlb	0
   292  00538C  EFC4  F028         	goto	_main	;jump to C main() function
   293                           
   294                           	psect	bssBANK0
   295  0000DB                     __pbssBANK0:
   296                           	opt callstack 0
   297  0000DB                     _data:
   298                           	opt callstack 0
   299  0000DB                     	ds	10
   300  0000E5                     _adcin:
   301                           	opt callstack 0
   302  0000E5                     	ds	2
   303  0000E7                     _Fsid:
   304                           	opt callstack 0
   305  0000E7                     	ds	2
   306  0000E9                     ff@FatFs:
   307                           	opt callstack 0
   308  0000E9                     	ds	2
   309  0000EB                     _CardType:
   310                           	opt callstack 0
   311  0000EB                     	ds	1
   312                           
   313                           	psect	dataBANK0
   314  0000EC                     __pdataBANK0:
   315                           	opt callstack 0
   316  0000EC                     Error@F5051:
   317                           	opt callstack 0
   318  0000EC                     	ds	10
   319  0000F6                     _Stat:
   320                           	opt callstack 0
   321  0000F6                     	ds	1
   322                           
   323                           	psect	bssBANK1
   324  000100                     __pbssBANK1:
   325                           	opt callstack 0
   326  000100                     _Fil:
   327                           	opt callstack 0
   328  000100                     	ds	32
   329                           
   330                           	psect	bssBIGRAM
   331  000120                     __pbssBIGRAM:
   332                           	opt callstack 0
   333  000120                     _FatFs:
   334                           	opt callstack 0
   335  000120                     	ds	558
   336                           
   337                           	psect	cstackBANK0
   338  000060                     __pcstackBANK0:
   339                           	opt callstack 0
   340  000060                     ??_dir_sdi:
   341  000060                     remove_chain@res:
   342                           	opt callstack 0
   343  000060                     create_chain@res:
   344                           	opt callstack 0
   345  000060                     find_volume@br:
   346                           	opt callstack 0
   347                           
   348                           ; 16 bytes @ 0x0
   349  000060                     	ds	1
   350  000061                     remove_chain@nxt:
   351                           	opt callstack 0
   352  000061                     create_chain@scl:
   353                           	opt callstack 0
   354                           
   355                           ; 4 bytes @ 0x1
   356  000061                     	ds	4
   357  000065                     create_chain@ncl:
   358                           	opt callstack 0
   359                           
   360                           ; 4 bytes @ 0x5
   361  000065                     	ds	2
   362  000067                     dir_sdi@ic:
   363                           	opt callstack 0
   364                           
   365                           ; 2 bytes @ 0x7
   366  000067                     	ds	2
   367  000069                     create_chain@cs:
   368                           	opt callstack 0
   369  000069                     dir_sdi@sect:
   370                           	opt callstack 0
   371                           
   372                           ; 4 bytes @ 0x9
   373  000069                     	ds	4
   374  00006D                     dir_next@dp:
   375                           	opt callstack 0
   376  00006D                     f_write@fp:
   377                           	opt callstack 0
   378  00006D                     f_lseek@fp:
   379                           	opt callstack 0
   380  00006D                     dir_sdi@clst:
   381                           	opt callstack 0
   382                           
   383                           ; 4 bytes @ 0xD
   384  00006D                     	ds	2
   385  00006F                     dir_next@stretch:
   386                           	opt callstack 0
   387  00006F                     f_write@buff:
   388                           	opt callstack 0
   389  00006F                     f_lseek@ofs:
   390                           	opt callstack 0
   391                           
   392                           ; 4 bytes @ 0xF
   393  00006F                     	ds	1
   394  000070                     _find_volume$728:
   395                           	opt callstack 0
   396                           
   397                           ; 4 bytes @ 0x10
   398  000070                     	ds	1
   399  000071                     ??_dir_next:
   400  000071                     f_write@btw:
   401                           	opt callstack 0
   402                           
   403                           ; 2 bytes @ 0x11
   404  000071                     	ds	2
   405  000073                     ??_f_lseek:
   406  000073                     f_write@bw:
   407                           	opt callstack 0
   408                           
   409                           ; 2 bytes @ 0x13
   410  000073                     	ds	1
   411  000074                     _find_volume$729:
   412                           	opt callstack 0
   413                           
   414                           ; 2 bytes @ 0x14
   415  000074                     	ds	1
   416  000075                     ??_f_write:
   417                           
   418                           ; 1 bytes @ 0x15
   419  000075                     	ds	1
   420  000076                     find_volume@szbfat:
   421                           	opt callstack 0
   422                           
   423                           ; 4 bytes @ 0x16
   424  000076                     	ds	2
   425  000078                     dir_next@c:
   426                           	opt callstack 0
   427                           
   428                           ; 2 bytes @ 0x18
   429  000078                     	ds	2
   430  00007A                     dir_next@i:
   431                           	opt callstack 0
   432  00007A                     find_volume@pt:
   433                           	opt callstack 0
   434                           
   435                           ; 2 bytes @ 0x1A
   436  00007A                     	ds	2
   437  00007C                     dir_next@clst:
   438                           	opt callstack 0
   439  00007C                     find_volume@sysect:
   440                           	opt callstack 0
   441                           
   442                           ; 4 bytes @ 0x1C
   443  00007C                     	ds	4
   444  000080                     dir_alloc@dp:
   445                           	opt callstack 0
   446  000080                     dir_find@dp:
   447                           	opt callstack 0
   448  000080                     find_volume@vol:
   449                           	opt callstack 0
   450                           
   451                           ; 2 bytes @ 0x20
   452  000080                     	ds	1
   453  000081                     f_write@res:
   454                           	opt callstack 0
   455                           
   456                           ; 1 bytes @ 0x21
   457  000081                     	ds	1
   458  000082                     dir_find@c:
   459                           	opt callstack 0
   460  000082                     dir_alloc@nent:
   461                           	opt callstack 0
   462  000082                     find_volume@nrsv:
   463                           	opt callstack 0
   464  000082                     f_write@wbuff:
   465                           	opt callstack 0
   466                           
   467                           ; 2 bytes @ 0x22
   468  000082                     	ds	1
   469  000083                     dir_find@dir:
   470                           	opt callstack 0
   471  000083                     f_lseek@ifptr:
   472                           	opt callstack 0
   473                           
   474                           ; 4 bytes @ 0x23
   475  000083                     	ds	1
   476  000084                     ??_dir_alloc:
   477  000084                     f_write@csect:
   478                           	opt callstack 0
   479  000084                     find_volume@tsect:
   480                           	opt callstack 0
   481                           
   482                           ; 4 bytes @ 0x24
   483  000084                     	ds	1
   484  000085                     dir_find@res:
   485                           	opt callstack 0
   486  000085                     f_write@cc:
   487                           	opt callstack 0
   488                           
   489                           ; 2 bytes @ 0x25
   490  000085                     	ds	1
   491  000086                     follow_path@dp:
   492                           	opt callstack 0
   493                           
   494                           ; 2 bytes @ 0x26
   495  000086                     	ds	1
   496  000087                     f_lseek@res:
   497                           	opt callstack 0
   498  000087                     dir_alloc@n:
   499                           	opt callstack 0
   500  000087                     f_write@sect:
   501                           	opt callstack 0
   502                           
   503                           ; 4 bytes @ 0x27
   504  000087                     	ds	1
   505  000088                     follow_path@path:
   506                           	opt callstack 0
   507  000088                     find_volume@nclst:
   508                           	opt callstack 0
   509  000088                     f_lseek@nsect:
   510                           	opt callstack 0
   511                           
   512                           ; 4 bytes @ 0x28
   513  000088                     	ds	1
   514  000089                     dir_alloc@res:
   515                           	opt callstack 0
   516                           
   517                           ; 1 bytes @ 0x29
   518  000089                     	ds	1
   519  00008A                     dir_register@dp:
   520                           	opt callstack 0
   521  00008A                     follow_path@dir:
   522                           	opt callstack 0
   523                           
   524                           ; 2 bytes @ 0x2A
   525  00008A                     	ds	1
   526  00008B                     f_write@clst:
   527                           	opt callstack 0
   528                           
   529                           ; 4 bytes @ 0x2B
   530  00008B                     	ds	1
   531  00008C                     dir_register@res:
   532                           	opt callstack 0
   533  00008C                     follow_path@ns:
   534                           	opt callstack 0
   535  00008C                     find_volume@stat:
   536                           	opt callstack 0
   537  00008C                     f_lseek@bcs:
   538                           	opt callstack 0
   539                           
   540                           ; 4 bytes @ 0x2C
   541  00008C                     	ds	1
   542  00008D                     follow_path@res:
   543                           	opt callstack 0
   544  00008D                     find_volume@fasize:
   545                           	opt callstack 0
   546                           
   547                           ; 4 bytes @ 0x2D
   548  00008D                     	ds	2
   549  00008F                     f_write@wcnt:
   550                           	opt callstack 0
   551                           
   552                           ; 2 bytes @ 0x2F
   553  00008F                     	ds	1
   554  000090                     f_lseek@clst:
   555                           	opt callstack 0
   556                           
   557                           ; 4 bytes @ 0x30
   558  000090                     	ds	1
   559  000091                     find_volume@bsect:
   560                           	opt callstack 0
   561                           
   562                           ; 4 bytes @ 0x31
   563  000091                     	ds	4
   564  000095                     find_volume@i:
   565                           	opt callstack 0
   566                           
   567                           ; 2 bytes @ 0x35
   568  000095                     	ds	2
   569  000097                     find_volume@fmt:
   570                           	opt callstack 0
   571                           
   572                           ; 1 bytes @ 0x37
   573  000097                     	ds	1
   574  000098                     find_volume@fs:
   575                           	opt callstack 0
   576                           
   577                           ; 2 bytes @ 0x38
   578  000098                     	ds	2
   579  00009A                     f_open@fp:
   580                           	opt callstack 0
   581                           
   582                           ; 2 bytes @ 0x3A
   583  00009A                     	ds	2
   584  00009C                     f_open@path:
   585                           	opt callstack 0
   586                           
   587                           ; 2 bytes @ 0x3C
   588  00009C                     	ds	2
   589  00009E                     f_open@mode:
   590                           	opt callstack 0
   591                           
   592                           ; 1 bytes @ 0x3E
   593  00009E                     	ds	1
   594  00009F                     ??_f_open:
   595                           
   596                           ; 1 bytes @ 0x3F
   597  00009F                     	ds	4
   598  0000A3                     f_open@sfn:
   599                           	opt callstack 0
   600                           
   601                           ; 12 bytes @ 0x43
   602  0000A3                     	ds	12
   603  0000AF                     f_open@cl:
   604                           	opt callstack 0
   605                           
   606                           ; 4 bytes @ 0x4F
   607  0000AF                     	ds	4
   608  0000B3                     f_open@dw:
   609                           	opt callstack 0
   610                           
   611                           ; 4 bytes @ 0x53
   612  0000B3                     	ds	4
   613  0000B7                     f_open@res:
   614                           	opt callstack 0
   615                           
   616                           ; 1 bytes @ 0x57
   617  0000B7                     	ds	1
   618  0000B8                     f_open@dir:
   619                           	opt callstack 0
   620                           
   621                           ; 2 bytes @ 0x58
   622  0000B8                     	ds	2
   623  0000BA                     f_open@dj:
   624                           	opt callstack 0
   625                           
   626                           ; 22 bytes @ 0x5A
   627  0000BA                     	ds	22
   628  0000D0                     guardar@data:
   629                           	opt callstack 0
   630                           
   631                           ; 2 bytes @ 0x70
   632  0000D0                     	ds	2
   633  0000D2                     guardar@bw:
   634                           	opt callstack 0
   635                           
   636                           ; 2 bytes @ 0x72
   637  0000D2                     	ds	2
   638  0000D4                     ??_main:
   639                           
   640                           ; 1 bytes @ 0x74
   641  0000D4                     	ds	4
   642  0000D8                     main@o:
   643                           	opt callstack 0
   644                           
   645                           ; 2 bytes @ 0x78
   646  0000D8                     	ds	2
   647  0000DA                     main@letra:
   648                           	opt callstack 0
   649                           
   650                           ; 1 bytes @ 0x7A
   651  0000DA                     	ds	1
   652                           
   653                           	psect	cstackCOMRAM
   654  000001                     __pcstackCOMRAM:
   655                           	opt callstack 0
   656  000001                     ??___delay_sec:
   657  000001                     ?_interruptadc:
   658                           	opt callstack 0
   659  000001                     ?_mem_cmp:
   660                           	opt callstack 0
   661  000001                     ?_chk_chr:
   662                           	opt callstack 0
   663  000001                     ?_get_ldnumber:
   664                           	opt callstack 0
   665  000001                     ?___wmul:
   666                           	opt callstack 0
   667  000001                     ?_ld_clust:
   668                           	opt callstack 0
   669  000001                     ?___lmul:
   670                           	opt callstack 0
   671  000001                     ?___lldiv:
   672                           	opt callstack 0
   673  000001                     disk_status@pdrv:
   674                           	opt callstack 0
   675  000001                     SPI1_Exchange8bit@data:
   676                           	opt callstack 0
   677  000001                     mem_cpy@dst:
   678                           	opt callstack 0
   679  000001                     mem_set@dst:
   680                           	opt callstack 0
   681  000001                     mem_cmp@dst:
   682                           	opt callstack 0
   683  000001                     chk_chr@str:
   684                           	opt callstack 0
   685  000001                     ld_clust@fs:
   686                           	opt callstack 0
   687  000001                     st_clust@dir:
   688                           	opt callstack 0
   689  000001                     get_ldnumber@path:
   690                           	opt callstack 0
   691  000001                     Error@a:
   692                           	opt callstack 0
   693  000001                     interruptadc@adcin:
   694                           	opt callstack 0
   695  000001                     ___wmul@multiplier:
   696                           	opt callstack 0
   697  000001                     ___lmul@multiplier:
   698                           	opt callstack 0
   699  000001                     ___lldiv@dividend:
   700                           	opt callstack 0
   701                           
   702                           ; 4 bytes @ 0x0
   703  000001                     	ds	1
   704  000002                     wait_ready@tmr:
   705                           	opt callstack 0
   706  000002                     rcvr_datablock@buff:
   707                           	opt callstack 0
   708  000002                     validate@obj:
   709                           	opt callstack 0
   710                           
   711                           ; 2 bytes @ 0x1
   712  000002                     	ds	1
   713  000003                     ??_interruptadc:
   714  000003                     ??_get_ldnumber:
   715  000003                     ??_Error:
   716  000003                     mem_cpy@src:
   717                           	opt callstack 0
   718  000003                     mem_set@val:
   719                           	opt callstack 0
   720  000003                     mem_cmp@src:
   721                           	opt callstack 0
   722  000003                     chk_chr@chr:
   723                           	opt callstack 0
   724  000003                     ld_clust@dir:
   725                           	opt callstack 0
   726  000003                     ___wmul@multiplicand:
   727                           	opt callstack 0
   728  000003                     st_clust@cl:
   729                           	opt callstack 0
   730                           
   731                           ; 4 bytes @ 0x2
   732  000003                     	ds	1
   733  000004                     ??_validate:
   734  000004                     ___delay_sec@sec:
   735                           	opt callstack 0
   736  000004                     rcvr_datablock@btr:
   737                           	opt callstack 0
   738  000004                     xmit_datablock@buff:
   739                           	opt callstack 0
   740  000004                     ___send_cmd@arg:
   741                           	opt callstack 0
   742  000004                     Error@v_seg:
   743                           	opt callstack 0
   744                           
   745                           ; 10 bytes @ 0x3
   746  000004                     	ds	1
   747  000005                     ??_chk_chr:
   748  000005                     ??_ld_clust:
   749  000005                     ___delay_sec@i:
   750                           	opt callstack 0
   751  000005                     mem_cpy@cnt:
   752                           	opt callstack 0
   753  000005                     mem_set@cnt:
   754                           	opt callstack 0
   755  000005                     mem_cmp@cnt:
   756                           	opt callstack 0
   757  000005                     ___wmul@product:
   758                           	opt callstack 0
   759  000005                     ___lmul@multiplicand:
   760                           	opt callstack 0
   761  000005                     ___lldiv@divisor:
   762                           	opt callstack 0
   763                           
   764                           ; 4 bytes @ 0x4
   765  000005                     	ds	1
   766  000006                     xmit_datablock@token:
   767                           	opt callstack 0
   768  000006                     rcvr_datablock@tmr:
   769                           	opt callstack 0
   770                           
   771                           ; 2 bytes @ 0x5
   772  000006                     	ds	1
   773  000007                     ??_mem_cmp:
   774  000007                     xmit_datablock@i:
   775                           	opt callstack 0
   776  000007                     mem_cpy@d:
   777                           	opt callstack 0
   778  000007                     mem_set@d:
   779                           	opt callstack 0
   780  000007                     get_ldnumber@tp:
   781                           	opt callstack 0
   782                           
   783                           ; 2 bytes @ 0x6
   784  000007                     	ds	1
   785  000008                     rcvr_datablock@token:
   786                           	opt callstack 0
   787  000008                     ___send_cmd@res:
   788                           	opt callstack 0
   789  000008                     validate@fil:
   790                           	opt callstack 0
   791                           
   792                           ; 2 bytes @ 0x7
   793  000008                     	ds	1
   794  000009                     xmit_datablock@resp:
   795                           	opt callstack 0
   796  000009                     ___send_cmd@n:
   797                           	opt callstack 0
   798  000009                     mem_cpy@s:
   799                           	opt callstack 0
   800  000009                     mem_cmp@d:
   801                           	opt callstack 0
   802  000009                     create_name@dp:
   803                           	opt callstack 0
   804  000009                     get_ldnumber@vol:
   805                           	opt callstack 0
   806  000009                     ___lmul@product:
   807                           	opt callstack 0
   808  000009                     ___lldiv@quotient:
   809                           	opt callstack 0
   810                           
   811                           ; 4 bytes @ 0x8
   812  000009                     	ds	1
   813  00000A                     ___send_cmd@cmd:
   814                           	opt callstack 0
   815                           
   816                           ; 1 bytes @ 0x9
   817  00000A                     	ds	1
   818  00000B                     mem_cmp@s:
   819                           	opt callstack 0
   820  00000B                     create_name@path:
   821                           	opt callstack 0
   822  00000B                     get_ldnumber@i:
   823                           	opt callstack 0
   824  00000B                     send_cmd@arg:
   825                           	opt callstack 0
   826  00000B                     ld_clust@cl:
   827                           	opt callstack 0
   828                           
   829                           ; 4 bytes @ 0xA
   830  00000B                     	ds	2
   831  00000D                     ??_create_name:
   832  00000D                     ?_clust2sect:
   833                           	opt callstack 0
   834  00000D                     ___lldiv@counter:
   835                           	opt callstack 0
   836  00000D                     mem_cmp@r:
   837                           	opt callstack 0
   838  00000D                     clust2sect@fs:
   839                           	opt callstack 0
   840  00000D                     get_ldnumber@tt:
   841                           	opt callstack 0
   842                           
   843                           ; 2 bytes @ 0xC
   844  00000D                     	ds	2
   845  00000F                     send_cmd@cmd:
   846                           	opt callstack 0
   847  00000F                     clust2sect@clst:
   848                           	opt callstack 0
   849                           
   850                           ; 4 bytes @ 0xE
   851  00000F                     	ds	1
   852  000010                     send_cmd@res:
   853                           	opt callstack 0
   854                           
   855                           ; 1 bytes @ 0xF
   856  000010                     	ds	1
   857  000011                     ??_disk_initialize:
   858  000011                     disk_ioctl@cmd:
   859                           	opt callstack 0
   860  000011                     disk_read@buff:
   861                           	opt callstack 0
   862  000011                     disk_write@buff:
   863                           	opt callstack 0
   864  000011                     _create_name$624:
   865                           	opt callstack 0
   866                           
   867                           ; 2 bytes @ 0x10
   868  000011                     	ds	1
   869  000012                     disk_initialize@pdrv:
   870                           	opt callstack 0
   871  000012                     disk_ioctl@buff:
   872                           	opt callstack 0
   873                           
   874                           ; 2 bytes @ 0x11
   875  000012                     	ds	1
   876  000013                     ??_clust2sect:
   877  000013                     create_name@si:
   878                           	opt callstack 0
   879  000013                     disk_initialize@ocr:
   880                           	opt callstack 0
   881  000013                     disk_read@sector:
   882                           	opt callstack 0
   883  000013                     disk_write@sector:
   884                           	opt callstack 0
   885                           
   886                           ; 4 bytes @ 0x12
   887  000013                     	ds	1
   888  000014                     ??_disk_ioctl:
   889                           
   890                           ; 1 bytes @ 0x13
   891  000014                     	ds	1
   892  000015                     create_name@b:
   893                           	opt callstack 0
   894                           
   895                           ; 1 bytes @ 0x14
   896  000015                     	ds	1
   897  000016                     create_name@ni:
   898                           	opt callstack 0
   899                           
   900                           ; 2 bytes @ 0x15
   901  000016                     	ds	1
   902  000017                     _disk_initialize$134:
   903                           	opt callstack 0
   904  000017                     disk_read@count:
   905                           	opt callstack 0
   906  000017                     disk_write@count:
   907                           	opt callstack 0
   908                           
   909                           ; 2 bytes @ 0x16
   910  000017                     	ds	1
   911  000018                     create_name@p:
   912                           	opt callstack 0
   913                           
   914                           ; 2 bytes @ 0x17
   915  000018                     	ds	1
   916  000019                     ??_disk_write:
   917  000019                     disk_initialize@cmd:
   918                           	opt callstack 0
   919  000019                     disk_read@pdrv:
   920                           	opt callstack 0
   921                           
   922                           ; 1 bytes @ 0x18
   923  000019                     	ds	1
   924  00001A                     disk_initialize@ty:
   925                           	opt callstack 0
   926  00001A                     disk_write@pdrv:
   927                           	opt callstack 0
   928  00001A                     create_name@d:
   929                           	opt callstack 0
   930  00001A                     _disk_read$143:
   931                           	opt callstack 0
   932                           
   933                           ; 2 bytes @ 0x19
   934  00001A                     	ds	1
   935  00001B                     disk_initialize@tmr:
   936                           	opt callstack 0
   937  00001B                     sync_window@fs:
   938                           	opt callstack 0
   939  00001B                     create_name@sfn:
   940                           	opt callstack 0
   941                           
   942                           ; 2 bytes @ 0x1A
   943  00001B                     	ds	1
   944  00001C                     disk_read@cmd:
   945                           	opt callstack 0
   946                           
   947                           ; 1 bytes @ 0x1B
   948  00001C                     	ds	1
   949  00001D                     ??_sync_window:
   950  00001D                     disk_initialize@n:
   951                           	opt callstack 0
   952  00001D                     create_name@i:
   953                           	opt callstack 0
   954                           
   955                           ; 2 bytes @ 0x1C
   956  00001D                     	ds	2
   957  00001F                     create_name@c:
   958                           	opt callstack 0
   959                           
   960                           ; 1 bytes @ 0x1E
   961  00001F                     	ds	2
   962  000021                     disk_ioctl@csd:
   963                           	opt callstack 0
   964                           
   965                           ; 16 bytes @ 0x20
   966  000021                     	ds	8
   967  000029                     sync_window@res:
   968                           	opt callstack 0
   969                           
   970                           ; 1 bytes @ 0x28
   971  000029                     	ds	1
   972  00002A                     sync_window@nf:
   973                           	opt callstack 0
   974                           
   975                           ; 2 bytes @ 0x29
   976  00002A                     	ds	2
   977  00002C                     sync_window@wsect:
   978                           	opt callstack 0
   979                           
   980                           ; 4 bytes @ 0x2B
   981  00002C                     	ds	4
   982  000030                     move_window@fs:
   983                           	opt callstack 0
   984                           
   985                           ; 2 bytes @ 0x2F
   986  000030                     	ds	1
   987  000031                     disk_ioctl@pdrv:
   988                           	opt callstack 0
   989                           
   990                           ; 1 bytes @ 0x30
   991  000031                     	ds	1
   992  000032                     disk_ioctl@csize:
   993                           	opt callstack 0
   994  000032                     move_window@sector:
   995                           	opt callstack 0
   996                           
   997                           ; 4 bytes @ 0x31
   998  000032                     	ds	4
   999  000036                     disk_ioctl@res:
  1000                           	opt callstack 0
  1001                           
  1002                           ; 1 bytes @ 0x35
  1003  000036                     	ds	1
  1004  000037                     disk_ioctl@n:
  1005                           	opt callstack 0
  1006                           
  1007                           ; 1 bytes @ 0x36
  1008  000037                     	ds	1
  1009  000038                     disk_ioctl@ptr:
  1010                           	opt callstack 0
  1011                           
  1012                           ; 2 bytes @ 0x37
  1013  000038                     	ds	2
  1014  00003A                     move_window@res:
  1015                           	opt callstack 0
  1016  00003A                     sync_fs@fs:
  1017                           	opt callstack 0
  1018                           
  1019                           ; 2 bytes @ 0x39
  1020  00003A                     	ds	1
  1021  00003B                     ?_get_fat:
  1022                           	opt callstack 0
  1023  00003B                     get_fat@fs:
  1024                           	opt callstack 0
  1025  00003B                     put_fat@fs:
  1026                           	opt callstack 0
  1027  00003B                     check_fs@fs:
  1028                           	opt callstack 0
  1029                           
  1030                           ; 2 bytes @ 0x3A
  1031  00003B                     	ds	1
  1032  00003C                     ??_sync_fs:
  1033                           
  1034                           ; 1 bytes @ 0x3B
  1035  00003C                     	ds	1
  1036  00003D                     get_fat@clst:
  1037                           	opt callstack 0
  1038  00003D                     put_fat@clst:
  1039                           	opt callstack 0
  1040  00003D                     check_fs@sect:
  1041                           	opt callstack 0
  1042                           
  1043                           ; 4 bytes @ 0x3C
  1044  00003D                     	ds	4
  1045  000041                     ??_get_fat:
  1046  000041                     ??_check_fs:
  1047  000041                     put_fat@val:
  1048                           	opt callstack 0
  1049                           
  1050                           ; 4 bytes @ 0x40
  1051  000041                     	ds	3
  1052  000044                     sync_fs@res:
  1053                           	opt callstack 0
  1054                           
  1055                           ; 1 bytes @ 0x43
  1056  000044                     	ds	1
  1057  000045                     ??_put_fat:
  1058  000045                     find_volume@rfs:
  1059                           	opt callstack 0
  1060  000045                     f_sync@fp:
  1061                           	opt callstack 0
  1062                           
  1063                           ; 2 bytes @ 0x44
  1064  000045                     	ds	2
  1065  000047                     find_volume@path:
  1066                           	opt callstack 0
  1067                           
  1068                           ; 2 bytes @ 0x46
  1069  000047                     	ds	2
  1070  000049                     find_volume@wmode:
  1071                           	opt callstack 0
  1072                           
  1073                           ; 1 bytes @ 0x48
  1074  000049                     	ds	1
  1075  00004A                     ??_find_volume:
  1076  00004A                     _get_fat$374:
  1077                           	opt callstack 0
  1078                           
  1079                           ; 2 bytes @ 0x49
  1080  00004A                     	ds	1
  1081  00004B                     f_sync@res:
  1082                           	opt callstack 0
  1083                           
  1084                           ; 1 bytes @ 0x4A
  1085  00004B                     	ds	1
  1086  00004C                     f_sync@dir:
  1087                           	opt callstack 0
  1088  00004C                     get_fat@val:
  1089                           	opt callstack 0
  1090                           
  1091                           ; 4 bytes @ 0x4B
  1092  00004C                     	ds	1
  1093  00004D                     _put_fat$400:
  1094                           	opt callstack 0
  1095                           
  1096                           ; 2 bytes @ 0x4C
  1097  00004D                     	ds	1
  1098  00004E                     f_close@fp:
  1099                           	opt callstack 0
  1100                           
  1101                           ; 2 bytes @ 0x4D
  1102  00004E                     	ds	1
  1103  00004F                     _put_fat$401:
  1104                           	opt callstack 0
  1105                           
  1106                           ; 2 bytes @ 0x4E
  1107  00004F                     	ds	1
  1108  000050                     f_close@res:
  1109                           	opt callstack 0
  1110  000050                     get_fat@wc:
  1111                           	opt callstack 0
  1112                           
  1113                           ; 2 bytes @ 0x4F
  1114  000050                     	ds	1
  1115  000051                     put_fat@bc:
  1116                           	opt callstack 0
  1117                           
  1118                           ; 2 bytes @ 0x50
  1119  000051                     	ds	1
  1120  000052                     get_fat@p:
  1121                           	opt callstack 0
  1122  000052                     f_mount@fs:
  1123                           	opt callstack 0
  1124                           
  1125                           ; 2 bytes @ 0x51
  1126  000052                     	ds	1
  1127  000053                     put_fat@res:
  1128                           	opt callstack 0
  1129                           
  1130                           ; 1 bytes @ 0x52
  1131  000053                     	ds	1
  1132  000054                     get_fat@bc:
  1133                           	opt callstack 0
  1134  000054                     put_fat@p:
  1135                           	opt callstack 0
  1136  000054                     f_mount@path:
  1137                           	opt callstack 0
  1138                           
  1139                           ; 2 bytes @ 0x53
  1140  000054                     	ds	2
  1141  000056                     ?_create_chain:
  1142                           	opt callstack 0
  1143  000056                     f_mount@opt:
  1144                           	opt callstack 0
  1145  000056                     remove_chain@fs:
  1146                           	opt callstack 0
  1147  000056                     create_chain@fs:
  1148                           	opt callstack 0
  1149  000056                     dir_sdi@dp:
  1150                           	opt callstack 0
  1151                           
  1152                           ; 2 bytes @ 0x55
  1153  000056                     	ds	1
  1154  000057                     f_mount@res:
  1155                           	opt callstack 0
  1156                           
  1157                           ; 1 bytes @ 0x56
  1158  000057                     	ds	1
  1159  000058                     dir_sdi@idx:
  1160                           	opt callstack 0
  1161  000058                     f_mount@cfs:
  1162                           	opt callstack 0
  1163  000058                     remove_chain@clst:
  1164                           	opt callstack 0
  1165  000058                     create_chain@clst:
  1166                           	opt callstack 0
  1167                           
  1168                           ; 4 bytes @ 0x57
  1169  000058                     	ds	2
  1170  00005A                     f_mount@rp:
  1171                           	opt callstack 0
  1172                           
  1173                           ; 2 bytes @ 0x59
  1174  00005A                     	ds	2
  1175  00005C                     f_mount@vol:
  1176                           	opt callstack 0
  1177                           
  1178                           ; 2 bytes @ 0x5B
  1179  00005C                     	ds	4
  1180  000060                     
  1181                           ; 1 bytes @ 0x5F
  1182 ;;
  1183 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1184 ;;
  1185 ;; *************** function _main *****************
  1186 ;; Defined at:
  1187 ;;		line 31 in file "Main.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;		None
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;  o               2  120[BANK0 ] int 
  1192 ;;  a               2    0        int 
  1193 ;;  out             2    0        int 
  1194 ;;  letra           1  122[BANK0 ] unsigned char 
  1195 ;; Return value:  Size  Location     Type
  1196 ;;                  1    wreg      void 
  1197 ;; Registers used:
  1198 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1199 ;; Tracked objects:
  1200 ;;		On entry : 0/0
  1201 ;;		On exit  : 0/0
  1202 ;;		Unchanged: 0/0
  1203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1204 ;;      Params:         0       0       0       0       0       0       0       0       0
  1205 ;;      Locals:         0       5       0       0       0       0       0       0       0
  1206 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1207 ;;      Totals:         0       7       0       0       0       0       0       0       0
  1208 ;;Total ram usage:        7 bytes
  1209 ;; Hardware stack levels required when called:   15
  1210 ;; This function calls:
  1211 ;;		_InitPortA
  1212 ;;		_InitPortC
  1213 ;;		_guardar
  1214 ;;		_interruptadc
  1215 ;; This function is called by:
  1216 ;;		Startup code after reset
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220                           	psect	text0
  1221  005188                     __ptext0:
  1222                           	opt callstack 0
  1223  005188                     _main:
  1224                           	opt callstack 16
  1225                           
  1226                           ;Main.c: 33:     adcin = 0;
  1227                           
  1228                           ;incstack = 0
  1229  005188  0E00               	movlw	0
  1230  00518A  0100               	movlb	0	; () banked
  1231  00518C  6FE6               	movwf	(_adcin+1)& (0+255),b
  1232  00518E  0E00               	movlw	0
  1233  005190  6FE5               	movwf	_adcin& (0+255),b
  1234                           
  1235                           ;Main.c: 35:     int out;;Main.c: 37:     int o;;Main.c: 38:     char letra;;Main.c: 39:
      +                               o = 10;
  1236  005192  0E00               	movlw	0
  1237  005194  6FD9               	movwf	(main@o+1)& (0+255),b
  1238  005196  0E0A               	movlw	10
  1239  005198  6FD8               	movwf	main@o& (0+255),b
  1240                           
  1241                           ;Main.c: 40:     letra = "Hola perro :v";
  1242  00519A  0E10               	movlw	low (low STR_3)
  1243  00519C  6FDA               	movwf	main@letra& (0+255),b
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;Main.c: 42:     word = &letra;
  1247  00519E  0EDA               	movlw	low main@letra
  1248  0051A0  6FF7               	movwf	_word& (0+255),b
  1249  0051A2  0E00               	movlw	high main@letra
  1250  0051A4  6FF8               	movwf	(_word+1)& (0+255),b
  1251                           
  1252                           ; BSR set to: 0
  1253                           ;Main.c: 44:     InitPortA();
  1254  0051A6  EC21  F02B         	call	_InitPortA	;wreg free
  1255                           
  1256                           ;Main.c: 45:     InitPortC();
  1257  0051AA  EC19  F02B         	call	_InitPortC	;wreg free
  1258                           
  1259                           ;Main.c: 47:     OSCCON = 0x53;
  1260  0051AE  0E53               	movlw	83
  1261  0051B0  6ED3               	movwf	4051,c	;volatile
  1262                           
  1263                           ;Main.c: 48:     ADCON2 = 0x94;
  1264  0051B2  0E94               	movlw	148
  1265  0051B4  6EC0               	movwf	4032,c	;volatile
  1266                           
  1267                           ;Main.c: 49:     ADCON1 = 0x00;
  1268  0051B6  0E00               	movlw	0
  1269  0051B8  6EC1               	movwf	4033,c	;volatile
  1270                           
  1271                           ;Main.c: 50:     ADCON0 = 0x39;
  1272  0051BA  0E39               	movlw	57
  1273  0051BC  6EC2               	movwf	4034,c	;volatile
  1274                           
  1275                           ;Main.c: 51:     GIE = 1;
  1276  0051BE  8EF2               	bsf	4082,7,c	;volatile
  1277                           
  1278                           ;Main.c: 52:     PEIE = 1;
  1279  0051C0  8CF2               	bsf	4082,6,c	;volatile
  1280                           
  1281                           ;Main.c: 53:     ADIE = 1;
  1282  0051C2  8C9D               	bsf	3997,6,c	;volatile
  1283                           
  1284                           ;Main.c: 55:     guardar(word);
  1285  0051C4  C0F7  F0D0         	movff	_word,guardar@data
  1286  0051C8  C0F8  F0D1         	movff	_word+1,guardar@data+1
  1287  0051CC  EC9D  F01F         	call	_guardar	;wreg free
  1288  0051D0                     l6525:
  1289                           
  1290                           ;Main.c: 57:         ADCON0bits.GO=1;
  1291  0051D0  82C2               	bsf	4034,1,c	;volatile
  1292                           
  1293                           ;Main.c: 58:         adcin = interruptadc(adcin);
  1294  0051D2  C0E5  F001         	movff	_adcin,interruptadc@adcin
  1295  0051D6  C0E6  F002         	movff	_adcin+1,interruptadc@adcin+1
  1296  0051DA  ECBA  F02A         	call	_interruptadc	;wreg free
  1297  0051DE  C001  F0E5         	movff	?_interruptadc,_adcin
  1298  0051E2  C002  F0E6         	movff	?_interruptadc+1,_adcin+1
  1299                           
  1300                           ;Main.c: 59:         PORTA = adcin/4;
  1301  0051E6  C0E5  F0D4         	movff	_adcin,??_main
  1302  0051EA  C0E6  F0D5         	movff	_adcin+1,??_main+1
  1303  0051EE  0100               	movlb	0	; () banked
  1304  0051F0  90D8               	bcf	status,0,c
  1305  0051F2  33D5               	rrcf	(??_main+1)& (0+255),f,b
  1306  0051F4  33D4               	rrcf	??_main& (0+255),f,b
  1307  0051F6  90D8               	bcf	status,0,c
  1308  0051F8  33D5               	rrcf	(??_main+1)& (0+255),f,b
  1309  0051FA  33D4               	rrcf	??_main& (0+255),f,b
  1310  0051FC  51D4               	movf	??_main& (0+255),w,b
  1311  0051FE  6E80               	movwf	3968,c	;volatile
  1312  005200  D7E7               	goto	l6525
  1313  005202                     __end_of_main:
  1314                           	opt callstack 0
  1315                           
  1316 ;; *************** function _interruptadc *****************
  1317 ;; Defined at:
  1318 ;;		line 64 in file "Main.c"
  1319 ;; Parameters:    Size  Location     Type
  1320 ;;  adcin           2    0[COMRAM] int 
  1321 ;; Auto vars:     Size  Location     Type
  1322 ;;		None
  1323 ;; Return value:  Size  Location     Type
  1324 ;;                  2    0[COMRAM] int 
  1325 ;; Registers used:
  1326 ;;		wreg, status,2, status,0
  1327 ;; Tracked objects:
  1328 ;;		On entry : 0/0
  1329 ;;		On exit  : 0/0
  1330 ;;		Unchanged: 0/0
  1331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1332 ;;      Params:         2       0       0       0       0       0       0       0       0
  1333 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1334 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1335 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1336 ;;Total ram usage:        4 bytes
  1337 ;; Hardware stack levels used:    1
  1338 ;; This function calls:
  1339 ;;		Nothing
  1340 ;; This function is called by:
  1341 ;;		_main
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text1
  1346  005574                     __ptext1:
  1347                           	opt callstack 0
  1348  005574                     _interruptadc:
  1349                           	opt callstack 30
  1350                           
  1351                           ;Main.c: 65:     if(ADIF==1) {
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;incstack = 0
  1355  005574  AC9E               	btfss	3998,6,c	;volatile
  1356  005576  D00A               	goto	l6383
  1357                           
  1358                           ;Main.c: 66:         ADIE=0;
  1359  005578  9C9D               	bcf	3997,6,c	;volatile
  1360                           
  1361                           ;Main.c: 67:         adcin = (ADRESH<<8)+ADRESL;
  1362  00557A  50C4               	movf	4036,w,c	;volatile
  1363  00557C  6E04               	movwf	(??_interruptadc+1)& (0+255),c
  1364  00557E  6A03               	clrf	??_interruptadc& (0+255),c
  1365  005580  50C3               	movf	4035,w,c	;volatile
  1366  005582  2403               	addwf	??_interruptadc,w,c
  1367  005584  6E01               	movwf	interruptadc@adcin,c
  1368  005586  0E00               	movlw	0
  1369  005588  2004               	addwfc	??_interruptadc+1,w,c
  1370  00558A  6E02               	movwf	interruptadc@adcin+1,c
  1371  00558C                     l6383:
  1372                           
  1373                           ;Main.c: 69:     ADIE=1;
  1374  00558C  8C9D               	bsf	3997,6,c	;volatile
  1375                           
  1376                           ;Main.c: 70:     ADIF=0;
  1377  00558E  9C9E               	bcf	3998,6,c	;volatile
  1378                           
  1379                           ;Main.c: 71:     return adcin;
  1380  005590  C001  F001         	movff	interruptadc@adcin,?_interruptadc
  1381  005594  C002  F002         	movff	interruptadc@adcin+1,?_interruptadc+1
  1382  005598  0012               	return		;funcret
  1383  00559A                     __end_of_interruptadc:
  1384                           	opt callstack 0
  1385                           
  1386 ;; *************** function _guardar *****************
  1387 ;; Defined at:
  1388 ;;		line 113 in file "Main.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;  data            2  112[BANK0 ] PTR unsigned char 
  1391 ;;		 -> main@letra(1), NULL(0), 
  1392 ;; Auto vars:     Size  Location     Type
  1393 ;;  bw              2  114[BANK0 ] unsigned short 
  1394 ;; Return value:  Size  Location     Type
  1395 ;;                  1    wreg      void 
  1396 ;; Registers used:
  1397 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1398 ;; Tracked objects:
  1399 ;;		On entry : 0/0
  1400 ;;		On exit  : 0/0
  1401 ;;		Unchanged: 0/0
  1402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1403 ;;      Params:         0       2       0       0       0       0       0       0       0
  1404 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1405 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1406 ;;      Totals:         0       4       0       0       0       0       0       0       0
  1407 ;;Total ram usage:        4 bytes
  1408 ;; Hardware stack levels used:    1
  1409 ;; Hardware stack levels required when called:   14
  1410 ;; This function calls:
  1411 ;;		_Error
  1412 ;;		_SYSTEM_Initialize
  1413 ;;		___delay_sec
  1414 ;;		_f_close
  1415 ;;		_f_lseek
  1416 ;;		_f_mount
  1417 ;;		_f_open
  1418 ;;		_f_write
  1419 ;; This function is called by:
  1420 ;;		_main
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424                           	psect	text2
  1425  003F3A                     __ptext2:
  1426                           	opt callstack 0
  1427  003F3A                     _guardar:
  1428                           	opt callstack 16
  1429                           
  1430                           ;Main.c: 114:     UINT bw;;Main.c: 115:     SYSTEM_Initialize();
  1431                           
  1432                           ;incstack = 0
  1433  003F3A  EC30  F02B         	call	_SYSTEM_Initialize	;wreg free
  1434                           
  1435                           ;Main.c: 116:     if (f_mount(&FatFs, "", 1) != FR_OK) {
  1436  003F3E  0E20               	movlw	low _FatFs
  1437  003F40  6E52               	movwf	f_mount@fs,c
  1438  003F42  0E01               	movlw	high _FatFs
  1439  003F44  6E53               	movwf	f_mount@fs+1,c
  1440  003F46  0E28               	movlw	low (STR_6+10)
  1441  003F48  6E54               	movwf	f_mount@path,c
  1442  003F4A  0E08               	movlw	high (STR_6+10)
  1443  003F4C  6E55               	movwf	f_mount@path+1,c
  1444  003F4E  0E01               	movlw	1
  1445  003F50  6E56               	movwf	f_mount@opt,c
  1446  003F52  ECCF  F026         	call	_f_mount	;wreg free
  1447  003F56  0900               	iorlw	0
  1448  003F58  B4D8               	btfsc	status,2,c
  1449  003F5A  D018               	goto	u8540
  1450                           
  1451                           ;Main.c: 118:         Error(33);
  1452  003F5C  0E00               	movlw	0
  1453  003F5E  6E02               	movwf	Error@a+1,c
  1454  003F60  0E21               	movlw	33
  1455  003F62  6E01               	movwf	Error@a,c
  1456  003F64  EC0D  F026         	call	_Error	;wreg free
  1457                           
  1458                           ;Main.c: 119:         __delay_sec(2);
  1459  003F68  0E02               	movlw	2
  1460  003F6A  EC73  F02A         	call	___delay_sec
  1461  003F6E                     l6335:
  1462                           
  1463                           ;Main.c: 120:         while(f_mount(&FatFs, "", 1) != FR_OK) {
  1464  003F6E  0E20               	movlw	low _FatFs
  1465  003F70  6E52               	movwf	f_mount@fs,c
  1466  003F72  0E01               	movlw	high _FatFs
  1467  003F74  6E53               	movwf	f_mount@fs+1,c
  1468  003F76  0E28               	movlw	low (STR_6+10)
  1469  003F78  6E54               	movwf	f_mount@path,c
  1470  003F7A  0E08               	movlw	high (STR_6+10)
  1471  003F7C  6E55               	movwf	f_mount@path+1,c
  1472  003F7E  0E01               	movlw	1
  1473  003F80  6E56               	movwf	f_mount@opt,c
  1474  003F82  ECCF  F026         	call	_f_mount	;wreg free
  1475  003F86  0900               	iorlw	0
  1476  003F88  A4D8               	btfss	status,2,c
  1477  003F8A  D7F1               	goto	l6335
  1478  003F8C                     u8540:
  1479                           
  1480                           ;Main.c: 125:     Error(1);
  1481  003F8C  0E00               	movlw	0
  1482  003F8E  6E02               	movwf	Error@a+1,c
  1483  003F90  0E01               	movlw	1
  1484  003F92  6E01               	movwf	Error@a,c
  1485  003F94  EC0D  F026         	call	_Error	;wreg free
  1486                           
  1487                           ;Main.c: 126:     __delay_sec(2);
  1488  003F98  0E02               	movlw	2
  1489  003F9A  EC73  F02A         	call	___delay_sec
  1490                           
  1491                           ;Main.c: 128:     if (f_open(&Fil, "BeeDev.txt", 0x10 | 0x01 | 0x02) == FR_OK) {
  1492  003F9E  0E00               	movlw	low _Fil
  1493  003FA0  0100               	movlb	0	; () banked
  1494  003FA2  6F9A               	movwf	f_open@fp& (0+255),b
  1495  003FA4  0E01               	movlw	high _Fil
  1496  003FA6  6F9B               	movwf	(f_open@fp+1)& (0+255),b
  1497  003FA8  0E1E               	movlw	low STR_6
  1498  003FAA  6F9C               	movwf	f_open@path& (0+255),b
  1499  003FAC  0E08               	movlw	high STR_6
  1500  003FAE  6F9D               	movwf	(f_open@path+1)& (0+255),b
  1501  003FB0  0E13               	movlw	19
  1502  003FB2  6F9E               	movwf	f_open@mode& (0+255),b
  1503  003FB4  ECDD  F017         	call	_f_open	;wreg free
  1504  003FB8  0900               	iorlw	0
  1505  003FBA  A4D8               	btfss	status,2,c
  1506  003FBC  D066               	goto	l6375
  1507                           
  1508                           ;Main.c: 129:         Error(2);
  1509  003FBE  0E00               	movlw	0
  1510  003FC0  6E02               	movwf	Error@a+1,c
  1511  003FC2  0E02               	movlw	2
  1512  003FC4  6E01               	movwf	Error@a,c
  1513  003FC6  EC0D  F026         	call	_Error	;wreg free
  1514                           
  1515                           ;Main.c: 132:         __delay_sec(2);
  1516  003FCA  0E02               	movlw	2
  1517  003FCC  EC73  F02A         	call	___delay_sec
  1518                           
  1519                           ;Main.c: 133:          Error(3);
  1520  003FD0  0E00               	movlw	0
  1521  003FD2  6E02               	movwf	Error@a+1,c
  1522  003FD4  0E03               	movlw	3
  1523  003FD6  6E01               	movwf	Error@a,c
  1524  003FD8  EC0D  F026         	call	_Error	;wreg free
  1525                           
  1526                           ;Main.c: 135:    if ((Fil.fsize != 0) && (f_lseek(&Fil, Fil.fsize) != FR_OK)) goto endSD
      +                          ;
  1527  003FDC  0101               	movlb	1	; () banked
  1528  003FDE  510A               	movf	(_Fil+10)& (0+255),w,b
  1529  003FE0  110B               	iorwf	(_Fil+11)& (0+255),w,b
  1530  003FE2  110C               	iorwf	(_Fil+12)& (0+255),w,b
  1531  003FE4  110D               	iorwf	(_Fil+13)& (0+255),w,b
  1532  003FE6  B4D8               	btfsc	status,2,c
  1533  003FE8  D012               	goto	l6355
  1534                           
  1535                           ; BSR set to: 1
  1536  003FEA  0E00               	movlw	low _Fil
  1537  003FEC  0100               	movlb	0	; () banked
  1538  003FEE  6F6D               	movwf	f_lseek@fp& (0+255),b
  1539  003FF0  0E01               	movlw	high _Fil
  1540  003FF2  6F6E               	movwf	(f_lseek@fp+1)& (0+255),b
  1541  003FF4  C10A  F06F         	movff	_Fil+10,f_lseek@ofs
  1542  003FF8  C10B  F070         	movff	_Fil+11,f_lseek@ofs+1
  1543  003FFC  C10C  F071         	movff	_Fil+12,f_lseek@ofs+2
  1544  004000  C10D  F072         	movff	_Fil+13,f_lseek@ofs+3
  1545  004004  EC9E  F00C         	call	_f_lseek	;wreg free
  1546  004008  0900               	iorlw	0
  1547  00400A  A4D8               	btfss	status,2,c
  1548  00400C  D025               	goto	l6365
  1549  00400E                     l6355:
  1550                           
  1551                           ;Main.c: 136:                 Error(4);
  1552  00400E  0E00               	movlw	0
  1553  004010  6E02               	movwf	Error@a+1,c
  1554  004012  0E04               	movlw	4
  1555  004014  6E01               	movwf	Error@a,c
  1556  004016  EC0D  F026         	call	_Error	;wreg free
  1557                           
  1558                           ;Main.c: 137:                 __delay_sec(2);
  1559  00401A  0E02               	movlw	2
  1560  00401C  EC73  F02A         	call	___delay_sec
  1561                           
  1562                           ;Main.c: 139:                 f_write(&Fil, data , 28 , &bw);
  1563  004020  0E00               	movlw	low _Fil
  1564  004022  0100               	movlb	0	; () banked
  1565  004024  6F6D               	movwf	f_write@fp& (0+255),b
  1566  004026  0E01               	movlw	high _Fil
  1567  004028  6F6E               	movwf	(f_write@fp+1)& (0+255),b
  1568  00402A  C0D0  F06F         	movff	guardar@data,f_write@buff
  1569  00402E  C0D1  F070         	movff	guardar@data+1,f_write@buff+1
  1570  004032  0E00               	movlw	0
  1571  004034  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1572  004036  0E1C               	movlw	28
  1573  004038  6F71               	movwf	f_write@btw& (0+255),b
  1574  00403A  0ED2               	movlw	low guardar@bw
  1575  00403C  6F73               	movwf	f_write@bw& (0+255),b
  1576  00403E  0E00               	movlw	high guardar@bw
  1577  004040  6F74               	movwf	(f_write@bw+1)& (0+255),b
  1578  004042  ECEC  F008         	call	_f_write	;wreg free
  1579                           
  1580                           ;Main.c: 141:                 Error(5);
  1581  004046  0E00               	movlw	0
  1582  004048  6E02               	movwf	Error@a+1,c
  1583  00404A  0E05               	movlw	5
  1584  00404C  6E01               	movwf	Error@a,c
  1585  00404E  EC0D  F026         	call	_Error	;wreg free
  1586                           
  1587                           ;Main.c: 142:                 __delay_sec(2);
  1588  004052  0E02               	movlw	2
  1589  004054  EC73  F02A         	call	___delay_sec
  1590  004058                     l6365:
  1591  004058  0E00               	movlw	low _Fil
  1592  00405A  6E4E               	movwf	f_close@fp,c
  1593  00405C  0E01               	movlw	high _Fil
  1594  00405E  6E4F               	movwf	f_close@fp+1,c
  1595  004060  EC56  F02A         	call	_f_close	;wreg free
  1596                           
  1597                           ;Main.c: 144:                 Error(6);
  1598  004064  0E00               	movlw	0
  1599  004066  6E02               	movwf	Error@a+1,c
  1600  004068  0E06               	movlw	6
  1601  00406A  6E01               	movwf	Error@a,c
  1602  00406C  EC0D  F026         	call	_Error	;wreg free
  1603                           
  1604                           ;Main.c: 145:                 __delay_sec(1);
  1605  004070  0E01               	movlw	1
  1606  004072  EC73  F02A         	call	___delay_sec
  1607                           
  1608                           ;Main.c: 147:                 Error(7);
  1609  004076  0E00               	movlw	0
  1610  004078  6E02               	movwf	Error@a+1,c
  1611  00407A  0E07               	movlw	7
  1612  00407C  6E01               	movwf	Error@a,c
  1613  00407E  EC0D  F026         	call	_Error	;wreg free
  1614                           
  1615                           ;Main.c: 148:                 __delay_sec(2);
  1616  004082  0E02               	movlw	2
  1617  004084  EC73  F02A         	call	___delay_sec
  1618                           
  1619                           ;Main.c: 150:  }
  1620  004088  0012               	return	
  1621  00408A                     l6375:
  1622                           
  1623                           ;Main.c: 152:         Error(0);
  1624  00408A  0E00               	movlw	0
  1625  00408C  6E02               	movwf	Error@a+1,c
  1626  00408E  0E00               	movlw	0
  1627  004090  6E01               	movwf	Error@a,c
  1628  004092  EC0D  F026         	call	_Error	;wreg free
  1629  004096  0012               	return		;funcret
  1630  004098                     __end_of_guardar:
  1631                           	opt callstack 0
  1632                           
  1633 ;; *************** function _f_write *****************
  1634 ;; Defined at:
  1635 ;;		line 2691 in file "ff.c"
  1636 ;; Parameters:    Size  Location     Type
  1637 ;;  fp              2   13[BANK0 ] PTR struct .
  1638 ;;		 -> Fil(32), 
  1639 ;;  buff            2   15[BANK0 ] PTR const void 
  1640 ;;		 -> main@letra(1), NULL(0), 
  1641 ;;  btw             2   17[BANK0 ] unsigned short 
  1642 ;;  bw              2   19[BANK0 ] PTR unsigned short 
  1643 ;;		 -> guardar@bw(2), 
  1644 ;; Auto vars:     Size  Location     Type
  1645 ;;  clst            4   43[BANK0 ] unsigned long 
  1646 ;;  sect            4   39[BANK0 ] unsigned long 
  1647 ;;  wcnt            2   47[BANK0 ] unsigned short 
  1648 ;;  cc              2   37[BANK0 ] unsigned short 
  1649 ;;  wbuff           2   34[BANK0 ] PTR const unsigned char 
  1650 ;;		 -> main@letra(1), NULL(0), 
  1651 ;;  csect           1   36[BANK0 ] unsigned char 
  1652 ;;  res             1   33[BANK0 ] enum E93
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  1    wreg      enum E93
  1655 ;; Registers used:
  1656 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1662 ;;      Params:         0       8       0       0       0       0       0       0       0
  1663 ;;      Locals:         0      16       0       0       0       0       0       0       0
  1664 ;;      Temps:          0      12       0       0       0       0       0       0       0
  1665 ;;      Totals:         0      36       0       0       0       0       0       0       0
  1666 ;;Total ram usage:       36 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; Hardware stack levels required when called:   10
  1669 ;; This function calls:
  1670 ;;		_clust2sect
  1671 ;;		_create_chain
  1672 ;;		_disk_write
  1673 ;;		_mem_cpy
  1674 ;;		_move_window
  1675 ;;		_sync_window
  1676 ;;		_validate
  1677 ;; This function is called by:
  1678 ;;		_guardar
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           	psect	text3
  1683  0011D8                     __ptext3:
  1684                           	opt callstack 0
  1685  0011D8                     _f_write:
  1686                           	opt callstack 19
  1687                           
  1688                           ;ff.c: 2692:  FIL* fp,;ff.c: 2693:  const void *buff,;ff.c: 2694:  UINT btw,;ff.c: 2695:
      +                            UINT* bw;ff.c: 2697: {;ff.c: 2698:  FRESULT res;;ff.c: 2699:  DWORD clst, sect;;ff.c: 
      +                          2700:  UINT wcnt, cc;;ff.c: 2701:  const BYTE *wbuff = (const BYTE*)buff;
  1689                           
  1690                           ;incstack = 0
  1691  0011D8  C06F  F082         	movff	f_write@buff,f_write@wbuff
  1692  0011DC  C070  F083         	movff	f_write@buff+1,f_write@wbuff+1
  1693                           
  1694                           ;ff.c: 2702:  BYTE csect;;ff.c: 2705:  *bw = 0;
  1695  0011E0  C073  FFD9         	movff	f_write@bw,fsr2l
  1696  0011E4  C074  FFDA         	movff	f_write@bw+1,fsr2h
  1697  0011E8  0E00               	movlw	0
  1698  0011EA  6EDE               	movwf	postinc2,c
  1699  0011EC  0E00               	movlw	0
  1700  0011EE  6EDD               	movwf	postdec2,c
  1701                           
  1702                           ;ff.c: 2707:  res = validate(fp);
  1703  0011F0  C06D  F002         	movff	f_write@fp,validate@obj
  1704  0011F4  C06E  F003         	movff	f_write@fp+1,validate@obj+1
  1705  0011F8  EC7A  F027         	call	_validate	;wreg free
  1706  0011FC  0100               	movlb	0	; () banked
  1707  0011FE  6F81               	movwf	f_write@res& (0+255),b
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;ff.c: 2708:  if (res != FR_OK) return res;
  1711  001200  5181               	movf	f_write@res& (0+255),w,b
  1712  001202  A4D8               	btfss	status,2,c
  1713  001204  0012               	return	
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;ff.c: 2709:  if (fp->err)
  1717  001206  EE20 F005          	lfsr	2,5
  1718  00120A  516D               	movf	f_write@fp& (0+255),w,b
  1719  00120C  26D9               	addwf	fsr2l,f,c
  1720  00120E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1721  001210  22DA               	addwfc	fsr2h,f,c
  1722  001212  50DF               	movf	indf2,w,c
  1723  001214  A4D8               	btfss	status,2,c
  1724  001216  0012               	return	
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;ff.c: 2711:  if (!(fp->flag & 0x02))
  1728  001218  EE20 F004          	lfsr	2,4
  1729  00121C  516D               	movf	f_write@fp& (0+255),w,b
  1730  00121E  26D9               	addwf	fsr2l,f,c
  1731  001220  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1732  001222  22DA               	addwfc	fsr2h,f,c
  1733  001224  A2DF               	btfss	indf2,1,c
  1734  001226  0012               	return	
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;ff.c: 2713:  if (fp->fptr + btw < fp->fptr) btw = 0;
  1738  001228  EE20 F006          	lfsr	2,6
  1739  00122C  516D               	movf	f_write@fp& (0+255),w,b
  1740  00122E  26D9               	addwf	fsr2l,f,c
  1741  001230  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1742  001232  22DA               	addwfc	fsr2h,f,c
  1743  001234  EE10 F006          	lfsr	1,6
  1744  001238  516D               	movf	f_write@fp& (0+255),w,b
  1745  00123A  26E1               	addwf	fsr1l,f,c
  1746  00123C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1747  00123E  22E2               	addwfc	fsr1h,f,c
  1748  001240  CFE6 F079          	movff	postinc1,??_f_write+4
  1749  001244  CFE6 F07A          	movff	postinc1,??_f_write+5
  1750  001248  CFE6 F07B          	movff	postinc1,??_f_write+6
  1751  00124C  CFE6 F07C          	movff	postinc1,??_f_write+7
  1752  001250  5171               	movf	f_write@btw& (0+255),w,b
  1753  001252  2579               	addwf	(??_f_write+4)& (0+255),w,b
  1754  001254  6F7D               	movwf	(??_f_write+8)& (0+255),b
  1755  001256  5172               	movf	(f_write@btw+1)& (0+255),w,b
  1756  001258  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  1757  00125A  6F7E               	movwf	(??_f_write+9)& (0+255),b
  1758  00125C  0E00               	movlw	0
  1759  00125E  217B               	addwfc	(??_f_write+6)& (0+255),w,b
  1760  001260  6F7F               	movwf	(??_f_write+10)& (0+255),b
  1761  001262  0E00               	movlw	0
  1762  001264  217C               	addwfc	(??_f_write+7)& (0+255),w,b
  1763  001266  6F80               	movwf	(??_f_write+11)& (0+255),b
  1764  001268  50DE               	movf	postinc2,w,c
  1765  00126A  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  1766  00126C  50DE               	movf	postinc2,w,c
  1767  00126E  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  1768  001270  50DE               	movf	postinc2,w,c
  1769  001272  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  1770  001274  50DE               	movf	postinc2,w,c
  1771  001276  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  1772  001278  B0D8               	btfsc	status,0,c
  1773  00127A  D329               	goto	l6123
  1774                           
  1775                           ; BSR set to: 0
  1776  00127C  0E00               	movlw	0
  1777  00127E  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1778  001280  0E00               	movlw	0
  1779  001282  6F71               	movwf	f_write@btw& (0+255),b
  1780  001284  D324               	goto	l6123
  1781  001286                     l6015:
  1782                           
  1783                           ; BSR set to: 0
  1784                           ;ff.c: 2716:   wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {;ff.c: 2717: 
      +                            if ((fp->fptr % ((UINT)512)) == 0) {
  1785  001286  EE20 F006          	lfsr	2,6
  1786  00128A  516D               	movf	f_write@fp& (0+255),w,b
  1787  00128C  26D9               	addwf	fsr2l,f,c
  1788  00128E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1789  001290  22DA               	addwfc	fsr2h,f,c
  1790  001292  0EFF               	movlw	255
  1791  001294  14DE               	andwf	postinc2,w,c
  1792  001296  6F75               	movwf	??_f_write& (0+255),b
  1793  001298  0E01               	movlw	1
  1794  00129A  14DE               	andwf	postinc2,w,c
  1795  00129C  6F76               	movwf	(??_f_write+1)& (0+255),b
  1796  00129E  0E00               	movlw	0
  1797  0012A0  14DE               	andwf	postinc2,w,c
  1798  0012A2  6F77               	movwf	(??_f_write+2)& (0+255),b
  1799  0012A4  0E00               	movlw	0
  1800  0012A6  14DE               	andwf	postinc2,w,c
  1801  0012A8  6F78               	movwf	(??_f_write+3)& (0+255),b
  1802  0012AA  5175               	movf	??_f_write& (0+255),w,b
  1803  0012AC  1176               	iorwf	(??_f_write+1)& (0+255),w,b
  1804  0012AE  1177               	iorwf	(??_f_write+2)& (0+255),w,b
  1805  0012B0  1178               	iorwf	(??_f_write+3)& (0+255),w,b
  1806  0012B2  A4D8               	btfss	status,2,c
  1807  0012B4  D26A               	goto	l6099
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;ff.c: 2718:    csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  1811  0012B6  EE20 F006          	lfsr	2,6
  1812  0012BA  516D               	movf	f_write@fp& (0+255),w,b
  1813  0012BC  26D9               	addwf	fsr2l,f,c
  1814  0012BE  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1815  0012C0  22DA               	addwfc	fsr2h,f,c
  1816  0012C2  CFDE F075          	movff	postinc2,??_f_write
  1817  0012C6  CFDE F076          	movff	postinc2,??_f_write+1
  1818  0012CA  CFDE F077          	movff	postinc2,??_f_write+2
  1819  0012CE  CFDE F078          	movff	postinc2,??_f_write+3
  1820  0012D2  0E0A               	movlw	10
  1821  0012D4  D005               	goto	u7970
  1822  0012D6                     u7975:
  1823  0012D6  90D8               	bcf	status,0,c
  1824  0012D8  3378               	rrcf	(??_f_write+3)& (0+255),f,b
  1825  0012DA  3377               	rrcf	(??_f_write+2)& (0+255),f,b
  1826  0012DC  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1827  0012DE  3375               	rrcf	??_f_write& (0+255),f,b
  1828  0012E0                     u7970:
  1829  0012E0  2EE8               	decfsz	wreg,f,c
  1830  0012E2  D7F9               	goto	u7975
  1831  0012E4  C06D  FFD9         	movff	f_write@fp,fsr2l
  1832  0012E8  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1833  0012EC  EE10 F002          	lfsr	1,2
  1834  0012F0  50DE               	movf	postinc2,w,c
  1835  0012F2  26E1               	addwf	fsr1l,f,c
  1836  0012F4  50DD               	movf	postdec2,w,c
  1837  0012F6  22E2               	addwfc	fsr1h,f,c
  1838  0012F8  50E7               	movf	indf1,w,c
  1839  0012FA  6F79               	movwf	(??_f_write+4)& (0+255),b
  1840  0012FC  0579               	decf	(??_f_write+4)& (0+255),w,b
  1841  0012FE  1575               	andwf	??_f_write& (0+255),w,b
  1842  001300  6F84               	movwf	f_write@csect& (0+255),b
  1843                           
  1844                           ; BSR set to: 0
  1845                           ;ff.c: 2719:    if (!csect) {
  1846  001302  5184               	movf	f_write@csect& (0+255),w,b
  1847  001304  A4D8               	btfss	status,2,c
  1848  001306  D0A3               	goto	l6051
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;ff.c: 2720:     if (fp->fptr == 0) {
  1852  001308  EE20 F006          	lfsr	2,6
  1853  00130C  516D               	movf	f_write@fp& (0+255),w,b
  1854  00130E  26D9               	addwf	fsr2l,f,c
  1855  001310  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1856  001312  22DA               	addwfc	fsr2h,f,c
  1857  001314  50DE               	movf	postinc2,w,c
  1858  001316  10DE               	iorwf	postinc2,w,c
  1859  001318  10DE               	iorwf	postinc2,w,c
  1860  00131A  10DE               	iorwf	postinc2,w,c
  1861  00131C  A4D8               	btfss	status,2,c
  1862  00131E  D027               	goto	l6029
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;ff.c: 2721:      clst = fp->sclust;
  1866  001320  EE20 F00E          	lfsr	2,14
  1867  001324  516D               	movf	f_write@fp& (0+255),w,b
  1868  001326  26D9               	addwf	fsr2l,f,c
  1869  001328  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1870  00132A  22DA               	addwfc	fsr2h,f,c
  1871  00132C  CFDE F08B          	movff	postinc2,f_write@clst
  1872  001330  CFDE F08C          	movff	postinc2,f_write@clst+1
  1873  001334  CFDE F08D          	movff	postinc2,f_write@clst+2
  1874  001338  CFDE F08E          	movff	postinc2,f_write@clst+3
  1875                           
  1876                           ; BSR set to: 0
  1877                           ;ff.c: 2722:      if (clst == 0)
  1878  00133C  518B               	movf	f_write@clst& (0+255),w,b
  1879  00133E  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1880  001340  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1881  001342  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1882  001344  A4D8               	btfss	status,2,c
  1883  001346  D033               	goto	l6031
  1884                           
  1885                           ; BSR set to: 0
  1886                           ;ff.c: 2723:       clst = create_chain(fp->fs, 0);
  1887  001348  C06D  FFD9         	movff	f_write@fp,fsr2l
  1888  00134C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1889  001350  CFDE F056          	movff	postinc2,create_chain@fs
  1890  001354  CFDD F057          	movff	postdec2,create_chain@fs+1
  1891  001358  0E00               	movlw	0
  1892  00135A  6E58               	movwf	create_chain@clst,c
  1893  00135C  0E00               	movlw	0
  1894  00135E  6E59               	movwf	create_chain@clst+1,c
  1895  001360  0E00               	movlw	0
  1896  001362  6E5A               	movwf	create_chain@clst+2,c
  1897  001364  0E00               	movlw	0
  1898  001366  6E5B               	movwf	create_chain@clst+3,c
  1899  001368  ECA8  F019         	call	_create_chain	;wreg free
  1900  00136C  D018               	goto	L1
  1901  00136E                     l6029:
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;ff.c: 2730:       clst = create_chain(fp->fs, fp->clust);
  1905  00136E  C06D  FFD9         	movff	f_write@fp,fsr2l
  1906  001372  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1907  001376  CFDE F056          	movff	postinc2,create_chain@fs
  1908  00137A  CFDD F057          	movff	postdec2,create_chain@fs+1
  1909  00137E  EE20 F012          	lfsr	2,18
  1910  001382  516D               	movf	f_write@fp& (0+255),w,b
  1911  001384  26D9               	addwf	fsr2l,f,c
  1912  001386  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1913  001388  22DA               	addwfc	fsr2h,f,c
  1914  00138A  CFDE F058          	movff	postinc2,create_chain@clst
  1915  00138E  CFDE F059          	movff	postinc2,create_chain@clst+1
  1916  001392  CFDE F05A          	movff	postinc2,create_chain@clst+2
  1917  001396  CFDE F05B          	movff	postinc2,create_chain@clst+3
  1918  00139A  ECA8  F019         	call	_create_chain	;wreg free
  1919  00139E                     L1:
  1920  00139E  C056  F08B         	movff	?_create_chain,f_write@clst
  1921  0013A2  C057  F08C         	movff	?_create_chain+1,f_write@clst+1
  1922  0013A6  C058  F08D         	movff	?_create_chain+2,f_write@clst+2
  1923  0013AA  C059  F08E         	movff	?_create_chain+3,f_write@clst+3
  1924  0013AE                     l6031:
  1925                           
  1926                           ;ff.c: 2732:     if (clst == 0) break;
  1927  0013AE  0100               	movlb	0	; () banked
  1928  0013B0  518B               	movf	f_write@clst& (0+255),w,b
  1929  0013B2  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1930  0013B4  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1931  0013B6  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1932  0013B8  B4D8               	btfsc	status,2,c
  1933  0013BA  D28D               	goto	u8190
  1934                           
  1935                           ; BSR set to: 0
  1936                           ;ff.c: 2733:     if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1937  0013BC  058B               	decf	f_write@clst& (0+255),w,b
  1938  0013BE  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1939  0013C0  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1940  0013C2  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1941  0013C4  A4D8               	btfss	status,2,c
  1942  0013C6  D009               	goto	l6041
  1943                           
  1944                           ; BSR set to: 0
  1945  0013C8  EE20 F005          	lfsr	2,5
  1946  0013CC  516D               	movf	f_write@fp& (0+255),w,b
  1947  0013CE  26D9               	addwf	fsr2l,f,c
  1948  0013D0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1949  0013D2  22DA               	addwfc	fsr2h,f,c
  1950  0013D4  0E02               	movlw	2
  1951  0013D6  6EDF               	movwf	indf2,c
  1952  0013D8  0012               	return	
  1953  0013DA                     l6041:
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;ff.c: 2734:     if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK
      +                          _ERR; };
  1957  0013DA  298B               	incf	f_write@clst& (0+255),w,b
  1958  0013DC  E110               	bnz	l6047
  1959  0013DE  298C               	incf	(f_write@clst+1)& (0+255),w,b
  1960  0013E0  E10E               	bnz	l6047
  1961  0013E2  298D               	incf	(f_write@clst+2)& (0+255),w,b
  1962  0013E4  E10C               	bnz	l6047
  1963  0013E6  298E               	incf	(f_write@clst+3)& (0+255),w,b
  1964  0013E8  A4D8               	btfss	status,2,c
  1965  0013EA  D009               	goto	l6047
  1966                           
  1967                           ; BSR set to: 0
  1968  0013EC  EE20 F005          	lfsr	2,5
  1969  0013F0  516D               	movf	f_write@fp& (0+255),w,b
  1970  0013F2  26D9               	addwf	fsr2l,f,c
  1971  0013F4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1972  0013F6  22DA               	addwfc	fsr2h,f,c
  1973  0013F8  0E01               	movlw	1
  1974  0013FA  6EDF               	movwf	indf2,c
  1975  0013FC  0012               	return	
  1976  0013FE                     l6047:
  1977                           
  1978                           ; BSR set to: 0
  1979                           ;ff.c: 2735:     fp->clust = clst;
  1980  0013FE  EE20 F012          	lfsr	2,18
  1981  001402  516D               	movf	f_write@fp& (0+255),w,b
  1982  001404  26D9               	addwf	fsr2l,f,c
  1983  001406  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1984  001408  22DA               	addwfc	fsr2h,f,c
  1985  00140A  C08B  FFDE         	movff	f_write@clst,postinc2
  1986  00140E  C08C  FFDE         	movff	f_write@clst+1,postinc2
  1987  001412  C08D  FFDE         	movff	f_write@clst+2,postinc2
  1988  001416  C08E  FFDE         	movff	f_write@clst+3,postinc2
  1989                           
  1990                           ;ff.c: 2736:     if (fp->sclust == 0) fp->sclust = clst;
  1991  00141A  EE20 F00E          	lfsr	2,14
  1992  00141E  516D               	movf	f_write@fp& (0+255),w,b
  1993  001420  26D9               	addwf	fsr2l,f,c
  1994  001422  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1995  001424  22DA               	addwfc	fsr2h,f,c
  1996  001426  50DE               	movf	postinc2,w,c
  1997  001428  10DE               	iorwf	postinc2,w,c
  1998  00142A  10DE               	iorwf	postinc2,w,c
  1999  00142C  10DE               	iorwf	postinc2,w,c
  2000  00142E  A4D8               	btfss	status,2,c
  2001  001430  D00E               	goto	l6051
  2002                           
  2003                           ; BSR set to: 0
  2004  001432  EE20 F00E          	lfsr	2,14
  2005  001436  516D               	movf	f_write@fp& (0+255),w,b
  2006  001438  26D9               	addwf	fsr2l,f,c
  2007  00143A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2008  00143C  22DA               	addwfc	fsr2h,f,c
  2009  00143E  C08B  FFDE         	movff	f_write@clst,postinc2
  2010  001442  C08C  FFDE         	movff	f_write@clst+1,postinc2
  2011  001446  C08D  FFDE         	movff	f_write@clst+2,postinc2
  2012  00144A  C08E  FFDE         	movff	f_write@clst+3,postinc2
  2013  00144E                     l6051:
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;ff.c: 2739:    if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  2017  00144E  EE20 F016          	lfsr	2,22
  2018  001452  516D               	movf	f_write@fp& (0+255),w,b
  2019  001454  26D9               	addwf	fsr2l,f,c
  2020  001456  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2021  001458  22DA               	addwfc	fsr2h,f,c
  2022  00145A  C06D  FFE1         	movff	f_write@fp,fsr1l
  2023  00145E  C06E  FFE2         	movff	f_write@fp+1,fsr1h
  2024  001462  EE00 F02A          	lfsr	0,42
  2025  001466  50E6               	movf	postinc1,w,c
  2026  001468  26E9               	addwf	fsr0l,f,c
  2027  00146A  50E5               	movf	postdec1,w,c
  2028  00146C  22EA               	addwfc	fsr0h,f,c
  2029  00146E  50DE               	movf	postinc2,w,c
  2030  001470  18EE               	xorwf	postinc0,w,c
  2031  001472  E121               	bnz	l6059
  2032  001474  50DE               	movf	postinc2,w,c
  2033  001476  18EE               	xorwf	postinc0,w,c
  2034  001478  E11E               	bnz	l6059
  2035  00147A  50DE               	movf	postinc2,w,c
  2036  00147C  18EE               	xorwf	postinc0,w,c
  2037  00147E  E11B               	bnz	l6059
  2038  001480  50DE               	movf	postinc2,w,c
  2039  001482  18EE               	xorwf	postinc0,w,c
  2040  001484  A4D8               	btfss	status,2,c
  2041  001486  D017               	goto	l6059
  2042                           
  2043                           ; BSR set to: 0
  2044  001488  C06D  FFD9         	movff	f_write@fp,fsr2l
  2045  00148C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2046  001490  CFDE F01B          	movff	postinc2,sync_window@fs
  2047  001494  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2048  001498  EC4C  F020         	call	_sync_window	;wreg free
  2049  00149C  0900               	iorlw	0
  2050  00149E  B4D8               	btfsc	status,2,c
  2051  0014A0  D00A               	goto	l6059
  2052                           
  2053                           ;ff.c: 2740:     { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2054  0014A2  0100               	movlb	0	; () banked
  2055  0014A4  EE20 F005          	lfsr	2,5
  2056  0014A8  516D               	movf	f_write@fp& (0+255),w,b
  2057  0014AA  26D9               	addwf	fsr2l,f,c
  2058  0014AC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2059  0014AE  22DA               	addwfc	fsr2h,f,c
  2060  0014B0  0E01               	movlw	1
  2061  0014B2  6EDF               	movwf	indf2,c
  2062  0014B4  0012               	return	
  2063  0014B6                     l6059:
  2064                           
  2065                           ;ff.c: 2748:    sect = clust2sect(fp->fs, fp->clust);
  2066  0014B6  C06D  FFD9         	movff	f_write@fp,fsr2l
  2067  0014BA  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2068  0014BE  CFDE F00D          	movff	postinc2,clust2sect@fs
  2069  0014C2  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  2070  0014C6  0100               	movlb	0	; () banked
  2071  0014C8  EE20 F012          	lfsr	2,18
  2072  0014CC  516D               	movf	f_write@fp& (0+255),w,b
  2073  0014CE  26D9               	addwf	fsr2l,f,c
  2074  0014D0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2075  0014D2  22DA               	addwfc	fsr2h,f,c
  2076  0014D4  CFDE F00F          	movff	postinc2,clust2sect@clst
  2077  0014D8  CFDE F010          	movff	postinc2,clust2sect@clst+1
  2078  0014DC  CFDE F011          	movff	postinc2,clust2sect@clst+2
  2079  0014E0  CFDE F012          	movff	postinc2,clust2sect@clst+3
  2080  0014E4  EC72  F026         	call	_clust2sect	;wreg free
  2081  0014E8  C00D  F087         	movff	?_clust2sect,f_write@sect
  2082  0014EC  C00E  F088         	movff	?_clust2sect+1,f_write@sect+1
  2083  0014F0  C00F  F089         	movff	?_clust2sect+2,f_write@sect+2
  2084  0014F4  C010  F08A         	movff	?_clust2sect+3,f_write@sect+3
  2085                           
  2086                           ;ff.c: 2749:    if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  2087  0014F8  0100               	movlb	0	; () banked
  2088  0014FA  5187               	movf	f_write@sect& (0+255),w,b
  2089  0014FC  1188               	iorwf	(f_write@sect+1)& (0+255),w,b
  2090  0014FE  1189               	iorwf	(f_write@sect+2)& (0+255),w,b
  2091  001500  118A               	iorwf	(f_write@sect+3)& (0+255),w,b
  2092  001502  A4D8               	btfss	status,2,c
  2093  001504  D009               	goto	l6067
  2094                           
  2095                           ; BSR set to: 0
  2096  001506  EE20 F005          	lfsr	2,5
  2097  00150A  516D               	movf	f_write@fp& (0+255),w,b
  2098  00150C  26D9               	addwf	fsr2l,f,c
  2099  00150E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2100  001510  22DA               	addwfc	fsr2h,f,c
  2101  001512  0E02               	movlw	2
  2102  001514  6EDF               	movwf	indf2,c
  2103  001516  0012               	return	
  2104  001518                     l6067:
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;ff.c: 2750:    sect += csect;
  2108  001518  5184               	movf	f_write@csect& (0+255),w,b
  2109  00151A  2787               	addwf	f_write@sect& (0+255),f,b
  2110  00151C  0E00               	movlw	0
  2111  00151E  2388               	addwfc	(f_write@sect+1)& (0+255),f,b
  2112  001520  2389               	addwfc	(f_write@sect+2)& (0+255),f,b
  2113  001522  238A               	addwfc	(f_write@sect+3)& (0+255),f,b
  2114                           
  2115                           ;ff.c: 2751:    cc = btw / ((UINT)512);
  2116  001524  C071  F075         	movff	f_write@btw,??_f_write
  2117  001528  C072  F076         	movff	f_write@btw+1,??_f_write+1
  2118  00152C  0E09               	movlw	9
  2119  00152E  6F77               	movwf	(??_f_write+2)& (0+255),b
  2120  001530                     u8085:
  2121  001530  90D8               	bcf	status,0,c
  2122  001532  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  2123  001534  3375               	rrcf	??_f_write& (0+255),f,b
  2124  001536  2F77               	decfsz	(??_f_write+2)& (0+255),f,b
  2125  001538  D7FB               	goto	u8085
  2126  00153A  C075  F085         	movff	??_f_write,f_write@cc
  2127  00153E  C076  F086         	movff	??_f_write+1,f_write@cc+1
  2128                           
  2129                           ;ff.c: 2752:    if (cc) {
  2130  001542  5185               	movf	f_write@cc& (0+255),w,b
  2131  001544  1186               	iorwf	(f_write@cc+1)& (0+255),w,b
  2132  001546  B4D8               	btfsc	status,2,c
  2133  001548  D0D2               	goto	l6087
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;ff.c: 2753:     if (csect + cc > fp->fs->csize)
  2137  00154A  5184               	movf	f_write@csect& (0+255),w,b
  2138  00154C  2585               	addwf	f_write@cc& (0+255),w,b
  2139  00154E  6F75               	movwf	??_f_write& (0+255),b
  2140  001550  0E00               	movlw	0
  2141  001552  2186               	addwfc	(f_write@cc+1)& (0+255),w,b
  2142  001554  6F76               	movwf	(??_f_write+1)& (0+255),b
  2143  001556  C06D  FFD9         	movff	f_write@fp,fsr2l
  2144  00155A  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2145  00155E  EE10 F002          	lfsr	1,2
  2146  001562  50DE               	movf	postinc2,w,c
  2147  001564  26E1               	addwf	fsr1l,f,c
  2148  001566  50DD               	movf	postdec2,w,c
  2149  001568  22E2               	addwfc	fsr1h,f,c
  2150  00156A  50E7               	movf	indf1,w,c
  2151  00156C  6F77               	movwf	(??_f_write+2)& (0+255),b
  2152  00156E  6B78               	clrf	(??_f_write+3)& (0+255),b
  2153  001570  5175               	movf	??_f_write& (0+255),w,b
  2154  001572  5D77               	subwf	(??_f_write+2)& (0+255),w,b
  2155  001574  5176               	movf	(??_f_write+1)& (0+255),w,b
  2156  001576  5978               	subwfb	(??_f_write+3)& (0+255),w,b
  2157  001578  B0D8               	btfsc	status,0,c
  2158  00157A  D012               	goto	l6073
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;ff.c: 2754:      cc = fp->fs->csize - csect;
  2162  00157C  C06D  FFD9         	movff	f_write@fp,fsr2l
  2163  001580  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2164  001584  EE10 F002          	lfsr	1,2
  2165  001588  50DE               	movf	postinc2,w,c
  2166  00158A  26E1               	addwf	fsr1l,f,c
  2167  00158C  50DD               	movf	postdec2,w,c
  2168  00158E  22E2               	addwfc	fsr1h,f,c
  2169  001590  50E7               	movf	indf1,w,c
  2170  001592  6F75               	movwf	??_f_write& (0+255),b
  2171  001594  5184               	movf	f_write@csect& (0+255),w,b
  2172  001596  5D75               	subwf	??_f_write& (0+255),w,b
  2173  001598  6F85               	movwf	f_write@cc& (0+255),b
  2174  00159A  6B86               	clrf	(f_write@cc+1)& (0+255),b
  2175  00159C  A0D8               	btfss	status,0,c
  2176  00159E  0786               	decf	(f_write@cc+1)& (0+255),f,b
  2177  0015A0                     l6073:
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;ff.c: 2755:     if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  2181  0015A0  C082  F011         	movff	f_write@wbuff,disk_write@buff
  2182  0015A4  C083  F012         	movff	f_write@wbuff+1,disk_write@buff+1
  2183  0015A8  C087  F013         	movff	f_write@sect,disk_write@sector
  2184  0015AC  C088  F014         	movff	f_write@sect+1,disk_write@sector+1
  2185  0015B0  C089  F015         	movff	f_write@sect+2,disk_write@sector+2
  2186  0015B4  C08A  F016         	movff	f_write@sect+3,disk_write@sector+3
  2187  0015B8  C085  F017         	movff	f_write@cc,disk_write@count
  2188  0015BC  C086  F018         	movff	f_write@cc+1,disk_write@count+1
  2189  0015C0  C06D  FFD9         	movff	f_write@fp,fsr2l
  2190  0015C4  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2191  0015C8  EE10 F001          	lfsr	1,1
  2192  0015CC  50DE               	movf	postinc2,w,c
  2193  0015CE  26E1               	addwf	fsr1l,f,c
  2194  0015D0  50DD               	movf	postdec2,w,c
  2195  0015D2  22E2               	addwfc	fsr1h,f,c
  2196  0015D4  50E7               	movf	indf1,w,c
  2197  0015D6  ECE1  F022         	call	_disk_write
  2198  0015DA  0900               	iorlw	0
  2199  0015DC  B4D8               	btfsc	status,2,c
  2200  0015DE  D00A               	goto	l6079
  2201                           
  2202                           ;ff.c: 2756:      { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2203  0015E0  0100               	movlb	0	; () banked
  2204  0015E2  EE20 F005          	lfsr	2,5
  2205  0015E6  516D               	movf	f_write@fp& (0+255),w,b
  2206  0015E8  26D9               	addwf	fsr2l,f,c
  2207  0015EA  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2208  0015EC  22DA               	addwfc	fsr2h,f,c
  2209  0015EE  0E01               	movlw	1
  2210  0015F0  6EDF               	movwf	indf2,c
  2211  0015F2  0012               	return	
  2212  0015F4                     l6079:
  2213                           
  2214                           ;ff.c: 2759:     if (fp->fs->winsect - sect < cc) {
  2215  0015F4  0100               	movlb	0	; () banked
  2216  0015F6  5185               	movf	f_write@cc& (0+255),w,b
  2217  0015F8  6F75               	movwf	??_f_write& (0+255),b
  2218  0015FA  5186               	movf	(f_write@cc+1)& (0+255),w,b
  2219  0015FC  6F76               	movwf	(??_f_write+1)& (0+255),b
  2220  0015FE  6B77               	clrf	(??_f_write+2)& (0+255),b
  2221  001600  6B78               	clrf	(??_f_write+3)& (0+255),b
  2222  001602  C06D  FFD9         	movff	f_write@fp,fsr2l
  2223  001606  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2224  00160A  EE10 F02A          	lfsr	1,42
  2225  00160E  50DE               	movf	postinc2,w,c
  2226  001610  26E1               	addwf	fsr1l,f,c
  2227  001612  50DD               	movf	postdec2,w,c
  2228  001614  22E2               	addwfc	fsr1h,f,c
  2229  001616  CFE6 F079          	movff	postinc1,??_f_write+4
  2230  00161A  CFE6 F07A          	movff	postinc1,??_f_write+5
  2231  00161E  CFE6 F07B          	movff	postinc1,??_f_write+6
  2232  001622  CFE6 F07C          	movff	postinc1,??_f_write+7
  2233  001626  5187               	movf	f_write@sect& (0+255),w,b
  2234  001628  5D79               	subwf	(??_f_write+4)& (0+255),w,b
  2235  00162A  6F7D               	movwf	(??_f_write+8)& (0+255),b
  2236  00162C  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2237  00162E  597A               	subwfb	(??_f_write+5)& (0+255),w,b
  2238  001630  6F7E               	movwf	(??_f_write+9)& (0+255),b
  2239  001632  5189               	movf	(f_write@sect+2)& (0+255),w,b
  2240  001634  597B               	subwfb	(??_f_write+6)& (0+255),w,b
  2241  001636  6F7F               	movwf	(??_f_write+10)& (0+255),b
  2242  001638  518A               	movf	(f_write@sect+3)& (0+255),w,b
  2243  00163A  597C               	subwfb	(??_f_write+7)& (0+255),w,b
  2244  00163C  6F80               	movwf	(??_f_write+11)& (0+255),b
  2245  00163E  5175               	movf	??_f_write& (0+255),w,b
  2246  001640  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  2247  001642  5176               	movf	(??_f_write+1)& (0+255),w,b
  2248  001644  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  2249  001646  5177               	movf	(??_f_write+2)& (0+255),w,b
  2250  001648  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  2251  00164A  5178               	movf	(??_f_write+3)& (0+255),w,b
  2252  00164C  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  2253  00164E  B0D8               	btfsc	status,0,c
  2254  001650  D03E               	goto	l6085
  2255                           
  2256                           ; BSR set to: 0
  2257                           ;ff.c: 2760:      mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)),
      +                           ((UINT)512));
  2258  001652  C06D  FFD9         	movff	f_write@fp,fsr2l
  2259  001656  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2260  00165A  CFDE F075          	movff	postinc2,??_f_write
  2261  00165E  CFDD F076          	movff	postdec2,??_f_write+1
  2262  001662  0E2E               	movlw	46
  2263  001664  2575               	addwf	??_f_write& (0+255),w,b
  2264  001666  6E01               	movwf	mem_cpy@dst,c
  2265  001668  0E00               	movlw	0
  2266  00166A  2176               	addwfc	(??_f_write+1)& (0+255),w,b
  2267  00166C  6E02               	movwf	mem_cpy@dst+1,c
  2268  00166E  C06D  FFD9         	movff	f_write@fp,fsr2l
  2269  001672  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2270  001676  EE10 F02A          	lfsr	1,42
  2271  00167A  50DE               	movf	postinc2,w,c
  2272  00167C  26E1               	addwf	fsr1l,f,c
  2273  00167E  50DD               	movf	postdec2,w,c
  2274  001680  22E2               	addwfc	fsr1h,f,c
  2275  001682  CFE6 F077          	movff	postinc1,??_f_write+2
  2276  001686  CFE5 F078          	movff	postdec1,??_f_write+3
  2277  00168A  5187               	movf	f_write@sect& (0+255),w,b
  2278  00168C  5F77               	subwf	(??_f_write+2)& (0+255),f,b
  2279  00168E  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2280  001690  5B78               	subwfb	(??_f_write+3)& (0+255),f,b
  2281  001692  0E09               	movlw	9
  2282  001694                     u8135:
  2283  001694  90D8               	bcf	status,0,c
  2284  001696  3777               	rlcf	(??_f_write+2)& (0+255),f,b
  2285  001698  3778               	rlcf	(??_f_write+3)& (0+255),f,b
  2286  00169A  2EE8               	decfsz	wreg,f,c
  2287  00169C  D7FB               	goto	u8135
  2288  00169E  5177               	movf	(??_f_write+2)& (0+255),w,b
  2289  0016A0  2582               	addwf	f_write@wbuff& (0+255),w,b
  2290  0016A2  6E03               	movwf	mem_cpy@src,c
  2291  0016A4  5178               	movf	(??_f_write+3)& (0+255),w,b
  2292  0016A6  2183               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  2293  0016A8  6E04               	movwf	mem_cpy@src+1,c
  2294  0016AA  0E02               	movlw	2
  2295  0016AC  6E06               	movwf	mem_cpy@cnt+1,c
  2296  0016AE  0E00               	movlw	0
  2297  0016B0  6E05               	movwf	mem_cpy@cnt,c
  2298  0016B2  EC85  F028         	call	_mem_cpy	;wreg free
  2299                           
  2300                           ;ff.c: 2761:      fp->fs->wflag = 0;
  2301  0016B6  C06D  FFD9         	movff	f_write@fp,fsr2l
  2302  0016BA  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2303  0016BE  EE10 F004          	lfsr	1,4
  2304  0016C2  50DE               	movf	postinc2,w,c
  2305  0016C4  26E1               	addwf	fsr1l,f,c
  2306  0016C6  50DD               	movf	postdec2,w,c
  2307  0016C8  22E2               	addwfc	fsr1h,f,c
  2308  0016CA  0E00               	movlw	0
  2309  0016CC  6EE7               	movwf	indf1,c
  2310  0016CE                     l6085:
  2311                           
  2312                           ;ff.c: 2770:     wcnt = ((UINT)512) * cc;
  2313  0016CE  C085  F075         	movff	f_write@cc,??_f_write
  2314  0016D2  C086  F076         	movff	f_write@cc+1,??_f_write+1
  2315  0016D6  0E09               	movlw	9
  2316  0016D8                     u8145:
  2317  0016D8  90D8               	bcf	status,0,c
  2318  0016DA  0100               	movlb	0	; () banked
  2319  0016DC  3775               	rlcf	??_f_write& (0+255),f,b
  2320  0016DE  3776               	rlcf	(??_f_write+1)& (0+255),f,b
  2321  0016E0  2EE8               	decfsz	wreg,f,c
  2322  0016E2  D7FA               	goto	u8145
  2323  0016E4  C075  F08F         	movff	??_f_write,f_write@wcnt
  2324  0016E8  C076  F090         	movff	??_f_write+1,f_write@wcnt+1
  2325                           
  2326                           ;ff.c: 2771:     continue;
  2327  0016EC  D0D2               	goto	l6115
  2328  0016EE                     l6087:
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;ff.c: 2774:    if (fp->fptr >= fp->fsize) {
  2332  0016EE  EE20 F00A          	lfsr	2,10
  2333  0016F2  516D               	movf	f_write@fp& (0+255),w,b
  2334  0016F4  26D9               	addwf	fsr2l,f,c
  2335  0016F6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2336  0016F8  22DA               	addwfc	fsr2h,f,c
  2337  0016FA  EE10 F006          	lfsr	1,6
  2338  0016FE  516D               	movf	f_write@fp& (0+255),w,b
  2339  001700  26E1               	addwf	fsr1l,f,c
  2340  001702  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2341  001704  22E2               	addwfc	fsr1h,f,c
  2342  001706  50DE               	movf	postinc2,w,c
  2343  001708  5CE6               	subwf	postinc1,w,c
  2344  00170A  50DE               	movf	postinc2,w,c
  2345  00170C  58E6               	subwfb	postinc1,w,c
  2346  00170E  50DE               	movf	postinc2,w,c
  2347  001710  58E6               	subwfb	postinc1,w,c
  2348  001712  50DE               	movf	postinc2,w,c
  2349  001714  58E6               	subwfb	postinc1,w,c
  2350  001716  A0D8               	btfss	status,0,c
  2351  001718  D029               	goto	l6097
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;ff.c: 2775:     if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  2355  00171A  C06D  FFD9         	movff	f_write@fp,fsr2l
  2356  00171E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2357  001722  CFDE F01B          	movff	postinc2,sync_window@fs
  2358  001726  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2359  00172A  EC4C  F020         	call	_sync_window	;wreg free
  2360  00172E  0900               	iorlw	0
  2361  001730  B4D8               	btfsc	status,2,c
  2362  001732  D00A               	goto	l6095
  2363  001734  0100               	movlb	0	; () banked
  2364  001736  EE20 F005          	lfsr	2,5
  2365  00173A  516D               	movf	f_write@fp& (0+255),w,b
  2366  00173C  26D9               	addwf	fsr2l,f,c
  2367  00173E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2368  001740  22DA               	addwfc	fsr2h,f,c
  2369  001742  0E01               	movlw	1
  2370  001744  6EDF               	movwf	indf2,c
  2371  001746  0012               	return	
  2372  001748                     l6095:
  2373                           
  2374                           ;ff.c: 2776:     fp->fs->winsect = sect;
  2375  001748  C06D  FFD9         	movff	f_write@fp,fsr2l
  2376  00174C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2377  001750  EE10 F02A          	lfsr	1,42
  2378  001754  50DE               	movf	postinc2,w,c
  2379  001756  26E1               	addwf	fsr1l,f,c
  2380  001758  50DD               	movf	postdec2,w,c
  2381  00175A  22E2               	addwfc	fsr1h,f,c
  2382  00175C  C087  FFE6         	movff	f_write@sect,postinc1
  2383  001760  C088  FFE6         	movff	f_write@sect+1,postinc1
  2384  001764  C089  FFE6         	movff	f_write@sect+2,postinc1
  2385  001768  C08A  FFE6         	movff	f_write@sect+3,postinc1
  2386  00176C                     l6097:
  2387                           
  2388                           ;ff.c: 2785:    fp->dsect = sect;
  2389  00176C  0100               	movlb	0	; () banked
  2390  00176E  EE20 F016          	lfsr	2,22
  2391  001772  516D               	movf	f_write@fp& (0+255),w,b
  2392  001774  26D9               	addwf	fsr2l,f,c
  2393  001776  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2394  001778  22DA               	addwfc	fsr2h,f,c
  2395  00177A  C087  FFDE         	movff	f_write@sect,postinc2
  2396  00177E  C088  FFDE         	movff	f_write@sect+1,postinc2
  2397  001782  C089  FFDE         	movff	f_write@sect+2,postinc2
  2398  001786  C08A  FFDE         	movff	f_write@sect+3,postinc2
  2399  00178A                     l6099:
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;ff.c: 2787:   wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  2403  00178A  0EFF               	movlw	255
  2404  00178C  6F75               	movwf	??_f_write& (0+255),b
  2405  00178E  0E01               	movlw	1
  2406  001790  6F76               	movwf	(??_f_write+1)& (0+255),b
  2407  001792  EE20 F006          	lfsr	2,6
  2408  001796  516D               	movf	f_write@fp& (0+255),w,b
  2409  001798  26D9               	addwf	fsr2l,f,c
  2410  00179A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2411  00179C  22DA               	addwfc	fsr2h,f,c
  2412  00179E  CFDE F077          	movff	postinc2,??_f_write+2
  2413  0017A2  CFDD F078          	movff	postdec2,??_f_write+3
  2414  0017A6  5175               	movf	??_f_write& (0+255),w,b
  2415  0017A8  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2416  0017AA  5176               	movf	(??_f_write+1)& (0+255),w,b
  2417  0017AC  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2418  0017AE  5177               	movf	(??_f_write+2)& (0+255),w,b
  2419  0017B0  0800               	sublw	0
  2420  0017B2  6F8F               	movwf	f_write@wcnt& (0+255),b
  2421  0017B4  5178               	movf	(??_f_write+3)& (0+255),w,b
  2422  0017B6  A0D8               	btfss	status,0,c
  2423  0017B8  2AE8               	incf	wreg,f,c
  2424  0017BA  0802               	sublw	2
  2425  0017BC  6F90               	movwf	(f_write@wcnt+1)& (0+255),b
  2426                           
  2427                           ; BSR set to: 0
  2428                           ;ff.c: 2788:   if (wcnt > btw) wcnt = btw;
  2429  0017BE  518F               	movf	f_write@wcnt& (0+255),w,b
  2430  0017C0  5D71               	subwf	f_write@btw& (0+255),w,b
  2431  0017C2  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2432  0017C4  5972               	subwfb	(f_write@btw+1)& (0+255),w,b
  2433  0017C6  B0D8               	btfsc	status,0,c
  2434  0017C8  D004               	goto	l6105
  2435                           
  2436                           ; BSR set to: 0
  2437  0017CA  C071  F08F         	movff	f_write@btw,f_write@wcnt
  2438  0017CE  C072  F090         	movff	f_write@btw+1,f_write@wcnt+1
  2439  0017D2                     l6105:
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;ff.c: 2790:   if (move_window(fp->fs, fp->dsect) != FR_OK)
  2443  0017D2  C06D  FFD9         	movff	f_write@fp,fsr2l
  2444  0017D6  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2445  0017DA  CFDE F030          	movff	postinc2,move_window@fs
  2446  0017DE  CFDD F031          	movff	postdec2,move_window@fs+1
  2447  0017E2  EE20 F016          	lfsr	2,22
  2448  0017E6  516D               	movf	f_write@fp& (0+255),w,b
  2449  0017E8  26D9               	addwf	fsr2l,f,c
  2450  0017EA  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2451  0017EC  22DA               	addwfc	fsr2h,f,c
  2452  0017EE  CFDE F032          	movff	postinc2,move_window@sector
  2453  0017F2  CFDE F033          	movff	postinc2,move_window@sector+1
  2454  0017F6  CFDE F034          	movff	postinc2,move_window@sector+2
  2455  0017FA  CFDE F035          	movff	postinc2,move_window@sector+3
  2456  0017FE  EC27  F027         	call	_move_window	;wreg free
  2457  001802  0900               	iorlw	0
  2458  001804  B4D8               	btfsc	status,2,c
  2459  001806  D00A               	goto	l6111
  2460                           
  2461                           ;ff.c: 2791:    { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2462  001808  0100               	movlb	0	; () banked
  2463  00180A  EE20 F005          	lfsr	2,5
  2464  00180E  516D               	movf	f_write@fp& (0+255),w,b
  2465  001810  26D9               	addwf	fsr2l,f,c
  2466  001812  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2467  001814  22DA               	addwfc	fsr2h,f,c
  2468  001816  0E01               	movlw	1
  2469  001818  6EDF               	movwf	indf2,c
  2470  00181A  0012               	return	
  2471  00181C                     l6111:
  2472                           
  2473                           ;ff.c: 2792:   mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  2474  00181C  0EFF               	movlw	255
  2475  00181E  0100               	movlb	0	; () banked
  2476  001820  6F75               	movwf	??_f_write& (0+255),b
  2477  001822  0E01               	movlw	1
  2478  001824  6F76               	movwf	(??_f_write+1)& (0+255),b
  2479  001826  EE20 F006          	lfsr	2,6
  2480  00182A  516D               	movf	f_write@fp& (0+255),w,b
  2481  00182C  26D9               	addwf	fsr2l,f,c
  2482  00182E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2483  001830  22DA               	addwfc	fsr2h,f,c
  2484  001832  CFDE F077          	movff	postinc2,??_f_write+2
  2485  001836  CFDD F078          	movff	postdec2,??_f_write+3
  2486  00183A  5175               	movf	??_f_write& (0+255),w,b
  2487  00183C  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2488  00183E  5176               	movf	(??_f_write+1)& (0+255),w,b
  2489  001840  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2490  001842  C06D  FFD9         	movff	f_write@fp,fsr2l
  2491  001846  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2492  00184A  CFDE F079          	movff	postinc2,??_f_write+4
  2493  00184E  CFDD F07A          	movff	postdec2,??_f_write+5
  2494  001852  5177               	movf	(??_f_write+2)& (0+255),w,b
  2495  001854  2779               	addwf	(??_f_write+4)& (0+255),f,b
  2496  001856  5178               	movf	(??_f_write+3)& (0+255),w,b
  2497  001858  237A               	addwfc	(??_f_write+5)& (0+255),f,b
  2498  00185A  0E2E               	movlw	46
  2499  00185C  2579               	addwf	(??_f_write+4)& (0+255),w,b
  2500  00185E  6E01               	movwf	mem_cpy@dst,c
  2501  001860  0E00               	movlw	0
  2502  001862  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  2503  001864  6E02               	movwf	mem_cpy@dst+1,c
  2504  001866  C082  F003         	movff	f_write@wbuff,mem_cpy@src
  2505  00186A  C083  F004         	movff	f_write@wbuff+1,mem_cpy@src+1
  2506  00186E  C08F  F005         	movff	f_write@wcnt,mem_cpy@cnt
  2507  001872  C090  F006         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  2508  001876  EC85  F028         	call	_mem_cpy	;wreg free
  2509                           
  2510                           ;ff.c: 2793:   fp->fs->wflag = 1;
  2511  00187A  C06D  FFD9         	movff	f_write@fp,fsr2l
  2512  00187E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2513  001882  EE10 F004          	lfsr	1,4
  2514  001886  50DE               	movf	postinc2,w,c
  2515  001888  26E1               	addwf	fsr1l,f,c
  2516  00188A  50DD               	movf	postdec2,w,c
  2517  00188C  22E2               	addwfc	fsr1h,f,c
  2518  00188E  0E01               	movlw	1
  2519  001890  6EE7               	movwf	indf1,c
  2520  001892                     l6115:
  2521  001892  0100               	movlb	0	; () banked
  2522  001894  518F               	movf	f_write@wcnt& (0+255),w,b
  2523  001896  2782               	addwf	f_write@wbuff& (0+255),f,b
  2524  001898  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2525  00189A  2383               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  2526                           
  2527                           ; BSR set to: 0
  2528  00189C  EE20 F006          	lfsr	2,6
  2529  0018A0  516D               	movf	f_write@fp& (0+255),w,b
  2530  0018A2  26D9               	addwf	fsr2l,f,c
  2531  0018A4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2532  0018A6  22DA               	addwfc	fsr2h,f,c
  2533  0018A8  518F               	movf	f_write@wcnt& (0+255),w,b
  2534  0018AA  26DE               	addwf	postinc2,f,c
  2535  0018AC  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2536  0018AE  22DE               	addwfc	postinc2,f,c
  2537  0018B0  0E00               	movlw	0
  2538  0018B2  22DE               	addwfc	postinc2,f,c
  2539  0018B4  22DE               	addwfc	postinc2,f,c
  2540                           
  2541                           ; BSR set to: 0
  2542  0018B6  C073  FFD9         	movff	f_write@bw,fsr2l
  2543  0018BA  C074  FFDA         	movff	f_write@bw+1,fsr2h
  2544  0018BE  518F               	movf	f_write@wcnt& (0+255),w,b
  2545  0018C0  26DE               	addwf	postinc2,f,c
  2546  0018C2  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2547  0018C4  22DD               	addwfc	postdec2,f,c
  2548                           
  2549                           ; BSR set to: 0
  2550  0018C6  518F               	movf	f_write@wcnt& (0+255),w,b
  2551  0018C8  5F71               	subwf	f_write@btw& (0+255),f,b
  2552  0018CA  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2553  0018CC  5B72               	subwfb	(f_write@btw+1)& (0+255),f,b
  2554  0018CE                     l6123:
  2555                           
  2556                           ; BSR set to: 0
  2557  0018CE  5171               	movf	f_write@btw& (0+255),w,b
  2558  0018D0  1172               	iorwf	(f_write@btw+1)& (0+255),w,b
  2559  0018D2  A4D8               	btfss	status,2,c
  2560  0018D4  D4D8               	goto	l6015
  2561  0018D6                     u8190:
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;ff.c: 2800:  if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  2565  0018D6  EE20 F006          	lfsr	2,6
  2566  0018DA  516D               	movf	f_write@fp& (0+255),w,b
  2567  0018DC  26D9               	addwf	fsr2l,f,c
  2568  0018DE  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2569  0018E0  22DA               	addwfc	fsr2h,f,c
  2570  0018E2  EE10 F00A          	lfsr	1,10
  2571  0018E6  516D               	movf	f_write@fp& (0+255),w,b
  2572  0018E8  26E1               	addwf	fsr1l,f,c
  2573  0018EA  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2574  0018EC  22E2               	addwfc	fsr1h,f,c
  2575  0018EE  50DE               	movf	postinc2,w,c
  2576  0018F0  5CE6               	subwf	postinc1,w,c
  2577  0018F2  50DE               	movf	postinc2,w,c
  2578  0018F4  58E6               	subwfb	postinc1,w,c
  2579  0018F6  50DE               	movf	postinc2,w,c
  2580  0018F8  58E6               	subwfb	postinc1,w,c
  2581  0018FA  50DE               	movf	postinc2,w,c
  2582  0018FC  58E6               	subwfb	postinc1,w,c
  2583  0018FE  B0D8               	btfsc	status,0,c
  2584  001900  D014               	goto	l6129
  2585                           
  2586                           ; BSR set to: 0
  2587  001902  EE20 F006          	lfsr	2,6
  2588  001906  516D               	movf	f_write@fp& (0+255),w,b
  2589  001908  26D9               	addwf	fsr2l,f,c
  2590  00190A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2591  00190C  22DA               	addwfc	fsr2h,f,c
  2592  00190E  EE10 F00A          	lfsr	1,10
  2593  001912  516D               	movf	f_write@fp& (0+255),w,b
  2594  001914  26E1               	addwf	fsr1l,f,c
  2595  001916  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2596  001918  22E2               	addwfc	fsr1h,f,c
  2597  00191A  CFDE FFE6          	movff	postinc2,postinc1
  2598  00191E  CFDE FFE6          	movff	postinc2,postinc1
  2599  001922  CFDE FFE6          	movff	postinc2,postinc1
  2600  001926  CFDE FFE6          	movff	postinc2,postinc1
  2601  00192A                     l6129:
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;ff.c: 2801:  fp->flag |= 0x20;
  2605  00192A  EE20 F004          	lfsr	2,4
  2606  00192E  516D               	movf	f_write@fp& (0+255),w,b
  2607  001930  26D9               	addwf	fsr2l,f,c
  2608  001932  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2609  001934  22DA               	addwfc	fsr2h,f,c
  2610  001936  0E00               	movlw	0
  2611  001938  8ADB               	bsf	plusw2,5,c
  2612                           
  2613                           ; BSR set to: 0
  2614  00193A  0012               	return		;funcret
  2615  00193C                     __end_of_f_write:
  2616                           	opt callstack 0
  2617                           
  2618 ;; *************** function _f_open *****************
  2619 ;; Defined at:
  2620 ;;		line 2449 in file "ff.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;  fp              2   58[BANK0 ] PTR struct .
  2623 ;;		 -> Fil(32), 
  2624 ;;  path            2   60[BANK0 ] PTR const unsigned char 
  2625 ;;		 -> STR_6(11), STR_5(1), STR_4(1), 
  2626 ;;  mode            1   62[BANK0 ] unsigned char 
  2627 ;; Auto vars:     Size  Location     Type
  2628 ;;  dj             22   90[BANK0 ] struct .
  2629 ;;  sfn            12   67[BANK0 ] unsigned char [12]
  2630 ;;  dw              4   83[BANK0 ] unsigned long 
  2631 ;;  cl              4   79[BANK0 ] unsigned long 
  2632 ;;  dir             2   88[BANK0 ] PTR unsigned char 
  2633 ;;		 -> FatFs(558), NULL(0), 
  2634 ;;  res             1   87[BANK0 ] enum E93
  2635 ;; Return value:  Size  Location     Type
  2636 ;;                  1    wreg      enum E93
  2637 ;; Registers used:
  2638 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2639 ;; Tracked objects:
  2640 ;;		On entry : 0/0
  2641 ;;		On exit  : 0/0
  2642 ;;		Unchanged: 0/0
  2643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2644 ;;      Params:         0       5       0       0       0       0       0       0       0
  2645 ;;      Locals:         0      45       0       0       0       0       0       0       0
  2646 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2647 ;;      Totals:         0      54       0       0       0       0       0       0       0
  2648 ;;Total ram usage:       54 bytes
  2649 ;; Hardware stack levels used:    1
  2650 ;; Hardware stack levels required when called:   13
  2651 ;; This function calls:
  2652 ;;		_dir_register
  2653 ;;		_find_volume
  2654 ;;		_follow_path
  2655 ;;		_ld_clust
  2656 ;;		_move_window
  2657 ;;		_remove_chain
  2658 ;;		_st_clust
  2659 ;; This function is called by:
  2660 ;;		_guardar
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           	psect	text4
  2665  002FBA                     __ptext4:
  2666                           	opt callstack 0
  2667  002FBA                     _f_open:
  2668                           	opt callstack 16
  2669                           
  2670                           ;ff.c: 2450:  FIL* fp,;ff.c: 2451:  const TCHAR* path,;ff.c: 2452:  BYTE mode;ff.c: 2454
      +                          : {;ff.c: 2455:  FRESULT res;;ff.c: 2456:  DIRC dj;;ff.c: 2457:  BYTE *dir;;ff.c: 2458: 
      +                           BYTE sfn[12];;ff.c: 2460:  DWORD dw, cl;;ff.c: 2464:  if (!fp) return FR_INVALID_OBJECT
      +                          ;
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;incstack = 0
  2674  002FBA  0100               	movlb	0	; () banked
  2675  002FBC  519A               	movf	f_open@fp& (0+255),w,b
  2676  002FBE  119B               	iorwf	(f_open@fp+1)& (0+255),w,b
  2677  002FC0  A4D8               	btfss	status,2,c
  2678  002FC2  D002               	goto	l5885
  2679                           
  2680                           ; BSR set to: 0
  2681  002FC4  0E09               	movlw	9
  2682  002FC6  0012               	return	
  2683  002FC8                     l5885:
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;ff.c: 2465:  fp->fs = 0;
  2687  002FC8  C09A  FFD9         	movff	f_open@fp,fsr2l
  2688  002FCC  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2689  002FD0  0E00               	movlw	0
  2690  002FD2  6EDE               	movwf	postinc2,c
  2691  002FD4  0E00               	movlw	0
  2692  002FD6  6EDD               	movwf	postdec2,c
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;ff.c: 2468:  dj.fs = FatFs[0];
  2696  002FD8  C0E9  F0BA         	movff	ff@FatFs,f_open@dj
  2697  002FDC  C0EA  F0BB         	movff	ff@FatFs+1,f_open@dj+1
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;ff.c: 2473:  mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  2701  002FE0  0E1F               	movlw	31
  2702  002FE2  179E               	andwf	f_open@mode& (0+255),f,b
  2703                           
  2704                           ; BSR set to: 0
  2705                           ;ff.c: 2474:  res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  2706  002FE4  0EBA               	movlw	low f_open@dj
  2707  002FE6  6E45               	movwf	find_volume@rfs,c
  2708  002FE8  0E00               	movlw	high f_open@dj
  2709  002FEA  6E46               	movwf	find_volume@rfs+1,c
  2710  002FEC  0E9C               	movlw	low f_open@path
  2711  002FEE  6E47               	movwf	find_volume@path,c
  2712  002FF0  0E00               	movlw	high f_open@path
  2713  002FF2  6E48               	movwf	find_volume@path+1,c
  2714  002FF4  519E               	movf	f_open@mode& (0+255),w,b
  2715  002FF6  0BFE               	andlw	254
  2716  002FF8  6E49               	movwf	find_volume@wmode,c
  2717  002FFA  EC15  F004         	call	_find_volume	;wreg free
  2718  002FFE  0100               	movlb	0	; () banked
  2719  003000  6FB7               	movwf	f_open@res& (0+255),b
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;ff.c: 2479:  if (res == FR_OK) {
  2723  003002  51B7               	movf	f_open@res& (0+255),w,b
  2724  003004  A4D8               	btfss	status,2,c
  2725  003006  D1A2               	goto	l5989
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;ff.c: 2480:   (dj).fn = sfn;
  2729  003008  0EA3               	movlw	low f_open@sfn
  2730  00300A  6FCE               	movwf	(f_open@dj+20)& (0+255),b
  2731  00300C  0E00               	movlw	high f_open@sfn
  2732  00300E  6FCF               	movwf	(f_open@dj+21)& (0+255),b
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;ff.c: 2481:   res = follow_path(&dj, path);
  2736  003010  0EBA               	movlw	low f_open@dj
  2737  003012  6F86               	movwf	follow_path@dp& (0+255),b
  2738  003014  0E00               	movlw	high f_open@dj
  2739  003016  6F87               	movwf	(follow_path@dp+1)& (0+255),b
  2740  003018  C09C  F088         	movff	f_open@path,follow_path@path
  2741  00301C  C09D  F089         	movff	f_open@path+1,follow_path@path+1
  2742  003020  EC9D  F021         	call	_follow_path	;wreg free
  2743  003024  0100               	movlb	0	; () banked
  2744  003026  6FB7               	movwf	f_open@res& (0+255),b
  2745                           
  2746                           ; BSR set to: 0
  2747                           ;ff.c: 2482:   dir = dj.dir;
  2748  003028  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2749  00302C  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;ff.c: 2484:   if (res == FR_OK) {
  2753  003030  51B7               	movf	f_open@res& (0+255),w,b
  2754  003032  A4D8               	btfss	status,2,c
  2755  003034  D006               	goto	l5907
  2756                           
  2757                           ; BSR set to: 0
  2758                           ;ff.c: 2485:    if (!dir)
  2759  003036  51B8               	movf	f_open@dir& (0+255),w,b
  2760  003038  11B9               	iorwf	(f_open@dir+1)& (0+255),w,b
  2761  00303A  A4D8               	btfss	status,2,c
  2762  00303C  D002               	goto	l5907
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;ff.c: 2486:     res = FR_INVALID_NAME;
  2766  00303E  0E06               	movlw	6
  2767  003040  6FB7               	movwf	f_open@res& (0+255),b
  2768  003042                     l5907:
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;ff.c: 2493:   if (mode & (0x08 | 0x10 | 0x04)) {
  2772  003042  C09E  F09F         	movff	f_open@mode,??_f_open
  2773  003046  0E1C               	movlw	28
  2774  003048  179F               	andwf	??_f_open& (0+255),f,b
  2775  00304A  B4D8               	btfsc	status,2,c
  2776  00304C  D0D3               	goto	l5955
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;ff.c: 2494:    if (res != FR_OK) {
  2780  00304E  51B7               	movf	f_open@res& (0+255),w,b
  2781  003050  B4D8               	btfsc	status,2,c
  2782  003052  D012               	goto	l5919
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;ff.c: 2495:     if (res == FR_NO_FILE)
  2786  003054  0E04               	movlw	4
  2787  003056  19B7               	xorwf	f_open@res& (0+255),w,b
  2788  003058  A4D8               	btfss	status,2,c
  2789  00305A  D008               	goto	l5915
  2790                           
  2791                           ; BSR set to: 0
  2792                           ;ff.c: 2499:      res = dir_register(&dj);
  2793  00305C  0EBA               	movlw	low f_open@dj
  2794  00305E  6F8A               	movwf	dir_register@dp& (0+255),b
  2795  003060  0E00               	movlw	high f_open@dj
  2796  003062  6F8B               	movwf	(dir_register@dp+1)& (0+255),b
  2797  003064  EC3C  F025         	call	_dir_register	;wreg free
  2798  003068  0100               	movlb	0	; () banked
  2799  00306A  6FB7               	movwf	f_open@res& (0+255),b
  2800  00306C                     l5915:
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;ff.c: 2501:     mode |= 0x08;
  2804  00306C  879E               	bsf	f_open@mode& (0+255),3,b
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;ff.c: 2502:     dir = dj.dir;
  2808  00306E  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2809  003072  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2810                           
  2811                           ;ff.c: 2503:    }
  2812  003076  D012               	goto	l581
  2813  003078                     l5919:
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;ff.c: 2505:     if (dir[11] & (0x01 | 0x10)) {
  2817  003078  EE20 F00B          	lfsr	2,11
  2818  00307C  51B8               	movf	f_open@dir& (0+255),w,b
  2819  00307E  26D9               	addwf	fsr2l,f,c
  2820  003080  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2821  003082  22DA               	addwfc	fsr2h,f,c
  2822  003084  50DF               	movf	indf2,w,c
  2823  003086  6F9F               	movwf	??_f_open& (0+255),b
  2824  003088  0E11               	movlw	17
  2825  00308A  179F               	andwf	??_f_open& (0+255),f,b
  2826  00308C  B4D8               	btfsc	status,2,c
  2827  00308E  D002               	goto	l582
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;ff.c: 2506:      res = FR_DENIED;
  2831  003090  0E07               	movlw	7
  2832  003092  D003               	goto	L2
  2833  003094                     l582:
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;ff.c: 2508:      if (mode & 0x04)
  2837  003094  A59E               	btfss	f_open@mode& (0+255),2,b
  2838  003096  D002               	goto	l581
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;ff.c: 2509:       res = FR_EXIST;
  2842  003098  0E08               	movlw	8
  2843  00309A                     L2:
  2844  00309A  6FB7               	movwf	f_open@res& (0+255),b
  2845  00309C                     l581:
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;ff.c: 2512:    if (res == FR_OK && (mode & 0x08)) {
  2849  00309C  51B7               	movf	f_open@res& (0+255),w,b
  2850  00309E  B4D8               	btfsc	status,2,c
  2851                           
  2852                           ; BSR set to: 0
  2853  0030A0  A79E               	btfss	f_open@mode& (0+255),3,b
  2854  0030A2  D0C1               	goto	l588
  2855                           
  2856                           ; BSR set to: 0
  2857                           ;ff.c: 2514:     *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  2858                           
  2859                           ; BSR set to: 0
  2860  0030A4  EE20 F00E          	lfsr	2,14
  2861  0030A8  51B8               	movf	f_open@dir& (0+255),w,b
  2862  0030AA  26D9               	addwf	fsr2l,f,c
  2863  0030AC  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2864  0030AE  22DA               	addwfc	fsr2h,f,c
  2865  0030B0  0E00               	movlw	0
  2866  0030B2  6EDE               	movwf	postinc2,c
  2867  0030B4  0E00               	movlw	0
  2868  0030B6  6EDE               	movwf	postinc2,c
  2869  0030B8  0E21               	movlw	33
  2870  0030BA  6EDE               	movwf	postinc2,c
  2871  0030BC  0E46               	movlw	70
  2872  0030BE  6EDD               	movwf	postdec2,c
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;ff.c: 2515:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  2876  0030C0  EE20 F016          	lfsr	2,22
  2877  0030C4  51B8               	movf	f_open@dir& (0+255),w,b
  2878  0030C6  26D9               	addwf	fsr2l,f,c
  2879  0030C8  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2880  0030CA  22DA               	addwfc	fsr2h,f,c
  2881  0030CC  0E00               	movlw	0
  2882  0030CE  6EDE               	movwf	postinc2,c
  2883  0030D0  0E00               	movlw	0
  2884  0030D2  6EDE               	movwf	postinc2,c
  2885  0030D4  0E21               	movlw	33
  2886  0030D6  6EDE               	movwf	postinc2,c
  2887  0030D8  0E46               	movlw	70
  2888  0030DA  6EDD               	movwf	postdec2,c
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;ff.c: 2516:     dir[11] = 0;
  2892  0030DC  EE20 F00B          	lfsr	2,11
  2893  0030E0  51B8               	movf	f_open@dir& (0+255),w,b
  2894  0030E2  26D9               	addwf	fsr2l,f,c
  2895  0030E4  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2896  0030E6  22DA               	addwfc	fsr2h,f,c
  2897  0030E8  0E00               	movlw	0
  2898  0030EA  6EDF               	movwf	indf2,c
  2899                           
  2900                           ; BSR set to: 0
  2901                           ;ff.c: 2517:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  2902  0030EC  EE20 F01C          	lfsr	2,28
  2903  0030F0  51B8               	movf	f_open@dir& (0+255),w,b
  2904  0030F2  26D9               	addwf	fsr2l,f,c
  2905  0030F4  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2906  0030F6  22DA               	addwfc	fsr2h,f,c
  2907  0030F8  6ADE               	clrf	postinc2,c
  2908  0030FA  6ADE               	clrf	postinc2,c
  2909  0030FC  6ADE               	clrf	postinc2,c
  2910  0030FE  6ADD               	clrf	postdec2,c
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;ff.c: 2518:     cl = ld_clust(dj.fs, dir);
  2914  003100  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2915  003104  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2916  003108  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2917  00310C  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2918  003110  EC46  F028         	call	_ld_clust	;wreg free
  2919  003114  C001  F0AF         	movff	?_ld_clust,f_open@cl
  2920  003118  C002  F0B0         	movff	?_ld_clust+1,f_open@cl+1
  2921  00311C  C003  F0B1         	movff	?_ld_clust+2,f_open@cl+2
  2922  003120  C004  F0B2         	movff	?_ld_clust+3,f_open@cl+3
  2923                           
  2924                           ;ff.c: 2519:     st_clust(dir, 0);
  2925  003124  C0B8  F001         	movff	f_open@dir,st_clust@dir
  2926  003128  C0B9  F002         	movff	f_open@dir+1,st_clust@dir+1
  2927  00312C  0E00               	movlw	0
  2928  00312E  6E03               	movwf	st_clust@cl,c
  2929  003130  0E00               	movlw	0
  2930  003132  6E04               	movwf	st_clust@cl+1,c
  2931  003134  0E00               	movlw	0
  2932  003136  6E05               	movwf	st_clust@cl+2,c
  2933  003138  0E00               	movlw	0
  2934  00313A  6E06               	movwf	st_clust@cl+3,c
  2935  00313C  ECA5  F02A         	call	_st_clust	;wreg free
  2936                           
  2937                           ;ff.c: 2520:     dj.fs->wflag = 1;
  2938  003140  0100               	movlb	0	; () banked
  2939  003142  EE20 F004          	lfsr	2,4
  2940  003146  51BA               	movf	f_open@dj& (0+255),w,b
  2941  003148  26D9               	addwf	fsr2l,f,c
  2942  00314A  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2943  00314C  22DA               	addwfc	fsr2h,f,c
  2944  00314E  0E01               	movlw	1
  2945  003150  6EDF               	movwf	indf2,c
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;ff.c: 2521:     if (cl) {
  2949  003152  51AF               	movf	f_open@cl& (0+255),w,b
  2950  003154  11B0               	iorwf	(f_open@cl+1)& (0+255),w,b
  2951  003156  11B1               	iorwf	(f_open@cl+2)& (0+255),w,b
  2952  003158  11B2               	iorwf	(f_open@cl+3)& (0+255),w,b
  2953  00315A  B4D8               	btfsc	status,2,c
  2954  00315C  D064               	goto	l588
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;ff.c: 2522:      dw = dj.fs->winsect;
  2958  00315E  EE20 F02A          	lfsr	2,42
  2959  003162  51BA               	movf	f_open@dj& (0+255),w,b
  2960  003164  26D9               	addwf	fsr2l,f,c
  2961  003166  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2962  003168  22DA               	addwfc	fsr2h,f,c
  2963  00316A  CFDE F0B3          	movff	postinc2,f_open@dw
  2964  00316E  CFDE F0B4          	movff	postinc2,f_open@dw+1
  2965  003172  CFDE F0B5          	movff	postinc2,f_open@dw+2
  2966  003176  CFDE F0B6          	movff	postinc2,f_open@dw+3
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;ff.c: 2523:      res = remove_chain(dj.fs, cl);
  2970  00317A  C0BA  F056         	movff	f_open@dj,remove_chain@fs
  2971  00317E  C0BB  F057         	movff	f_open@dj+1,remove_chain@fs+1
  2972  003182  C0AF  F058         	movff	f_open@cl,remove_chain@clst
  2973  003186  C0B0  F059         	movff	f_open@cl+1,remove_chain@clst+1
  2974  00318A  C0B1  F05A         	movff	f_open@cl+2,remove_chain@clst+2
  2975  00318E  C0B2  F05B         	movff	f_open@cl+3,remove_chain@clst+3
  2976  003192  ECF8  F020         	call	_remove_chain	;wreg free
  2977  003196  0100               	movlb	0	; () banked
  2978  003198  6FB7               	movwf	f_open@res& (0+255),b
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;ff.c: 2524:      if (res == FR_OK) {
  2982  00319A  51B7               	movf	f_open@res& (0+255),w,b
  2983  00319C  A4D8               	btfss	status,2,c
  2984  00319E  D043               	goto	l588
  2985                           
  2986                           ; BSR set to: 0
  2987                           ;ff.c: 2525:       dj.fs->last_clust = cl - 1;
  2988  0031A0  0EFF               	movlw	255
  2989  0031A2  25AF               	addwf	f_open@cl& (0+255),w,b
  2990  0031A4  6F9F               	movwf	??_f_open& (0+255),b
  2991  0031A6  0EFF               	movlw	255
  2992  0031A8  21B0               	addwfc	(f_open@cl+1)& (0+255),w,b
  2993  0031AA  6FA0               	movwf	(??_f_open+1)& (0+255),b
  2994  0031AC  0EFF               	movlw	255
  2995  0031AE  21B1               	addwfc	(f_open@cl+2)& (0+255),w,b
  2996  0031B0  6FA1               	movwf	(??_f_open+2)& (0+255),b
  2997  0031B2  0EFF               	movlw	255
  2998  0031B4  21B2               	addwfc	(f_open@cl+3)& (0+255),w,b
  2999  0031B6  6FA2               	movwf	(??_f_open+3)& (0+255),b
  3000  0031B8  EE20 F00A          	lfsr	2,10
  3001  0031BC  51BA               	movf	f_open@dj& (0+255),w,b
  3002  0031BE  26D9               	addwf	fsr2l,f,c
  3003  0031C0  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  3004  0031C2  22DA               	addwfc	fsr2h,f,c
  3005  0031C4  C09F  FFDE         	movff	??_f_open,postinc2
  3006  0031C8  C0A0  FFDE         	movff	??_f_open+1,postinc2
  3007  0031CC  C0A1  FFDE         	movff	??_f_open+2,postinc2
  3008  0031D0  C0A2  FFDE         	movff	??_f_open+3,postinc2
  3009                           
  3010                           ; BSR set to: 0
  3011                           ;ff.c: 2526:       res = move_window(dj.fs, dw);
  3012  0031D4  C0BA  F030         	movff	f_open@dj,move_window@fs
  3013  0031D8  C0BB  F031         	movff	f_open@dj+1,move_window@fs+1
  3014  0031DC  C0B3  F032         	movff	f_open@dw,move_window@sector
  3015  0031E0  C0B4  F033         	movff	f_open@dw+1,move_window@sector+1
  3016  0031E4  C0B5  F034         	movff	f_open@dw+2,move_window@sector+2
  3017  0031E8  C0B6  F035         	movff	f_open@dw+3,move_window@sector+3
  3018  0031EC  EC27  F027         	call	_move_window	;wreg free
  3019  0031F0  0100               	movlb	0	; () banked
  3020  0031F2  D018               	goto	L3
  3021  0031F4                     l5955:
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;ff.c: 2532:    if (res == FR_OK) {
  3025  0031F4  51B7               	movf	f_open@res& (0+255),w,b
  3026  0031F6  A4D8               	btfss	status,2,c
  3027  0031F8  D016               	goto	l588
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;ff.c: 2533:     if (dir[11] & 0x10) {
  3031  0031FA  EE20 F00B          	lfsr	2,11
  3032  0031FE  51B8               	movf	f_open@dir& (0+255),w,b
  3033  003200  26D9               	addwf	fsr2l,f,c
  3034  003202  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3035  003204  22DA               	addwfc	fsr2h,f,c
  3036  003206  A8DF               	btfss	indf2,4,c
  3037  003208  D002               	goto	l590
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;ff.c: 2534:      res = FR_NO_FILE;
  3041  00320A  0E04               	movlw	4
  3042  00320C  D00B               	goto	L3
  3043  00320E                     l590:
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;ff.c: 2536:      if ((mode & 0x02) && (dir[11] & 0x01))
  3047  00320E  A39E               	btfss	f_open@mode& (0+255),1,b
  3048  003210  D00A               	goto	l588
  3049                           
  3050                           ; BSR set to: 0
  3051  003212  EE20 F00B          	lfsr	2,11
  3052  003216  51B8               	movf	f_open@dir& (0+255),w,b
  3053  003218  26D9               	addwf	fsr2l,f,c
  3054  00321A  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3055  00321C  22DA               	addwfc	fsr2h,f,c
  3056  00321E  A0DF               	btfss	indf2,0,c
  3057  003220  D002               	goto	l588
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;ff.c: 2537:       res = FR_DENIED;
  3061  003222  0E07               	movlw	7
  3062  003224                     L3:
  3063  003224  6FB7               	movwf	f_open@res& (0+255),b
  3064  003226                     l588:
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;ff.c: 2541:   if (res == FR_OK) {
  3068  003226  51B7               	movf	f_open@res& (0+255),w,b
  3069  003228  A4D8               	btfss	status,2,c
  3070  00322A  D020               	goto	l5973
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;ff.c: 2542:    if (mode & 0x08)
  3074  00322C  B79E               	btfsc	f_open@mode& (0+255),3,b
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;ff.c: 2543:     mode |= 0x20;
  3078  00322E  8B9E               	bsf	f_open@mode& (0+255),5,b
  3079                           
  3080                           ; BSR set to: 0
  3081                           ;ff.c: 2544:    fp->dir_sect = dj.fs->winsect;
  3082  003230  EE20 F02A          	lfsr	2,42
  3083  003234  51BA               	movf	f_open@dj& (0+255),w,b
  3084  003236  26D9               	addwf	fsr2l,f,c
  3085  003238  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  3086  00323A  22DA               	addwfc	fsr2h,f,c
  3087  00323C  EE10 F01A          	lfsr	1,26
  3088  003240  519A               	movf	f_open@fp& (0+255),w,b
  3089  003242  26E1               	addwf	fsr1l,f,c
  3090  003244  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3091  003246  22E2               	addwfc	fsr1h,f,c
  3092  003248  CFDE FFE6          	movff	postinc2,postinc1
  3093  00324C  CFDE FFE6          	movff	postinc2,postinc1
  3094  003250  CFDE FFE6          	movff	postinc2,postinc1
  3095  003254  CFDE FFE6          	movff	postinc2,postinc1
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;ff.c: 2545:    fp->dir_ptr = dir;
  3099  003258  EE20 F01E          	lfsr	2,30
  3100  00325C  519A               	movf	f_open@fp& (0+255),w,b
  3101  00325E  26D9               	addwf	fsr2l,f,c
  3102  003260  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3103  003262  22DA               	addwfc	fsr2h,f,c
  3104  003264  C0B8  FFDE         	movff	f_open@dir,postinc2
  3105  003268  C0B9  FFDD         	movff	f_open@dir+1,postdec2
  3106  00326C                     l5973:
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;ff.c: 2565:   if (res == FR_OK) {
  3110  00326C  51B7               	movf	f_open@res& (0+255),w,b
  3111  00326E  A4D8               	btfss	status,2,c
  3112  003270  D06D               	goto	l5989
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;ff.c: 2566:    fp->flag = mode;
  3116  003272  EE20 F004          	lfsr	2,4
  3117  003276  519A               	movf	f_open@fp& (0+255),w,b
  3118  003278  26D9               	addwf	fsr2l,f,c
  3119  00327A  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3120  00327C  22DA               	addwfc	fsr2h,f,c
  3121  00327E  C09E  FFDF         	movff	f_open@mode,indf2
  3122                           
  3123                           ;ff.c: 2567:    fp->err = 0;
  3124  003282  EE20 F005          	lfsr	2,5
  3125  003286  519A               	movf	f_open@fp& (0+255),w,b
  3126  003288  26D9               	addwf	fsr2l,f,c
  3127  00328A  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3128  00328C  22DA               	addwfc	fsr2h,f,c
  3129  00328E  0E00               	movlw	0
  3130  003290  6EDF               	movwf	indf2,c
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;ff.c: 2568:    fp->sclust = ld_clust(dj.fs, dir);
  3134  003292  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  3135  003296  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  3136  00329A  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  3137  00329E  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  3138  0032A2  EC46  F028         	call	_ld_clust	;wreg free
  3139  0032A6  0100               	movlb	0	; () banked
  3140  0032A8  EE20 F00E          	lfsr	2,14
  3141  0032AC  519A               	movf	f_open@fp& (0+255),w,b
  3142  0032AE  26D9               	addwf	fsr2l,f,c
  3143  0032B0  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3144  0032B2  22DA               	addwfc	fsr2h,f,c
  3145  0032B4  C001  FFDE         	movff	?_ld_clust,postinc2
  3146  0032B8  C002  FFDE         	movff	?_ld_clust+1,postinc2
  3147  0032BC  C003  FFDE         	movff	?_ld_clust+2,postinc2
  3148  0032C0  C004  FFDE         	movff	?_ld_clust+3,postinc2
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;ff.c: 2569:    fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  3152  0032C4  EE20 F01C          	lfsr	2,28
  3153  0032C8  51B8               	movf	f_open@dir& (0+255),w,b
  3154  0032CA  26D9               	addwf	fsr2l,f,c
  3155  0032CC  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3156  0032CE  22DA               	addwfc	fsr2h,f,c
  3157  0032D0  EE10 F00A          	lfsr	1,10
  3158  0032D4  519A               	movf	f_open@fp& (0+255),w,b
  3159  0032D6  26E1               	addwf	fsr1l,f,c
  3160  0032D8  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3161  0032DA  22E2               	addwfc	fsr1h,f,c
  3162  0032DC  CFDE FFE6          	movff	postinc2,postinc1
  3163  0032E0  CFDE FFE6          	movff	postinc2,postinc1
  3164  0032E4  CFDE FFE6          	movff	postinc2,postinc1
  3165  0032E8  CFDE FFE6          	movff	postinc2,postinc1
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;ff.c: 2570:    fp->fptr = 0;
  3169  0032EC  EE20 F006          	lfsr	2,6
  3170  0032F0  519A               	movf	f_open@fp& (0+255),w,b
  3171  0032F2  26D9               	addwf	fsr2l,f,c
  3172  0032F4  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3173  0032F6  22DA               	addwfc	fsr2h,f,c
  3174  0032F8  6ADE               	clrf	postinc2,c
  3175  0032FA  6ADE               	clrf	postinc2,c
  3176  0032FC  6ADE               	clrf	postinc2,c
  3177  0032FE  6ADD               	clrf	postdec2,c
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;ff.c: 2571:    fp->dsect = 0;
  3181  003300  EE20 F016          	lfsr	2,22
  3182  003304  519A               	movf	f_open@fp& (0+255),w,b
  3183  003306  26D9               	addwf	fsr2l,f,c
  3184  003308  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3185  00330A  22DA               	addwfc	fsr2h,f,c
  3186  00330C  6ADE               	clrf	postinc2,c
  3187  00330E  6ADE               	clrf	postinc2,c
  3188  003310  6ADE               	clrf	postinc2,c
  3189  003312  6ADD               	clrf	postdec2,c
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;ff.c: 2575:    fp->fs = dj.fs;
  3193  003314  C09A  FFD9         	movff	f_open@fp,fsr2l
  3194  003318  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  3195  00331C  C0BA  FFDE         	movff	f_open@dj,postinc2
  3196  003320  C0BB  FFDD         	movff	f_open@dj+1,postdec2
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;ff.c: 2576:    fp->id = fp->fs->id;
  3200  003324  C09A  FFD9         	movff	f_open@fp,fsr2l
  3201  003328  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  3202  00332C  EE10 F006          	lfsr	1,6
  3203  003330  50DE               	movf	postinc2,w,c
  3204  003332  26E1               	addwf	fsr1l,f,c
  3205  003334  50DD               	movf	postdec2,w,c
  3206  003336  22E2               	addwfc	fsr1h,f,c
  3207  003338  EE20 F002          	lfsr	2,2
  3208  00333C  519A               	movf	f_open@fp& (0+255),w,b
  3209  00333E  26D9               	addwf	fsr2l,f,c
  3210  003340  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3211  003342  22DA               	addwfc	fsr2h,f,c
  3212  003344  CFE6 FFDE          	movff	postinc1,postinc2
  3213  003348  CFE5 FFDD          	movff	postdec1,postdec2
  3214  00334C                     l5989:
  3215                           
  3216                           ; BSR set to: 0
  3217                           ;ff.c: 2580:  return res;
  3218  00334C  51B7               	movf	f_open@res& (0+255),w,b
  3219                           
  3220                           ; BSR set to: 0
  3221  00334E  0012               	return		;funcret
  3222  003350                     __end_of_f_open:
  3223                           	opt callstack 0
  3224                           
  3225 ;; *************** function _remove_chain *****************
  3226 ;; Defined at:
  3227 ;;		line 937 in file "ff.c"
  3228 ;; Parameters:    Size  Location     Type
  3229 ;;  fs              2   85[COMRAM] PTR struct .
  3230 ;;		 -> FatFs(558), NULL(0), 
  3231 ;;  clst            4   87[COMRAM] unsigned long 
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;  nxt             4    1[BANK0 ] unsigned long 
  3234 ;;  res             1    0[BANK0 ] enum E93
  3235 ;; Return value:  Size  Location     Type
  3236 ;;                  1    wreg      enum E93
  3237 ;; Registers used:
  3238 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3239 ;; Tracked objects:
  3240 ;;		On entry : 0/0
  3241 ;;		On exit  : 0/0
  3242 ;;		Unchanged: 0/0
  3243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3244 ;;      Params:         6       0       0       0       0       0       0       0       0
  3245 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3246 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3247 ;;      Totals:        10       5       0       0       0       0       0       0       0
  3248 ;;Total ram usage:       15 bytes
  3249 ;; Hardware stack levels used:    1
  3250 ;; Hardware stack levels required when called:    9
  3251 ;; This function calls:
  3252 ;;		_get_fat
  3253 ;;		_put_fat
  3254 ;; This function is called by:
  3255 ;;		_f_open
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           	psect	text5
  3260  0041F0                     __ptext5:
  3261                           	opt callstack 0
  3262  0041F0                     _remove_chain:
  3263                           	opt callstack 19
  3264                           
  3265                           ;ff.c: 938:  FATFS* fs,;ff.c: 939:  DWORD clst;ff.c: 941: {;ff.c: 942:  FRESULT res;;ff.
      +                          c: 943:  DWORD nxt;;ff.c: 948:  if (clst < 2 || clst >= fs->n_fatent) {
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;incstack = 0
  3269  0041F0  505B               	movf	remove_chain@clst+3,w,c
  3270  0041F2  105A               	iorwf	remove_chain@clst+2,w,c
  3271  0041F4  1059               	iorwf	remove_chain@clst+1,w,c
  3272  0041F6  E104               	bnz	u7000
  3273  0041F8  0E02               	movlw	2
  3274  0041FA  5C58               	subwf	remove_chain@clst,w,c
  3275  0041FC  A0D8               	btfss	status,0,c
  3276  0041FE  D010               	goto	u7010
  3277  004200                     u7000:
  3278  004200  EE20 F012          	lfsr	2,18
  3279  004204  5056               	movf	remove_chain@fs,w,c
  3280  004206  26D9               	addwf	fsr2l,f,c
  3281  004208  5057               	movf	remove_chain@fs+1,w,c
  3282  00420A  22DA               	addwfc	fsr2h,f,c
  3283  00420C  50DE               	movf	postinc2,w,c
  3284  00420E  5C58               	subwf	remove_chain@clst,w,c
  3285  004210  50DE               	movf	postinc2,w,c
  3286  004212  5859               	subwfb	remove_chain@clst+1,w,c
  3287  004214  50DE               	movf	postinc2,w,c
  3288  004216  585A               	subwfb	remove_chain@clst+2,w,c
  3289  004218  50DE               	movf	postinc2,w,c
  3290  00421A  585B               	subwfb	remove_chain@clst+3,w,c
  3291  00421C  A0D8               	btfss	status,0,c
  3292  00421E  D003               	goto	l5437
  3293  004220                     u7010:
  3294                           
  3295                           ;ff.c: 949:   res = FR_INT_ERR;
  3296  004220  0E02               	movlw	2
  3297  004222  0100               	movlb	0	; () banked
  3298  004224  D031               	goto	L4
  3299  004226                     l5437:
  3300                           
  3301                           ;ff.c: 952:   res = FR_OK;
  3302  004226  0E00               	movlw	0
  3303  004228  0100               	movlb	0	; () banked
  3304  00422A  6F60               	movwf	remove_chain@res& (0+255),b
  3305                           
  3306                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3307  00422C  D074               	goto	l302
  3308  00422E                     l5439:
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;ff.c: 954:    nxt = get_fat(fs, clst);
  3312  00422E  C056  F03B         	movff	remove_chain@fs,get_fat@fs
  3313  004232  C057  F03C         	movff	remove_chain@fs+1,get_fat@fs+1
  3314  004236  C058  F03D         	movff	remove_chain@clst,get_fat@clst
  3315  00423A  C059  F03E         	movff	remove_chain@clst+1,get_fat@clst+1
  3316  00423E  C05A  F03F         	movff	remove_chain@clst+2,get_fat@clst+2
  3317  004242  C05B  F040         	movff	remove_chain@clst+3,get_fat@clst+3
  3318  004246  EC0C  F016         	call	_get_fat	;wreg free
  3319  00424A  C03B  F061         	movff	?_get_fat,remove_chain@nxt
  3320  00424E  C03C  F062         	movff	?_get_fat+1,remove_chain@nxt+1
  3321  004252  C03D  F063         	movff	?_get_fat+2,remove_chain@nxt+2
  3322  004256  C03E  F064         	movff	?_get_fat+3,remove_chain@nxt+3
  3323                           
  3324                           ;ff.c: 955:    if (nxt == 0) break;
  3325  00425A  0100               	movlb	0	; () banked
  3326  00425C  5161               	movf	remove_chain@nxt& (0+255),w,b
  3327  00425E  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3328  004260  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3329  004262  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3330  004264  B4D8               	btfsc	status,2,c
  3331  004266  D067               	goto	u7070
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;ff.c: 956:    if (nxt == 1) { res = FR_INT_ERR; break; }
  3335  004268  0561               	decf	remove_chain@nxt& (0+255),w,b
  3336  00426A  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3337  00426C  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3338  00426E  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3339  004270  B4D8               	btfsc	status,2,c
  3340  004272  D7D6               	goto	u7010
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;ff.c: 957:    if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  3344  004274  2961               	incf	remove_chain@nxt& (0+255),w,b
  3345  004276  E10A               	bnz	l5453
  3346  004278  2962               	incf	(remove_chain@nxt+1)& (0+255),w,b
  3347  00427A  E108               	bnz	l5453
  3348  00427C  2963               	incf	(remove_chain@nxt+2)& (0+255),w,b
  3349  00427E  E106               	bnz	l5453
  3350  004280  2964               	incf	(remove_chain@nxt+3)& (0+255),w,b
  3351  004282  A4D8               	btfss	status,2,c
  3352  004284  D003               	goto	l5453
  3353                           
  3354                           ; BSR set to: 0
  3355  004286  0E01               	movlw	1
  3356  004288                     L4:
  3357  004288  6F60               	movwf	remove_chain@res& (0+255),b
  3358  00428A  D055               	goto	u7070
  3359  00428C                     l5453:
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;ff.c: 958:    res = put_fat(fs, clst, 0);
  3363  00428C  C056  F03B         	movff	remove_chain@fs,put_fat@fs
  3364  004290  C057  F03C         	movff	remove_chain@fs+1,put_fat@fs+1
  3365  004294  C058  F03D         	movff	remove_chain@clst,put_fat@clst
  3366  004298  C059  F03E         	movff	remove_chain@clst+1,put_fat@clst+1
  3367  00429C  C05A  F03F         	movff	remove_chain@clst+2,put_fat@clst+2
  3368  0042A0  C05B  F040         	movff	remove_chain@clst+3,put_fat@clst+3
  3369  0042A4  0E00               	movlw	0
  3370  0042A6  6E41               	movwf	put_fat@val,c
  3371  0042A8  0E00               	movlw	0
  3372  0042AA  6E42               	movwf	put_fat@val+1,c
  3373  0042AC  0E00               	movlw	0
  3374  0042AE  6E43               	movwf	put_fat@val+2,c
  3375  0042B0  0E00               	movlw	0
  3376  0042B2  6E44               	movwf	put_fat@val+3,c
  3377  0042B4  ECF4  F011         	call	_put_fat	;wreg free
  3378  0042B8  0100               	movlb	0	; () banked
  3379  0042BA  6F60               	movwf	remove_chain@res& (0+255),b
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;ff.c: 959:    if (res != FR_OK) break;
  3383  0042BC  5160               	movf	remove_chain@res& (0+255),w,b
  3384  0042BE  A4D8               	btfss	status,2,c
  3385  0042C0  D03A               	goto	u7070
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;ff.c: 960:    if (fs->free_clust != 0xFFFFFFFF) {
  3389  0042C2  EE20 F00E          	lfsr	2,14
  3390  0042C6  5056               	movf	remove_chain@fs,w,c
  3391  0042C8  26D9               	addwf	fsr2l,f,c
  3392  0042CA  5057               	movf	remove_chain@fs+1,w,c
  3393  0042CC  22DA               	addwfc	fsr2h,f,c
  3394  0042CE  28DE               	incf	postinc2,w,c
  3395  0042D0  E107               	bnz	u7060
  3396  0042D2  28DE               	incf	postinc2,w,c
  3397  0042D4  E105               	bnz	u7060
  3398  0042D6  28DE               	incf	postinc2,w,c
  3399  0042D8  E103               	bnz	u7060
  3400  0042DA  28DE               	incf	postinc2,w,c
  3401  0042DC  B4D8               	btfsc	status,2,c
  3402  0042DE  D013               	goto	l5463
  3403  0042E0                     u7060:
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;ff.c: 961:     fs->free_clust++;
  3407  0042E0  EE20 F00E          	lfsr	2,14
  3408  0042E4  5056               	movf	remove_chain@fs,w,c
  3409  0042E6  26D9               	addwf	fsr2l,f,c
  3410  0042E8  5057               	movf	remove_chain@fs+1,w,c
  3411  0042EA  22DA               	addwfc	fsr2h,f,c
  3412  0042EC  2ADE               	incf	postinc2,f,c
  3413  0042EE  0E00               	movlw	0
  3414  0042F0  22DE               	addwfc	postinc2,f,c
  3415  0042F2  22DE               	addwfc	postinc2,f,c
  3416  0042F4  22DE               	addwfc	postinc2,f,c
  3417                           
  3418                           ;ff.c: 962:     fs->fsi_flag |= 1;
  3419  0042F6  EE20 F005          	lfsr	2,5
  3420  0042FA  5056               	movf	remove_chain@fs,w,c
  3421  0042FC  26D9               	addwf	fsr2l,f,c
  3422  0042FE  5057               	movf	remove_chain@fs+1,w,c
  3423  004300  22DA               	addwfc	fsr2h,f,c
  3424  004302  0E00               	movlw	0
  3425  004304  80DB               	bsf	plusw2,0,c
  3426  004306                     l5463:
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;ff.c: 974:    clst = nxt;
  3430  004306  C061  F058         	movff	remove_chain@nxt,remove_chain@clst
  3431  00430A  C062  F059         	movff	remove_chain@nxt+1,remove_chain@clst+1
  3432  00430E  C063  F05A         	movff	remove_chain@nxt+2,remove_chain@clst+2
  3433  004312  C064  F05B         	movff	remove_chain@nxt+3,remove_chain@clst+3
  3434  004316                     l302:
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3438  004316  EE20 F012          	lfsr	2,18
  3439  00431A  5056               	movf	remove_chain@fs,w,c
  3440  00431C  26D9               	addwf	fsr2l,f,c
  3441  00431E  5057               	movf	remove_chain@fs+1,w,c
  3442  004320  22DA               	addwfc	fsr2h,f,c
  3443  004322  50DE               	movf	postinc2,w,c
  3444  004324  5C58               	subwf	remove_chain@clst,w,c
  3445  004326  50DE               	movf	postinc2,w,c
  3446  004328  5859               	subwfb	remove_chain@clst+1,w,c
  3447  00432A  50DE               	movf	postinc2,w,c
  3448  00432C  585A               	subwfb	remove_chain@clst+2,w,c
  3449  00432E  50DE               	movf	postinc2,w,c
  3450  004330  585B               	subwfb	remove_chain@clst+3,w,c
  3451  004332  A0D8               	btfss	status,0,c
  3452  004334  D77C               	goto	l5439
  3453  004336                     u7070:
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;ff.c: 978:  return res;
  3457  004336  5160               	movf	remove_chain@res& (0+255),w,b
  3458                           
  3459                           ; BSR set to: 0
  3460  004338  0012               	return		;funcret
  3461  00433A                     __end_of_remove_chain:
  3462                           	opt callstack 0
  3463                           
  3464 ;; *************** function _follow_path *****************
  3465 ;; Defined at:
  3466 ;;		line 2052 in file "ff.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;  dp              2   38[BANK0 ] PTR struct .
  3469 ;;		 -> f_open@dj(22), 
  3470 ;;  path            2   40[BANK0 ] PTR const unsigned char 
  3471 ;;		 -> STR_6(11), STR_5(1), STR_4(1), 
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;  dir             2   42[BANK0 ] PTR unsigned char 
  3474 ;;		 -> FatFs(558), NULL(0), 
  3475 ;;  res             1   45[BANK0 ] enum E93
  3476 ;;  ns              1   44[BANK0 ] unsigned char 
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  1    wreg      enum E93
  3479 ;; Registers used:
  3480 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3486 ;;      Params:         0       4       0       0       0       0       0       0       0
  3487 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3488 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3489 ;;      Totals:         0       8       0       0       0       0       0       0       0
  3490 ;;Total ram usage:        8 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:   12
  3493 ;; This function calls:
  3494 ;;		_create_name
  3495 ;;		_dir_find
  3496 ;;		_dir_sdi
  3497 ;;		_ld_clust
  3498 ;; This function is called by:
  3499 ;;		_f_open
  3500 ;; This function uses a non-reentrant model
  3501 ;;
  3502                           
  3503                           	psect	text6
  3504  00433A                     __ptext6:
  3505                           	opt callstack 0
  3506  00433A                     _follow_path:
  3507                           	opt callstack 16
  3508                           
  3509                           ;ff.c: 2053:  DIRC* dp,;ff.c: 2054:  const TCHAR* path;ff.c: 2056: {;ff.c: 2057:  FRESUL
      +                          T res;;ff.c: 2058:  BYTE *dir, ns;;ff.c: 2068:  if (*path == '/' || *path == '\\')
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;incstack = 0
  3513  00433A  C088  FFF6         	movff	follow_path@path,tblptrl
  3514  00433E  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3515  004342                     	if	0	;tblptru may be non-zero
  3516  004342                     	endif
  3517  004342                     	if	0	;tblptru may be non-zero
  3518  004342                     	endif
  3519  004342  0008               	tblrd		*
  3520  004344  50F5               	movf	tablat,w,c
  3521  004346  0A2F               	xorlw	47
  3522  004348  B4D8               	btfsc	status,2,c
  3523  00434A  D009               	goto	u7110
  3524  00434C  C088  FFF6         	movff	follow_path@path,tblptrl
  3525  004350  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3526  004354                     	if	0	;tblptru may be non-zero
  3527  004354                     	endif
  3528  004354                     	if	0	;tblptru may be non-zero
  3529  004354                     	endif
  3530  004354  0008               	tblrd		*
  3531  004356  50F5               	movf	tablat,w,c
  3532  004358  0A5C               	xorlw	92
  3533  00435A  A4D8               	btfss	status,2,c
  3534  00435C  D003               	goto	l5493
  3535  00435E                     u7110:
  3536                           
  3537                           ;ff.c: 2069:   path++;
  3538  00435E  0100               	movlb	0	; () banked
  3539  004360  4B88               	infsnz	follow_path@path& (0+255),f,b
  3540  004362  2B89               	incf	(follow_path@path+1)& (0+255),f,b
  3541  004364                     l5493:
  3542                           
  3543                           ;ff.c: 2070:  dp->sclust = 0;
  3544  004364  0100               	movlb	0	; () banked
  3545  004366  EE20 F006          	lfsr	2,6
  3546  00436A  5186               	movf	follow_path@dp& (0+255),w,b
  3547  00436C  26D9               	addwf	fsr2l,f,c
  3548  00436E  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3549  004370  22DA               	addwfc	fsr2h,f,c
  3550  004372  6ADE               	clrf	postinc2,c
  3551  004374  6ADE               	clrf	postinc2,c
  3552  004376  6ADE               	clrf	postinc2,c
  3553  004378  6ADD               	clrf	postdec2,c
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;ff.c: 2073:  if ((UINT)*path < ' ') {
  3557  00437A  C088  FFF6         	movff	follow_path@path,tblptrl
  3558  00437E  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3559  004382                     	if	0	;tblptru may be non-zero
  3560  004382                     	endif
  3561  004382                     	if	0	;tblptru may be non-zero
  3562  004382                     	endif
  3563  004382  0E20               	movlw	32
  3564  004384  0008               	tblrd		*
  3565  004386  60F5               	cpfslt	tablat,c
  3566  004388  D017               	goto	l5501
  3567                           
  3568                           ; BSR set to: 0
  3569                           ;ff.c: 2074:   res = dir_sdi(dp, 0);
  3570  00438A  C086  F056         	movff	follow_path@dp,dir_sdi@dp
  3571  00438E  C087  F057         	movff	follow_path@dp+1,dir_sdi@dp+1
  3572  004392  0E00               	movlw	0
  3573  004394  6E59               	movwf	dir_sdi@idx+1,c
  3574  004396  0E00               	movlw	0
  3575  004398  6E58               	movwf	dir_sdi@idx,c
  3576  00439A  EC25  F01B         	call	_dir_sdi	;wreg free
  3577  00439E  0100               	movlb	0	; () banked
  3578  0043A0  6F8D               	movwf	follow_path@res& (0+255),b
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;ff.c: 2075:   dp->dir = 0;
  3582  0043A2  EE20 F012          	lfsr	2,18
  3583  0043A6  5186               	movf	follow_path@dp& (0+255),w,b
  3584  0043A8  26D9               	addwf	fsr2l,f,c
  3585  0043AA  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3586  0043AC  22DA               	addwfc	fsr2h,f,c
  3587  0043AE  0E00               	movlw	0
  3588  0043B0  6EDE               	movwf	postinc2,c
  3589  0043B2  0E00               	movlw	0
  3590  0043B4  6EDD               	movwf	postdec2,c
  3591                           
  3592                           ;ff.c: 2076:  } else {
  3593  0043B6  D062               	goto	l5537
  3594  0043B8                     l5501:
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;ff.c: 2078:    res = create_name(dp, &path);
  3598  0043B8  C086  F009         	movff	follow_path@dp,create_name@dp
  3599  0043BC  C087  F00A         	movff	follow_path@dp+1,create_name@dp+1
  3600  0043C0  0E88               	movlw	low follow_path@path
  3601  0043C2  6E0B               	movwf	create_name@path,c
  3602  0043C4  0E00               	movlw	high follow_path@path
  3603  0043C6  6E0C               	movwf	create_name@path+1,c
  3604  0043C8  EC86  F01C         	call	_create_name	;wreg free
  3605  0043CC  0100               	movlb	0	; () banked
  3606  0043CE  6F8D               	movwf	follow_path@res& (0+255),b
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;ff.c: 2079:    if (res != FR_OK) break;
  3610  0043D0  518D               	movf	follow_path@res& (0+255),w,b
  3611  0043D2  A4D8               	btfss	status,2,c
  3612  0043D4  D053               	goto	l5537
  3613                           
  3614                           ; BSR set to: 0
  3615                           ;ff.c: 2080:    res = dir_find(dp);
  3616  0043D6  C086  F080         	movff	follow_path@dp,dir_find@dp
  3617  0043DA  C087  F081         	movff	follow_path@dp+1,dir_find@dp+1
  3618  0043DE  ECE1  F023         	call	_dir_find	;wreg free
  3619  0043E2  0100               	movlb	0	; () banked
  3620  0043E4  6F8D               	movwf	follow_path@res& (0+255),b
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;ff.c: 2081:    ns = dp->fn[11];
  3624  0043E6  EE20 F014          	lfsr	2,20
  3625  0043EA  5186               	movf	follow_path@dp& (0+255),w,b
  3626  0043EC  26D9               	addwf	fsr2l,f,c
  3627  0043EE  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3628  0043F0  22DA               	addwfc	fsr2h,f,c
  3629  0043F2  EE10 F00B          	lfsr	1,11
  3630  0043F6  50DE               	movf	postinc2,w,c
  3631  0043F8  26E1               	addwf	fsr1l,f,c
  3632  0043FA  50DD               	movf	postdec2,w,c
  3633  0043FC  22E2               	addwfc	fsr1h,f,c
  3634  0043FE  50E7               	movf	indf1,w,c
  3635  004400  6F8C               	movwf	follow_path@ns& (0+255),b
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;ff.c: 2082:    if (res != FR_OK) {
  3639  004402  518D               	movf	follow_path@res& (0+255),w,b
  3640  004404  B4D8               	btfsc	status,2,c
  3641  004406  D008               	goto	l469
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;ff.c: 2083:     if (res == FR_NO_FILE) {
  3645  004408  0E04               	movlw	4
  3646  00440A  198D               	xorwf	follow_path@res& (0+255),w,b
  3647  00440C  B4D8               	btfsc	status,2,c
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;ff.c: 2089:       if (!(ns & 0x04)) res = FR_NO_PATH;
  3651  00440E  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3652  004410  D035               	goto	l5537
  3653  004412                     u7160:
  3654                           
  3655                           ; BSR set to: 0
  3656  004412  0E05               	movlw	5
  3657  004414  6F8D               	movwf	follow_path@res& (0+255),b
  3658  004416  D032               	goto	l5537
  3659  004418                     l469:
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;ff.c: 2094:    if (ns & 0x04) break;
  3663  004418  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3664  00441A  D030               	goto	l5537
  3665                           
  3666                           ; BSR set to: 0
  3667                           ;ff.c: 2095:    dir = dp->dir;
  3668  00441C  EE20 F012          	lfsr	2,18
  3669  004420  5186               	movf	follow_path@dp& (0+255),w,b
  3670  004422  26D9               	addwf	fsr2l,f,c
  3671  004424  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3672  004426  22DA               	addwfc	fsr2h,f,c
  3673  004428  CFDE F08A          	movff	postinc2,follow_path@dir
  3674  00442C  CFDD F08B          	movff	postdec2,follow_path@dir+1
  3675                           
  3676                           ;ff.c: 2096:    if (!(dir[11] & 0x10)) {
  3677  004430  EE20 F00B          	lfsr	2,11
  3678  004434  518A               	movf	follow_path@dir& (0+255),w,b
  3679  004436  26D9               	addwf	fsr2l,f,c
  3680  004438  518B               	movf	(follow_path@dir+1)& (0+255),w,b
  3681  00443A  22DA               	addwfc	fsr2h,f,c
  3682  00443C  A8DF               	btfss	indf2,4,c
  3683  00443E  D7E9               	goto	u7160
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;ff.c: 2099:    dp->sclust = ld_clust(dp->fs, dir);
  3687  004440  C086  FFD9         	movff	follow_path@dp,fsr2l
  3688  004444  C087  FFDA         	movff	follow_path@dp+1,fsr2h
  3689  004448  CFDE F001          	movff	postinc2,ld_clust@fs
  3690  00444C  CFDD F002          	movff	postdec2,ld_clust@fs+1
  3691  004450  C08A  F003         	movff	follow_path@dir,ld_clust@dir
  3692  004454  C08B  F004         	movff	follow_path@dir+1,ld_clust@dir+1
  3693  004458  EC46  F028         	call	_ld_clust	;wreg free
  3694  00445C  0100               	movlb	0	; () banked
  3695  00445E  EE20 F006          	lfsr	2,6
  3696  004462  5186               	movf	follow_path@dp& (0+255),w,b
  3697  004464  26D9               	addwf	fsr2l,f,c
  3698  004466  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3699  004468  22DA               	addwfc	fsr2h,f,c
  3700  00446A  C001  FFDE         	movff	?_ld_clust,postinc2
  3701  00446E  C002  FFDE         	movff	?_ld_clust+1,postinc2
  3702  004472  C003  FFDE         	movff	?_ld_clust+2,postinc2
  3703  004476  C004  FFDE         	movff	?_ld_clust+3,postinc2
  3704  00447A  D79E               	goto	l5501
  3705  00447C                     l5537:
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;ff.c: 2103:  return res;
  3709  00447C  518D               	movf	follow_path@res& (0+255),w,b
  3710                           
  3711                           ; BSR set to: 0
  3712  00447E  0012               	return		;funcret
  3713  004480                     __end_of_follow_path:
  3714                           	opt callstack 0
  3715                           
  3716 ;; *************** function _ld_clust *****************
  3717 ;; Defined at:
  3718 ;;		line 1235 in file "ff.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;  fs              2    0[COMRAM] PTR struct .
  3721 ;;		 -> FatFs(558), NULL(0), 
  3722 ;;  dir             2    2[COMRAM] PTR const unsigned char 
  3723 ;;		 -> FatFs(558), NULL(0), 
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;  cl              4   10[COMRAM] unsigned long 
  3726 ;; Return value:  Size  Location     Type
  3727 ;;                  4    0[COMRAM] unsigned long 
  3728 ;; Registers used:
  3729 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3730 ;; Tracked objects:
  3731 ;;		On entry : 0/0
  3732 ;;		On exit  : 0/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3735 ;;      Params:         4       0       0       0       0       0       0       0       0
  3736 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3737 ;;      Temps:          6       0       0       0       0       0       0       0       0
  3738 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3739 ;;Total ram usage:       14 bytes
  3740 ;; Hardware stack levels used:    1
  3741 ;; This function calls:
  3742 ;;		Nothing
  3743 ;; This function is called by:
  3744 ;;		_follow_path
  3745 ;;		_f_open
  3746 ;; This function uses a non-reentrant model
  3747 ;;
  3748                           
  3749                           	psect	text7
  3750  00508C                     __ptext7:
  3751                           	opt callstack 0
  3752  00508C                     _ld_clust:
  3753                           	opt callstack 28
  3754                           
  3755                           ;ff.c: 1236:  FATFS* fs,;ff.c: 1237:  const BYTE* dir;ff.c: 1239: {;ff.c: 1240:  DWORD c
      +                          l;;ff.c: 1242:  cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;incstack = 0
  3759  00508C  0E1A               	movlw	26
  3760  00508E  2403               	addwf	ld_clust@dir,w,c
  3761  005090  6ED9               	movwf	fsr2l,c
  3762  005092  0E00               	movlw	0
  3763  005094  2004               	addwfc	ld_clust@dir+1,w,c
  3764  005096  6EDA               	movwf	fsr2h,c
  3765  005098  CFDE F005          	movff	postinc2,??_ld_clust
  3766  00509C  CFDD F006          	movff	postdec2,??_ld_clust+1
  3767  0050A0  C005  F00B         	movff	??_ld_clust,ld_clust@cl
  3768  0050A4  C006  F00C         	movff	??_ld_clust+1,ld_clust@cl+1
  3769  0050A8  6A0D               	clrf	ld_clust@cl+2,c
  3770  0050AA  6A0E               	clrf	ld_clust@cl+3,c
  3771                           
  3772                           ;ff.c: 1243:  if (fs->fs_type == 3)
  3773  0050AC  C001  FFD9         	movff	ld_clust@fs,fsr2l
  3774  0050B0  C002  FFDA         	movff	ld_clust@fs+1,fsr2h
  3775  0050B4  0E03               	movlw	3
  3776  0050B6  18DE               	xorwf	postinc2,w,c
  3777  0050B8  A4D8               	btfss	status,2,c
  3778  0050BA  D01E               	goto	l5139
  3779                           
  3780                           ;ff.c: 1244:   cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  3781  0050BC  0E14               	movlw	20
  3782  0050BE  2403               	addwf	ld_clust@dir,w,c
  3783  0050C0  6ED9               	movwf	fsr2l,c
  3784  0050C2  0E00               	movlw	0
  3785  0050C4  2004               	addwfc	ld_clust@dir+1,w,c
  3786  0050C6  6EDA               	movwf	fsr2h,c
  3787  0050C8  CFDE F005          	movff	postinc2,??_ld_clust
  3788  0050CC  CFDD F006          	movff	postdec2,??_ld_clust+1
  3789  0050D0  5005               	movf	??_ld_clust,w,c
  3790  0050D2  6E07               	movwf	(??_ld_clust+2)& (0+255),c
  3791  0050D4  5006               	movf	??_ld_clust+1,w,c
  3792  0050D6  6E08               	movwf	(??_ld_clust+3)& (0+255),c
  3793  0050D8  6A09               	clrf	(??_ld_clust+4)& (0+255),c
  3794  0050DA  6A0A               	clrf	(??_ld_clust+5)& (0+255),c
  3795  0050DC  C008  F00A         	movff	??_ld_clust+3,??_ld_clust+5
  3796  0050E0  C007  F009         	movff	??_ld_clust+2,??_ld_clust+4
  3797  0050E4  6A08               	clrf	??_ld_clust+3,c
  3798  0050E6  6A07               	clrf	??_ld_clust+2,c
  3799  0050E8  5007               	movf	??_ld_clust+2,w,c
  3800  0050EA  120B               	iorwf	ld_clust@cl,f,c
  3801  0050EC  5008               	movf	??_ld_clust+3,w,c
  3802  0050EE  120C               	iorwf	ld_clust@cl+1,f,c
  3803  0050F0  5009               	movf	??_ld_clust+4,w,c
  3804  0050F2  120D               	iorwf	ld_clust@cl+2,f,c
  3805  0050F4  500A               	movf	??_ld_clust+5,w,c
  3806  0050F6  120E               	iorwf	ld_clust@cl+3,f,c
  3807  0050F8                     l5139:
  3808                           
  3809                           ;ff.c: 1246:  return cl;
  3810  0050F8  C00B  F001         	movff	ld_clust@cl,?_ld_clust
  3811  0050FC  C00C  F002         	movff	ld_clust@cl+1,?_ld_clust+1
  3812  005100  C00D  F003         	movff	ld_clust@cl+2,?_ld_clust+2
  3813  005104  C00E  F004         	movff	ld_clust@cl+3,?_ld_clust+3
  3814  005108  0012               	return		;funcret
  3815  00510A                     __end_of_ld_clust:
  3816                           	opt callstack 0
  3817                           
  3818 ;; *************** function _dir_find *****************
  3819 ;; Defined at:
  3820 ;;		line 1458 in file "ff.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;  dp              2   32[BANK0 ] PTR struct .
  3823 ;;		 -> f_open@dj(22), 
  3824 ;; Auto vars:     Size  Location     Type
  3825 ;;  dir             2   35[BANK0 ] PTR unsigned char 
  3826 ;;		 -> FatFs(558), NULL(0), 
  3827 ;;  res             1   37[BANK0 ] enum E93
  3828 ;;  c               1   34[BANK0 ] unsigned char 
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  1    wreg      enum E93
  3831 ;; Registers used:
  3832 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3833 ;; Tracked objects:
  3834 ;;		On entry : 0/0
  3835 ;;		On exit  : 0/0
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3838 ;;      Params:         0       2       0       0       0       0       0       0       0
  3839 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3840 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3841 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3842 ;;Total ram usage:        6 bytes
  3843 ;; Hardware stack levels used:    1
  3844 ;; Hardware stack levels required when called:   11
  3845 ;; This function calls:
  3846 ;;		_dir_next
  3847 ;;		_dir_sdi
  3848 ;;		_mem_cmp
  3849 ;;		_move_window
  3850 ;; This function is called by:
  3851 ;;		_follow_path
  3852 ;; This function uses a non-reentrant model
  3853 ;;
  3854                           
  3855                           	psect	text8
  3856  0047C2                     __ptext8:
  3857                           	opt callstack 0
  3858  0047C2                     _dir_find:
  3859                           	opt callstack 16
  3860                           
  3861                           ;ff.c: 1459:  DIRC* dp;ff.c: 1461: {;ff.c: 1462:  FRESULT res;;ff.c: 1463:  BYTE c, *dir
      +                          ;;ff.c: 1468:  res = dir_sdi(dp, 0);
  3862                           
  3863                           ;incstack = 0
  3864  0047C2  C080  F056         	movff	dir_find@dp,dir_sdi@dp
  3865  0047C6  C081  F057         	movff	dir_find@dp+1,dir_sdi@dp+1
  3866  0047CA  0E00               	movlw	0
  3867  0047CC  6E59               	movwf	dir_sdi@idx+1,c
  3868  0047CE  0E00               	movlw	0
  3869  0047D0  6E58               	movwf	dir_sdi@idx,c
  3870  0047D2  EC25  F01B         	call	_dir_sdi	;wreg free
  3871  0047D6  0100               	movlb	0	; () banked
  3872  0047D8  6F85               	movwf	dir_find@res& (0+255),b
  3873                           
  3874                           ; BSR set to: 0
  3875                           ;ff.c: 1469:  if (res != FR_OK) return res;
  3876  0047DA  5185               	movf	dir_find@res& (0+255),w,b
  3877  0047DC  B4D8               	btfsc	status,2,c
  3878  0047DE  D003               	goto	l5153
  3879  0047E0                     u6450:
  3880  0047E0  0100               	movlb	0	; () banked
  3881  0047E2  5185               	movf	dir_find@res& (0+255),w,b
  3882  0047E4  0012               	return	
  3883  0047E6                     l5153:
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;ff.c: 1475:   res = move_window(dp->fs, dp->sect);
  3887  0047E6  C080  FFD9         	movff	dir_find@dp,fsr2l
  3888  0047EA  C081  FFDA         	movff	dir_find@dp+1,fsr2h
  3889  0047EE  CFDE F030          	movff	postinc2,move_window@fs
  3890  0047F2  CFDD F031          	movff	postdec2,move_window@fs+1
  3891  0047F6  EE20 F00E          	lfsr	2,14
  3892  0047FA  5180               	movf	dir_find@dp& (0+255),w,b
  3893  0047FC  26D9               	addwf	fsr2l,f,c
  3894  0047FE  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3895  004800  22DA               	addwfc	fsr2h,f,c
  3896  004802  CFDE F032          	movff	postinc2,move_window@sector
  3897  004806  CFDE F033          	movff	postinc2,move_window@sector+1
  3898  00480A  CFDE F034          	movff	postinc2,move_window@sector+2
  3899  00480E  CFDE F035          	movff	postinc2,move_window@sector+3
  3900  004812  EC27  F027         	call	_move_window	;wreg free
  3901  004816  0100               	movlb	0	; () banked
  3902  004818  6F85               	movwf	dir_find@res& (0+255),b
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;ff.c: 1476:   if (res != FR_OK) break;
  3906  00481A  5185               	movf	dir_find@res& (0+255),w,b
  3907  00481C  A4D8               	btfss	status,2,c
  3908  00481E  D7E0               	goto	u6450
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;ff.c: 1477:   dir = dp->dir;
  3912  004820  EE20 F012          	lfsr	2,18
  3913  004824  5180               	movf	dir_find@dp& (0+255),w,b
  3914  004826  26D9               	addwf	fsr2l,f,c
  3915  004828  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3916  00482A  22DA               	addwfc	fsr2h,f,c
  3917  00482C  CFDE F083          	movff	postinc2,dir_find@dir
  3918  004830  CFDD F084          	movff	postdec2,dir_find@dir+1
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;ff.c: 1478:   c = dir[0];
  3922  004834  C083  FFD9         	movff	dir_find@dir,fsr2l
  3923  004838  C084  FFDA         	movff	dir_find@dir+1,fsr2h
  3924  00483C  50DF               	movf	indf2,w,c
  3925  00483E  6F82               	movwf	dir_find@c& (0+255),b
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;ff.c: 1479:   if (c == 0) { res = FR_NO_FILE; break; }
  3929  004840  5182               	movf	dir_find@c& (0+255),w,b
  3930  004842  A4D8               	btfss	status,2,c
  3931  004844  D003               	goto	l5167
  3932                           
  3933                           ; BSR set to: 0
  3934  004846  0E04               	movlw	4
  3935  004848  6F85               	movwf	dir_find@res& (0+255),b
  3936  00484A  D7CA               	goto	u6450
  3937  00484C                     l5167:
  3938                           
  3939                           ; BSR set to: 0
  3940                           ;ff.c: 1502:   if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  3941  00484C  EE20 F00B          	lfsr	2,11
  3942  004850  5183               	movf	dir_find@dir& (0+255),w,b
  3943  004852  26D9               	addwf	fsr2l,f,c
  3944  004854  5184               	movf	(dir_find@dir+1)& (0+255),w,b
  3945  004856  22DA               	addwfc	fsr2h,f,c
  3946  004858  B6DF               	btfsc	indf2,3,c
  3947  00485A  D018               	goto	l5173
  3948                           
  3949                           ; BSR set to: 0
  3950  00485C  C083  F001         	movff	dir_find@dir,mem_cmp@dst
  3951  004860  C084  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  3952  004864  EE20 F014          	lfsr	2,20
  3953  004868  5180               	movf	dir_find@dp& (0+255),w,b
  3954  00486A  26D9               	addwf	fsr2l,f,c
  3955  00486C  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3956  00486E  22DA               	addwfc	fsr2h,f,c
  3957  004870  CFDE F003          	movff	postinc2,mem_cmp@src
  3958  004874  CFDD F004          	movff	postdec2,mem_cmp@src+1
  3959  004878  0E00               	movlw	0
  3960  00487A  6E06               	movwf	mem_cmp@cnt+1,c
  3961  00487C  0E0B               	movlw	11
  3962  00487E  6E05               	movwf	mem_cmp@cnt,c
  3963  004880  EC37  F029         	call	_mem_cmp	;wreg free
  3964  004884  5001               	movf	?_mem_cmp,w,c
  3965  004886  1002               	iorwf	?_mem_cmp+1,w,c
  3966  004888  B4D8               	btfsc	status,2,c
  3967  00488A  D7AA               	goto	u6450
  3968  00488C                     l5173:
  3969                           
  3970                           ;ff.c: 1505:   res = dir_next(dp, 0);
  3971  00488C  C080  F06D         	movff	dir_find@dp,dir_next@dp
  3972  004890  C081  F06E         	movff	dir_find@dp+1,dir_next@dp+1
  3973  004894  0E00               	movlw	0
  3974  004896  0100               	movlb	0	; () banked
  3975  004898  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  3976  00489A  0E00               	movlw	0
  3977  00489C  6F6F               	movwf	dir_next@stretch& (0+255),b
  3978  00489E  EC09  F014         	call	_dir_next	;wreg free
  3979  0048A2  0100               	movlb	0	; () banked
  3980  0048A4  6F85               	movwf	dir_find@res& (0+255),b
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;ff.c: 1506:  } while (res == FR_OK);
  3984  0048A6  5185               	movf	dir_find@res& (0+255),w,b
  3985  0048A8  A4D8               	btfss	status,2,c
  3986  0048AA  D79A               	goto	u6450
  3987  0048AC  D79C               	goto	l5153
  3988  0048AE                     __end_of_dir_find:
  3989                           	opt callstack 0
  3990                           
  3991 ;; *************** function _mem_cmp *****************
  3992 ;; Defined at:
  3993 ;;		line 533 in file "ff.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;  dst             2    0[COMRAM] PTR const void 
  3996 ;;		 -> FatFs(558), NULL(0), 
  3997 ;;  src             2    2[COMRAM] PTR const void 
  3998 ;;		 -> f_open@sfn(12), 
  3999 ;;  cnt             2    4[COMRAM] unsigned short 
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;  r               2   12[COMRAM] int 
  4002 ;;  s               2   10[COMRAM] PTR const unsigned char 
  4003 ;;		 -> f_open@sfn(12), 
  4004 ;;  d               2    8[COMRAM] PTR const unsigned char 
  4005 ;;		 -> FatFs(558), NULL(0), 
  4006 ;; Return value:  Size  Location     Type
  4007 ;;                  2    0[COMRAM] int 
  4008 ;; Registers used:
  4009 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4010 ;; Tracked objects:
  4011 ;;		On entry : 0/0
  4012 ;;		On exit  : 0/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4015 ;;      Params:         6       0       0       0       0       0       0       0       0
  4016 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4017 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4018 ;;      Totals:        14       0       0       0       0       0       0       0       0
  4019 ;;Total ram usage:       14 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; This function calls:
  4022 ;;		Nothing
  4023 ;; This function is called by:
  4024 ;;		_dir_find
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           	psect	text9
  4029  00526E                     __ptext9:
  4030                           	opt callstack 0
  4031  00526E                     _mem_cmp:
  4032                           	opt callstack 26
  4033                           
  4034                           ;ff.c: 534:  const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;incstack = 0
  4038  00526E  C001  F009         	movff	mem_cmp@dst,mem_cmp@d
  4039  005272  C002  F00A         	movff	mem_cmp@dst+1,mem_cmp@d+1
  4040  005276  C003  F00B         	movff	mem_cmp@src,mem_cmp@s
  4041  00527A  C004  F00C         	movff	mem_cmp@src+1,mem_cmp@s+1
  4042                           
  4043                           ;ff.c: 535:  int r = 0;
  4044  00527E  0E00               	movlw	0
  4045  005280  6E0E               	movwf	mem_cmp@r+1,c
  4046  005282  0E00               	movlw	0
  4047  005284  6E0D               	movwf	mem_cmp@r,c
  4048  005286                     l4763:
  4049  005286  0605               	decf	mem_cmp@cnt,f,c
  4050  005288  A0D8               	btfss	status,0,c
  4051  00528A  0606               	decf	mem_cmp@cnt+1,f,c
  4052  00528C  2805               	incf	mem_cmp@cnt,w,c
  4053  00528E  E103               	bnz	u5760
  4054  005290  2806               	incf	mem_cmp@cnt+1,w,c
  4055  005292  B4D8               	btfsc	status,2,c
  4056  005294  D01A               	goto	u5770
  4057  005296                     u5760:
  4058  005296  C009  FFD9         	movff	mem_cmp@d,fsr2l
  4059  00529A  C00A  FFDA         	movff	mem_cmp@d+1,fsr2h
  4060  00529E  4A09               	infsnz	mem_cmp@d,f,c
  4061  0052A0  2A0A               	incf	mem_cmp@d+1,f,c
  4062  0052A2  50DF               	movf	indf2,w,c
  4063  0052A4  6E07               	movwf	??_mem_cmp& (0+255),c
  4064  0052A6  C00B  FFD9         	movff	mem_cmp@s,fsr2l
  4065  0052AA  C00C  FFDA         	movff	mem_cmp@s+1,fsr2h
  4066  0052AE  4A0B               	infsnz	mem_cmp@s,f,c
  4067  0052B0  2A0C               	incf	mem_cmp@s+1,f,c
  4068  0052B2  50DF               	movf	indf2,w,c
  4069  0052B4  6E08               	movwf	(??_mem_cmp+1)& (0+255),c
  4070  0052B6  5008               	movf	??_mem_cmp+1,w,c
  4071  0052B8  5C07               	subwf	??_mem_cmp,w,c
  4072  0052BA  6E0D               	movwf	mem_cmp@r,c
  4073  0052BC  6A0E               	clrf	mem_cmp@r+1,c
  4074  0052BE  A0D8               	btfss	status,0,c
  4075  0052C0  060E               	decf	mem_cmp@r+1,f,c
  4076  0052C2  500D               	movf	mem_cmp@r,w,c
  4077  0052C4  100E               	iorwf	mem_cmp@r+1,w,c
  4078  0052C6  B4D8               	btfsc	status,2,c
  4079  0052C8  D7DE               	goto	l4763
  4080  0052CA                     u5770:
  4081                           
  4082                           ;ff.c: 538:  return r;
  4083  0052CA  C00D  F001         	movff	mem_cmp@r,?_mem_cmp
  4084  0052CE  C00E  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  4085  0052D2  0012               	return		;funcret
  4086  0052D4                     __end_of_mem_cmp:
  4087                           	opt callstack 0
  4088                           
  4089 ;; *************** function _create_name *****************
  4090 ;; Defined at:
  4091 ;;		line 1843 in file "ff.c"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;  dp              2    8[COMRAM] PTR struct .
  4094 ;;		 -> f_open@dj(22), 
  4095 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  4096 ;;		 -> follow_path@path(2), 
  4097 ;; Auto vars:     Size  Location     Type
  4098 ;;  i               2   28[COMRAM] unsigned short 
  4099 ;;  sfn             2   26[COMRAM] PTR unsigned char 
  4100 ;;		 -> f_open@sfn(12), 
  4101 ;;  p               2   23[COMRAM] PTR const unsigned char 
  4102 ;;		 -> STR_6(11), STR_5(1), STR_4(1), 
  4103 ;;  ni              2   21[COMRAM] unsigned short 
  4104 ;;  si              2   18[COMRAM] unsigned short 
  4105 ;;  c               1   30[COMRAM] unsigned char 
  4106 ;;  d               1   25[COMRAM] unsigned char 
  4107 ;;  b               1   20[COMRAM] unsigned char 
  4108 ;; Return value:  Size  Location     Type
  4109 ;;                  1    wreg      enum E93
  4110 ;; Registers used:
  4111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4112 ;; Tracked objects:
  4113 ;;		On entry : 0/0
  4114 ;;		On exit  : 0/0
  4115 ;;		Unchanged: 0/0
  4116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4117 ;;      Params:         4       0       0       0       0       0       0       0       0
  4118 ;;      Locals:        15       0       0       0       0       0       0       0       0
  4119 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4120 ;;      Totals:        23       0       0       0       0       0       0       0       0
  4121 ;;Total ram usage:       23 bytes
  4122 ;; Hardware stack levels used:    1
  4123 ;; Hardware stack levels required when called:    1
  4124 ;; This function calls:
  4125 ;;		_chk_chr
  4126 ;;		_mem_set
  4127 ;; This function is called by:
  4128 ;;		_follow_path
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           	psect	text10
  4133  00390C                     __ptext10:
  4134                           	opt callstack 0
  4135  00390C                     _create_name:
  4136                           	opt callstack 26
  4137                           
  4138                           ;ff.c: 1844:  DIRC* dp,;ff.c: 1845:  const TCHAR** path;ff.c: 1847: {;ff.c: 1969:  BYTE 
      +                          b, c, d, *sfn;;ff.c: 1970:  UINT ni, si, i;;ff.c: 1971:  const char *p;;ff.c: 1974:  for
      +                           (p = *path; *p == '/' || *p == '\\'; p++) ;
  4139                           
  4140                           ;incstack = 0
  4141  00390C  C00B  FFD9         	movff	create_name@path,fsr2l
  4142  003910  C00C  FFDA         	movff	create_name@path+1,fsr2h
  4143  003914  CFDE F018          	movff	postinc2,create_name@p
  4144  003918  CFDD F019          	movff	postdec2,create_name@p+1
  4145  00391C  D002               	goto	l5185
  4146  00391E                     l5183:
  4147  00391E  4A18               	infsnz	create_name@p,f,c
  4148  003920  2A19               	incf	create_name@p+1,f,c
  4149  003922                     l5185:
  4150  003922  C018  FFF6         	movff	create_name@p,tblptrl
  4151  003926  C019  FFF7         	movff	create_name@p+1,tblptrh
  4152  00392A                     	if	0	;tblptru may be non-zero
  4153  00392A                     	endif
  4154  00392A                     	if	0	;tblptru may be non-zero
  4155  00392A                     	endif
  4156  00392A  0008               	tblrd		*
  4157  00392C  50F5               	movf	tablat,w,c
  4158  00392E  0A2F               	xorlw	47
  4159  003930  B4D8               	btfsc	status,2,c
  4160  003932  D7F5               	goto	l5183
  4161  003934  C018  FFF6         	movff	create_name@p,tblptrl
  4162  003938  C019  FFF7         	movff	create_name@p+1,tblptrh
  4163  00393C                     	if	0	;tblptru may be non-zero
  4164  00393C                     	endif
  4165  00393C                     	if	0	;tblptru may be non-zero
  4166  00393C                     	endif
  4167  00393C  0008               	tblrd		*
  4168  00393E  50F5               	movf	tablat,w,c
  4169  003940  0A5C               	xorlw	92
  4170  003942  B4D8               	btfsc	status,2,c
  4171  003944  D7EC               	goto	l5183
  4172                           
  4173                           ;ff.c: 1975:  sfn = dp->fn;
  4174  003946  EE20 F014          	lfsr	2,20
  4175  00394A  5009               	movf	create_name@dp,w,c
  4176  00394C  26D9               	addwf	fsr2l,f,c
  4177  00394E  500A               	movf	create_name@dp+1,w,c
  4178  003950  22DA               	addwfc	fsr2h,f,c
  4179  003952  CFDE F01B          	movff	postinc2,create_name@sfn
  4180  003956  CFDD F01C          	movff	postdec2,create_name@sfn+1
  4181                           
  4182                           ;ff.c: 1976:  mem_set(sfn, ' ', 11);
  4183  00395A  C01B  F001         	movff	create_name@sfn,mem_set@dst
  4184  00395E  C01C  F002         	movff	create_name@sfn+1,mem_set@dst+1
  4185  003962  0E00               	movlw	0
  4186  003964  6E04               	movwf	mem_set@val+1,c
  4187  003966  0E20               	movlw	32
  4188  003968  6E03               	movwf	mem_set@val,c
  4189  00396A  0E00               	movlw	0
  4190  00396C  6E06               	movwf	mem_set@cnt+1,c
  4191  00396E  0E0B               	movlw	11
  4192  003970  6E05               	movwf	mem_set@cnt,c
  4193  003972  EC8F  F02A         	call	_mem_set	;wreg free
  4194                           
  4195                           ;ff.c: 1977:  si = i = b = 0; ni = 8;
  4196  003976  0E00               	movlw	0
  4197  003978  6E15               	movwf	create_name@b,c
  4198  00397A  C015  F01D         	movff	create_name@b,create_name@i
  4199  00397E  6A1E               	clrf	create_name@i+1,c
  4200  003980  C01D  F013         	movff	create_name@i,create_name@si
  4201  003984  C01E  F014         	movff	create_name@i+1,create_name@si+1
  4202  003988  0E00               	movlw	0
  4203  00398A  6E17               	movwf	create_name@ni+1,c
  4204  00398C  0E08               	movlw	8
  4205  00398E  6E16               	movwf	create_name@ni,c
  4206  003990                     l5197:
  4207                           
  4208                           ;ff.c: 1992:   c = (BYTE)p[si++];
  4209  003990  5013               	movf	create_name@si,w,c
  4210  003992  2418               	addwf	create_name@p,w,c
  4211  003994  6E0D               	movwf	??_create_name& (0+255),c
  4212  003996  5014               	movf	create_name@si+1,w,c
  4213  003998  2019               	addwfc	create_name@p+1,w,c
  4214  00399A  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4215  00399C  C00D  FFF6         	movff	??_create_name,tblptrl
  4216  0039A0  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4217  0039A4                     	if	0	;tblptru may be non-zero
  4218  0039A4                     	endif
  4219  0039A4                     	if	0	;tblptru may be non-zero
  4220  0039A4                     	endif
  4221  0039A4  0008               	tblrd		*
  4222  0039A6  CFF5 F01F          	movff	tablat,create_name@c
  4223  0039AA  4A13               	infsnz	create_name@si,f,c
  4224  0039AC  2A14               	incf	create_name@si+1,f,c
  4225                           
  4226                           ;ff.c: 1993:   if (c <= ' ' || c == '/' || c == '\\') break;
  4227  0039AE  0E20               	movlw	32
  4228  0039B0  641F               	cpfsgt	create_name@c,c
  4229  0039B2  D0A4               	goto	l5281
  4230  0039B4  0E2F               	movlw	47
  4231  0039B6  181F               	xorwf	create_name@c,w,c
  4232  0039B8  B4D8               	btfsc	status,2,c
  4233  0039BA  D0A0               	goto	l5281
  4234  0039BC  0E5C               	movlw	92
  4235  0039BE  181F               	xorwf	create_name@c,w,c
  4236  0039C0  B4D8               	btfsc	status,2,c
  4237  0039C2  D09C               	goto	l5281
  4238                           
  4239                           ;ff.c: 1994:   if (c == '.' || i >= ni) {
  4240  0039C4  0E2E               	movlw	46
  4241  0039C6  181F               	xorwf	create_name@c,w,c
  4242  0039C8  B4D8               	btfsc	status,2,c
  4243  0039CA  D006               	goto	u6570
  4244  0039CC  5016               	movf	create_name@ni,w,c
  4245  0039CE  5C1D               	subwf	create_name@i,w,c
  4246  0039D0  5017               	movf	create_name@ni+1,w,c
  4247  0039D2  581E               	subwfb	create_name@i+1,w,c
  4248  0039D4  A0D8               	btfss	status,0,c
  4249  0039D6  D018               	goto	l5223
  4250  0039D8                     u6570:
  4251                           
  4252                           ;ff.c: 1995:    if (ni != 8 || c != '.') return FR_INVALID_NAME;
  4253  0039D8  0E08               	movlw	8
  4254  0039DA  1816               	xorwf	create_name@ni,w,c
  4255  0039DC  1017               	iorwf	create_name@ni+1,w,c
  4256  0039DE  A4D8               	btfss	status,2,c
  4257  0039E0  D004               	goto	u6590
  4258  0039E2  0E2E               	movlw	46
  4259  0039E4  181F               	xorwf	create_name@c,w,c
  4260  0039E6  B4D8               	btfsc	status,2,c
  4261  0039E8  D002               	goto	l5219
  4262  0039EA                     u6590:
  4263  0039EA  0E06               	movlw	6
  4264  0039EC  0012               	return	
  4265  0039EE                     l5219:
  4266                           
  4267                           ;ff.c: 1996:    i = 8; ni = 11;
  4268  0039EE  0E00               	movlw	0
  4269  0039F0  6E1E               	movwf	create_name@i+1,c
  4270  0039F2  0E08               	movlw	8
  4271  0039F4  6E1D               	movwf	create_name@i,c
  4272  0039F6  0E00               	movlw	0
  4273  0039F8  6E17               	movwf	create_name@ni+1,c
  4274  0039FA  0E0B               	movlw	11
  4275  0039FC  6E16               	movwf	create_name@ni,c
  4276                           
  4277                           ;ff.c: 1997:    b <<= 2; continue;
  4278  0039FE  90D8               	bcf	status,0,c
  4279  003A00  3615               	rlcf	create_name@b,f,c
  4280  003A02  90D8               	bcf	status,0,c
  4281  003A04  3615               	rlcf	create_name@b,f,c
  4282  003A06  D7C4               	goto	l5197
  4283  003A08                     l5223:
  4284                           
  4285                           ;ff.c: 1999:   if (c >= 0x80) {
  4286  003A08  0E7F               	movlw	127
  4287  003A0A  641F               	cpfsgt	create_name@c,c
  4288  003A0C  D002               	goto	l432
  4289                           
  4290                           ;ff.c: 2000:    b |= 3;
  4291  003A0E  0E03               	movlw	3
  4292  003A10  1215               	iorwf	create_name@b,f,c
  4293  003A12                     l432:
  4294                           
  4295                           ;ff.c: 2009:   if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (B
      +                          YTE)(c) <= 0xFC))) {
  4296  003A12  0E80               	movlw	128
  4297  003A14  641F               	cpfsgt	create_name@c,c
  4298  003A16  D003               	goto	u6620
  4299  003A18  0E9F               	movlw	159
  4300  003A1A  641F               	cpfsgt	create_name@c,c
  4301  003A1C  D006               	goto	u6640
  4302  003A1E                     u6620:
  4303  003A1E  0EDF               	movlw	223
  4304  003A20  641F               	cpfsgt	create_name@c,c
  4305  003A22  D043               	goto	l5257
  4306  003A24  0EFD               	movlw	253
  4307  003A26  601F               	cpfslt	create_name@c,c
  4308  003A28  D040               	goto	l5257
  4309  003A2A                     u6640:
  4310                           
  4311                           ;ff.c: 2010:    d = (BYTE)p[si++];
  4312  003A2A  5013               	movf	create_name@si,w,c
  4313  003A2C  2418               	addwf	create_name@p,w,c
  4314  003A2E  6E0D               	movwf	??_create_name& (0+255),c
  4315  003A30  5014               	movf	create_name@si+1,w,c
  4316  003A32  2019               	addwfc	create_name@p+1,w,c
  4317  003A34  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4318  003A36  C00D  FFF6         	movff	??_create_name,tblptrl
  4319  003A3A  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4320  003A3E                     	if	0	;tblptru may be non-zero
  4321  003A3E                     	endif
  4322  003A3E                     	if	0	;tblptru may be non-zero
  4323  003A3E                     	endif
  4324  003A3E  0008               	tblrd		*
  4325  003A40  CFF5 F01A          	movff	tablat,create_name@d
  4326  003A44  4A13               	infsnz	create_name@si,f,c
  4327  003A46  2A14               	incf	create_name@si+1,f,c
  4328                           
  4329                           ;ff.c: 2011:    if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && 
      +                          (BYTE)(d) <= 0xFC)) || i >= ni - 1)
  4330  003A48  0E3F               	movlw	63
  4331  003A4A  641A               	cpfsgt	create_name@d,c
  4332  003A4C  D003               	goto	u6660
  4333  003A4E  0E7E               	movlw	126
  4334  003A50  641A               	cpfsgt	create_name@d,c
  4335  003A52  D006               	goto	u6680
  4336  003A54                     u6660:
  4337  003A54  0E7F               	movlw	127
  4338  003A56  641A               	cpfsgt	create_name@d,c
  4339  003A58  D7C8               	goto	u6590
  4340  003A5A  0EFD               	movlw	253
  4341  003A5C  601A               	cpfslt	create_name@d,c
  4342  003A5E  D7C5               	goto	u6590
  4343  003A60                     u6680:
  4344  003A60  0EFF               	movlw	255
  4345  003A62  6E0D               	movwf	??_create_name& (0+255),c
  4346  003A64  0EFF               	movlw	255
  4347  003A66  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4348  003A68  C016  F00F         	movff	create_name@ni,??_create_name+2
  4349  003A6C  C017  F010         	movff	create_name@ni+1,??_create_name+3
  4350  003A70  500D               	movf	??_create_name,w,c
  4351  003A72  260F               	addwf	??_create_name+2,f,c
  4352  003A74  500E               	movf	??_create_name+1,w,c
  4353  003A76  2210               	addwfc	??_create_name+3,f,c
  4354  003A78  500F               	movf	??_create_name+2,w,c
  4355  003A7A  5C1D               	subwf	create_name@i,w,c
  4356  003A7C  5010               	movf	??_create_name+3,w,c
  4357  003A7E  581E               	subwfb	create_name@i+1,w,c
  4358  003A80  B0D8               	btfsc	status,0,c
  4359  003A82  D7B3               	goto	u6590
  4360                           
  4361                           ;ff.c: 2013:    sfn[i++] = c;
  4362  003A84  501D               	movf	create_name@i,w,c
  4363  003A86  241B               	addwf	create_name@sfn,w,c
  4364  003A88  6ED9               	movwf	fsr2l,c
  4365  003A8A  501E               	movf	create_name@i+1,w,c
  4366  003A8C  201C               	addwfc	create_name@sfn+1,w,c
  4367  003A8E  6EDA               	movwf	fsr2h,c
  4368  003A90  C01F  FFDF         	movff	create_name@c,indf2
  4369  003A94  4A1D               	infsnz	create_name@i,f,c
  4370  003A96  2A1E               	incf	create_name@i+1,f,c
  4371                           
  4372                           ;ff.c: 2014:    sfn[i++] = d;
  4373  003A98  501D               	movf	create_name@i,w,c
  4374  003A9A  241B               	addwf	create_name@sfn,w,c
  4375  003A9C  6ED9               	movwf	fsr2l,c
  4376  003A9E  501E               	movf	create_name@i+1,w,c
  4377  003AA0  201C               	addwfc	create_name@sfn+1,w,c
  4378  003AA2  6EDA               	movwf	fsr2h,c
  4379  003AA4  C01A  FFDF         	movff	create_name@d,indf2
  4380  003AA8  D026               	goto	l5279
  4381  003AAA                     l5257:
  4382                           
  4383                           ;ff.c: 2016:    if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  4384  003AAA  0E01               	movlw	low STR_1
  4385  003AAC  6E01               	movwf	chk_chr@str,c
  4386  003AAE  0E08               	movlw	high STR_1
  4387  003AB0  6E02               	movwf	chk_chr@str+1,c
  4388  003AB2  C01F  F003         	movff	create_name@c,chk_chr@chr
  4389  003AB6  6A04               	clrf	chk_chr@chr+1,c
  4390  003AB8  ECF3  F029         	call	_chk_chr	;wreg free
  4391  003ABC  5001               	movf	?_chk_chr,w,c
  4392  003ABE  1002               	iorwf	?_chk_chr+1,w,c
  4393  003AC0  A4D8               	btfss	status,2,c
  4394  003AC2  D793               	goto	u6590
  4395                           
  4396                           ;ff.c: 2018:    if ((((c)>='A')&&((c)<='Z'))) {
  4397  003AC4  0E40               	movlw	64
  4398  003AC6  641F               	cpfsgt	create_name@c,c
  4399  003AC8  D005               	goto	l5269
  4400  003ACA  0E5B               	movlw	91
  4401  003ACC  601F               	cpfslt	create_name@c,c
  4402  003ACE  D002               	goto	l5269
  4403                           
  4404                           ;ff.c: 2019:     b |= 2;
  4405  003AD0  8215               	bsf	create_name@b,1,c
  4406                           
  4407                           ;ff.c: 2020:    } else {
  4408  003AD2  D009               	goto	l5277
  4409  003AD4                     l5269:
  4410                           
  4411                           ;ff.c: 2021:     if ((((c)>='a')&&((c)<='z'))) {
  4412  003AD4  0E60               	movlw	96
  4413  003AD6  641F               	cpfsgt	create_name@c,c
  4414  003AD8  D006               	goto	l5277
  4415  003ADA  0E7B               	movlw	123
  4416  003ADC  601F               	cpfslt	create_name@c,c
  4417  003ADE  D003               	goto	l5277
  4418                           
  4419                           ;ff.c: 2022:      b |= 1; c -= 0x20;
  4420  003AE0  8015               	bsf	create_name@b,0,c
  4421  003AE2  0E20               	movlw	32
  4422  003AE4  5E1F               	subwf	create_name@c,f,c
  4423  003AE6                     l5277:
  4424                           
  4425                           ;ff.c: 2025:    sfn[i++] = c;
  4426  003AE6  501D               	movf	create_name@i,w,c
  4427  003AE8  241B               	addwf	create_name@sfn,w,c
  4428  003AEA  6ED9               	movwf	fsr2l,c
  4429  003AEC  501E               	movf	create_name@i+1,w,c
  4430  003AEE  201C               	addwfc	create_name@sfn+1,w,c
  4431  003AF0  6EDA               	movwf	fsr2h,c
  4432  003AF2  C01F  FFDF         	movff	create_name@c,indf2
  4433  003AF6                     l5279:
  4434  003AF6  4A1D               	infsnz	create_name@i,f,c
  4435  003AF8  2A1E               	incf	create_name@i+1,f,c
  4436  003AFA  D74A               	goto	l5197
  4437  003AFC                     l5281:
  4438                           
  4439                           ;ff.c: 2028:  *path = &p[si];
  4440  003AFC  5013               	movf	create_name@si,w,c
  4441  003AFE  2418               	addwf	create_name@p,w,c
  4442  003B00  6E0D               	movwf	??_create_name& (0+255),c
  4443  003B02  5014               	movf	create_name@si+1,w,c
  4444  003B04  2019               	addwfc	create_name@p+1,w,c
  4445  003B06  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4446  003B08  C00B  FFD9         	movff	create_name@path,fsr2l
  4447  003B0C  C00C  FFDA         	movff	create_name@path+1,fsr2h
  4448  003B10  C00D  FFDE         	movff	??_create_name,postinc2
  4449  003B14  C00E  FFDD         	movff	??_create_name+1,postdec2
  4450                           
  4451                           ;ff.c: 2029:  c = (c <= ' ') ? 0x04 : 0;
  4452  003B18  0E20               	movlw	32
  4453  003B1A  641F               	cpfsgt	create_name@c,c
  4454  003B1C  D004               	goto	l5287
  4455  003B1E  0E00               	movlw	0
  4456  003B20  6E12               	movwf	_create_name$624+1,c
  4457  003B22  0E00               	movlw	0
  4458  003B24  D003               	goto	L5
  4459  003B26                     l5287:
  4460  003B26  0E00               	movlw	0
  4461  003B28  6E12               	movwf	_create_name$624+1,c
  4462  003B2A  0E04               	movlw	4
  4463  003B2C                     L5:
  4464  003B2C  6E11               	movwf	_create_name$624,c
  4465  003B2E  C011  F01F         	movff	_create_name$624,create_name@c
  4466                           
  4467                           ;ff.c: 2031:  if (!i) return FR_INVALID_NAME;
  4468  003B32  501D               	movf	create_name@i,w,c
  4469  003B34  101E               	iorwf	create_name@i+1,w,c
  4470  003B36  B4D8               	btfsc	status,2,c
  4471  003B38  D758               	goto	u6590
  4472                           
  4473                           ;ff.c: 2032:  if (sfn[0] == 0xE5) sfn[0] = 0x05;
  4474  003B3A  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4475  003B3E  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4476  003B42  0EE5               	movlw	229
  4477  003B44  18DE               	xorwf	postinc2,w,c
  4478  003B46  A4D8               	btfss	status,2,c
  4479  003B48  D006               	goto	l5301
  4480  003B4A  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4481  003B4E  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4482  003B52  0E05               	movlw	5
  4483  003B54  6EDF               	movwf	indf2,c
  4484  003B56                     l5301:
  4485                           
  4486                           ;ff.c: 2034:  if (ni == 8) b <<= 2;
  4487  003B56  0E08               	movlw	8
  4488  003B58  1816               	xorwf	create_name@ni,w,c
  4489  003B5A  1017               	iorwf	create_name@ni+1,w,c
  4490  003B5C  A4D8               	btfss	status,2,c
  4491  003B5E  D004               	goto	l456
  4492  003B60  90D8               	bcf	status,0,c
  4493  003B62  3615               	rlcf	create_name@b,f,c
  4494  003B64  90D8               	bcf	status,0,c
  4495  003B66  3615               	rlcf	create_name@b,f,c
  4496  003B68                     l456:
  4497                           
  4498                           ;ff.c: 2035:  if ((b & 0x03) == 0x01) c |= 0x10;
  4499  003B68  5015               	movf	create_name@b,w,c
  4500  003B6A  0B03               	andlw	3
  4501  003B6C  06E8               	decf	wreg,f,c
  4502  003B6E  B4D8               	btfsc	status,2,c
  4503  003B70  881F               	bsf	create_name@c,4,c
  4504                           
  4505                           ;ff.c: 2036:  if ((b & 0x0C) == 0x04) c |= 0x08;
  4506  003B72  5015               	movf	create_name@b,w,c
  4507  003B74  0B0C               	andlw	12
  4508  003B76  0A04               	xorlw	4
  4509  003B78  B4D8               	btfsc	status,2,c
  4510  003B7A  861F               	bsf	create_name@c,3,c
  4511                           
  4512                           ;ff.c: 2038:  sfn[11] = c;
  4513  003B7C  EE20 F00B          	lfsr	2,11
  4514  003B80  501B               	movf	create_name@sfn,w,c
  4515  003B82  26D9               	addwf	fsr2l,f,c
  4516  003B84  501C               	movf	create_name@sfn+1,w,c
  4517  003B86  22DA               	addwfc	fsr2h,f,c
  4518  003B88  C01F  FFDF         	movff	create_name@c,indf2
  4519                           
  4520                           ;ff.c: 2040:  return FR_OK;
  4521  003B8C  0E00               	movlw	0
  4522  003B8E  0012               	return		;funcret
  4523  003B90                     __end_of_create_name:
  4524                           	opt callstack 0
  4525                           
  4526 ;; *************** function _chk_chr *****************
  4527 ;; Defined at:
  4528 ;;		line 543 in file "ff.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;  str             2    0[COMRAM] PTR const unsigned char 
  4531 ;;		 -> STR_2(15), 
  4532 ;;  chr             2    2[COMRAM] int 
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;		None
  4535 ;; Return value:  Size  Location     Type
  4536 ;;                  2    0[COMRAM] int 
  4537 ;; Registers used:
  4538 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4539 ;; Tracked objects:
  4540 ;;		On entry : 0/0
  4541 ;;		On exit  : 0/0
  4542 ;;		Unchanged: 0/0
  4543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4544 ;;      Params:         4       0       0       0       0       0       0       0       0
  4545 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4546 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4547 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4548 ;;Total ram usage:        6 bytes
  4549 ;; Hardware stack levels used:    1
  4550 ;; This function calls:
  4551 ;;		Nothing
  4552 ;; This function is called by:
  4553 ;;		_create_name
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           	psect	text11
  4558  0053E6                     __ptext11:
  4559                           	opt callstack 0
  4560  0053E6                     _chk_chr:
  4561                           	opt callstack 26
  4562                           
  4563                           ;ff.c: 544:  while (*str && *str != chr) str++;
  4564                           
  4565                           ;incstack = 0
  4566  0053E6  D002               	goto	l4771
  4567  0053E8                     l4769:
  4568  0053E8  4A01               	infsnz	chk_chr@str,f,c
  4569  0053EA  2A02               	incf	chk_chr@str+1,f,c
  4570  0053EC                     l4771:
  4571  0053EC  C001  FFF6         	movff	chk_chr@str,tblptrl
  4572  0053F0  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4573  0053F4                     	if	0	;tblptru may be non-zero
  4574  0053F4                     	endif
  4575  0053F4                     	if	0	;tblptru may be non-zero
  4576  0053F4                     	endif
  4577  0053F4  0008               	tblrd		*
  4578  0053F6  50F5               	movf	tablat,w,c
  4579  0053F8  0900               	iorlw	0
  4580  0053FA  B4D8               	btfsc	status,2,c
  4581  0053FC  D00F               	goto	u5790
  4582  0053FE  C001  FFF6         	movff	chk_chr@str,tblptrl
  4583  005402  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4584  005406                     	if	0	;tblptru may be non-zero
  4585  005406                     	endif
  4586  005406                     	if	0	;tblptru may be non-zero
  4587  005406                     	endif
  4588  005406  0008               	tblrd		*
  4589  005408  50F5               	movf	tablat,w,c
  4590  00540A  6E05               	movwf	??_chk_chr& (0+255),c
  4591  00540C  6A06               	clrf	(??_chk_chr+1)& (0+255),c
  4592  00540E  5003               	movf	chk_chr@chr,w,c
  4593  005410  1805               	xorwf	??_chk_chr,w,c
  4594  005412  E1EA               	bnz	l4769
  4595  005414  5004               	movf	chk_chr@chr+1,w,c
  4596  005416  1806               	xorwf	??_chk_chr+1,w,c
  4597  005418  A4D8               	btfss	status,2,c
  4598  00541A  D7E6               	goto	l4769
  4599  00541C                     u5790:
  4600                           
  4601                           ;ff.c: 545:  return *str;
  4602  00541C  C001  FFF6         	movff	chk_chr@str,tblptrl
  4603  005420  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4604  005424                     	if	0	;tblptru may be non-zero
  4605  005424                     	endif
  4606  005424                     	if	0	;tblptru may be non-zero
  4607  005424                     	endif
  4608  005424  0008               	tblrd		*
  4609  005426  50F5               	movf	tablat,w,c
  4610  005428  6E01               	movwf	?_chk_chr,c
  4611  00542A  6A02               	clrf	?_chk_chr+1,c
  4612  00542C  0012               	return		;funcret
  4613  00542E                     __end_of_chk_chr:
  4614                           	opt callstack 0
  4615                           
  4616 ;; *************** function _dir_register *****************
  4617 ;; Defined at:
  4618 ;;		line 1578 in file "ff.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;  dp              2   42[BANK0 ] PTR struct .
  4621 ;;		 -> f_open@dj(22), 
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;  res             1   44[BANK0 ] enum E93
  4624 ;; Return value:  Size  Location     Type
  4625 ;;                  1    wreg      enum E93
  4626 ;; Registers used:
  4627 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4633 ;;      Params:         0       2       0       0       0       0       0       0       0
  4634 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4635 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4636 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4637 ;;Total ram usage:        3 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; Hardware stack levels required when called:   12
  4640 ;; This function calls:
  4641 ;;		_dir_alloc
  4642 ;;		_mem_cpy
  4643 ;;		_mem_set
  4644 ;;		_move_window
  4645 ;; This function is called by:
  4646 ;;		_f_open
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           	psect	text12
  4651  004A78                     __ptext12:
  4652                           	opt callstack 0
  4653  004A78                     _dir_register:
  4654                           	opt callstack 16
  4655                           
  4656                           ;ff.c: 1579:  DIRC* dp;ff.c: 1581: {;ff.c: 1582:  FRESULT res;;ff.c: 1629:  res = dir_al
      +                          loc(dp, 1);
  4657                           
  4658                           ;incstack = 0
  4659  004A78  C08A  F080         	movff	dir_register@dp,dir_alloc@dp
  4660  004A7C  C08B  F081         	movff	dir_register@dp+1,dir_alloc@dp+1
  4661  004A80  0E00               	movlw	0
  4662  004A82  0100               	movlb	0	; () banked
  4663  004A84  6F83               	movwf	(dir_alloc@nent+1)& (0+255),b
  4664  004A86  0E01               	movlw	1
  4665  004A88  6F82               	movwf	dir_alloc@nent& (0+255),b
  4666  004A8A  EC69  F023         	call	_dir_alloc	;wreg free
  4667  004A8E  0100               	movlb	0	; () banked
  4668  004A90  6F8C               	movwf	dir_register@res& (0+255),b
  4669                           
  4670                           ; BSR set to: 0
  4671                           ;ff.c: 1632:  if (res == FR_OK) {
  4672  004A92  518C               	movf	dir_register@res& (0+255),w,b
  4673  004A94  A4D8               	btfss	status,2,c
  4674  004A96  D058               	goto	l5483
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;ff.c: 1633:   res = move_window(dp->fs, dp->sect);
  4678  004A98  C08A  FFD9         	movff	dir_register@dp,fsr2l
  4679  004A9C  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  4680  004AA0  CFDE F030          	movff	postinc2,move_window@fs
  4681  004AA4  CFDD F031          	movff	postdec2,move_window@fs+1
  4682  004AA8  EE20 F00E          	lfsr	2,14
  4683  004AAC  518A               	movf	dir_register@dp& (0+255),w,b
  4684  004AAE  26D9               	addwf	fsr2l,f,c
  4685  004AB0  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4686  004AB2  22DA               	addwfc	fsr2h,f,c
  4687  004AB4  CFDE F032          	movff	postinc2,move_window@sector
  4688  004AB8  CFDE F033          	movff	postinc2,move_window@sector+1
  4689  004ABC  CFDE F034          	movff	postinc2,move_window@sector+2
  4690  004AC0  CFDE F035          	movff	postinc2,move_window@sector+3
  4691  004AC4  EC27  F027         	call	_move_window	;wreg free
  4692  004AC8  0100               	movlb	0	; () banked
  4693  004ACA  6F8C               	movwf	dir_register@res& (0+255),b
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;ff.c: 1634:   if (res == FR_OK) {
  4697  004ACC  518C               	movf	dir_register@res& (0+255),w,b
  4698  004ACE  A4D8               	btfss	status,2,c
  4699  004AD0  D03B               	goto	l5483
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;ff.c: 1635:    mem_set(dp->dir, 0, 32);
  4703  004AD2  EE20 F012          	lfsr	2,18
  4704  004AD6  518A               	movf	dir_register@dp& (0+255),w,b
  4705  004AD8  26D9               	addwf	fsr2l,f,c
  4706  004ADA  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4707  004ADC  22DA               	addwfc	fsr2h,f,c
  4708  004ADE  CFDE F001          	movff	postinc2,mem_set@dst
  4709  004AE2  CFDD F002          	movff	postdec2,mem_set@dst+1
  4710  004AE6  0E00               	movlw	0
  4711  004AE8  6E04               	movwf	mem_set@val+1,c
  4712  004AEA  0E00               	movlw	0
  4713  004AEC  6E03               	movwf	mem_set@val,c
  4714  004AEE  0E00               	movlw	0
  4715  004AF0  6E06               	movwf	mem_set@cnt+1,c
  4716  004AF2  0E20               	movlw	32
  4717  004AF4  6E05               	movwf	mem_set@cnt,c
  4718  004AF6  EC8F  F02A         	call	_mem_set	;wreg free
  4719                           
  4720                           ;ff.c: 1636:    mem_cpy(dp->dir, dp->fn, 11);
  4721  004AFA  0100               	movlb	0	; () banked
  4722  004AFC  EE20 F012          	lfsr	2,18
  4723  004B00  518A               	movf	dir_register@dp& (0+255),w,b
  4724  004B02  26D9               	addwf	fsr2l,f,c
  4725  004B04  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4726  004B06  22DA               	addwfc	fsr2h,f,c
  4727  004B08  CFDE F001          	movff	postinc2,mem_cpy@dst
  4728  004B0C  CFDD F002          	movff	postdec2,mem_cpy@dst+1
  4729  004B10  EE20 F014          	lfsr	2,20
  4730  004B14  518A               	movf	dir_register@dp& (0+255),w,b
  4731  004B16  26D9               	addwf	fsr2l,f,c
  4732  004B18  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4733  004B1A  22DA               	addwfc	fsr2h,f,c
  4734  004B1C  CFDE F003          	movff	postinc2,mem_cpy@src
  4735  004B20  CFDD F004          	movff	postdec2,mem_cpy@src+1
  4736  004B24  0E00               	movlw	0
  4737  004B26  6E06               	movwf	mem_cpy@cnt+1,c
  4738  004B28  0E0B               	movlw	11
  4739  004B2A  6E05               	movwf	mem_cpy@cnt,c
  4740  004B2C  EC85  F028         	call	_mem_cpy	;wreg free
  4741                           
  4742                           ;ff.c: 1640:    dp->fs->wflag = 1;
  4743  004B30  C08A  FFD9         	movff	dir_register@dp,fsr2l
  4744  004B34  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  4745  004B38  EE10 F004          	lfsr	1,4
  4746  004B3C  50DE               	movf	postinc2,w,c
  4747  004B3E  26E1               	addwf	fsr1l,f,c
  4748  004B40  50DD               	movf	postdec2,w,c
  4749  004B42  22E2               	addwfc	fsr1h,f,c
  4750  004B44  0E01               	movlw	1
  4751  004B46  6EE7               	movwf	indf1,c
  4752  004B48                     l5483:
  4753                           
  4754                           ;ff.c: 1644:  return res;
  4755  004B48  0100               	movlb	0	; () banked
  4756  004B4A  518C               	movf	dir_register@res& (0+255),w,b
  4757                           
  4758                           ; BSR set to: 0
  4759  004B4C  0012               	return		;funcret
  4760  004B4E                     __end_of_dir_register:
  4761                           	opt callstack 0
  4762                           
  4763 ;; *************** function _mem_cpy *****************
  4764 ;; Defined at:
  4765 ;;		line 507 in file "ff.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;  dst             2    0[COMRAM] PTR void 
  4768 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
  4769 ;;  src             2    2[COMRAM] PTR const void 
  4770 ;;		 -> FatFs(558), main@letra(1), f_open@sfn(12), NULL(0), 
  4771 ;;  cnt             2    4[COMRAM] unsigned short 
  4772 ;; Auto vars:     Size  Location     Type
  4773 ;;  s               2    8[COMRAM] PTR const unsigned char 
  4774 ;;		 -> FatFs(558), main@letra(1), f_open@sfn(12), NULL(0), 
  4775 ;;  d               2    6[COMRAM] PTR unsigned char 
  4776 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
  4777 ;; Return value:  Size  Location     Type
  4778 ;;                  1    wreg      void 
  4779 ;; Registers used:
  4780 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4781 ;; Tracked objects:
  4782 ;;		On entry : 0/0
  4783 ;;		On exit  : 0/0
  4784 ;;		Unchanged: 0/0
  4785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4786 ;;      Params:         6       0       0       0       0       0       0       0       0
  4787 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4788 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4789 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4790 ;;Total ram usage:       10 bytes
  4791 ;; Hardware stack levels used:    1
  4792 ;; This function calls:
  4793 ;;		Nothing
  4794 ;; This function is called by:
  4795 ;;		_dir_register
  4796 ;;		_f_write
  4797 ;;		_f_read
  4798 ;; This function uses a non-reentrant model
  4799 ;;
  4800                           
  4801                           	psect	text13
  4802  00510A                     __ptext13:
  4803                           	opt callstack 0
  4804  00510A                     _mem_cpy:
  4805                           	opt callstack 28
  4806                           
  4807                           ;ff.c: 508:  BYTE *d = (BYTE*)dst;
  4808                           
  4809                           ; BSR set to: 0
  4810                           ;incstack = 0
  4811  00510A  C001  F007         	movff	mem_cpy@dst,mem_cpy@d
  4812  00510E  C002  F008         	movff	mem_cpy@dst+1,mem_cpy@d+1
  4813                           
  4814                           ;ff.c: 509:  const BYTE *s = (const BYTE*)src;
  4815  005112  C003  F009         	movff	mem_cpy@src,mem_cpy@s
  4816  005116  C004  F00A         	movff	mem_cpy@src+1,mem_cpy@s+1
  4817                           
  4818                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4819  00511A  D018               	goto	l5063
  4820  00511C                     l5055:
  4821                           
  4822                           ;ff.c: 513:   *(int*)d = *(int*)s;
  4823  00511C  C009  FFD9         	movff	mem_cpy@s,fsr2l
  4824  005120  C00A  FFDA         	movff	mem_cpy@s+1,fsr2h
  4825  005124  C007  FFE1         	movff	mem_cpy@d,fsr1l
  4826  005128  C008  FFE2         	movff	mem_cpy@d+1,fsr1h
  4827  00512C  CFDE FFE6          	movff	postinc2,postinc1
  4828  005130  CFDD FFE5          	movff	postdec2,postdec1
  4829                           
  4830                           ;ff.c: 514:   d += sizeof (int); s += sizeof (int);
  4831  005134  0E02               	movlw	2
  4832  005136  2607               	addwf	mem_cpy@d,f,c
  4833  005138  0E00               	movlw	0
  4834  00513A  2208               	addwfc	mem_cpy@d+1,f,c
  4835  00513C  0E02               	movlw	2
  4836  00513E  2609               	addwf	mem_cpy@s,f,c
  4837  005140  0E00               	movlw	0
  4838  005142  220A               	addwfc	mem_cpy@s+1,f,c
  4839                           
  4840                           ;ff.c: 515:   cnt -= sizeof (int);
  4841  005144  0E02               	movlw	2
  4842  005146  5E05               	subwf	mem_cpy@cnt,f,c
  4843  005148  0E00               	movlw	0
  4844  00514A  5A06               	subwfb	mem_cpy@cnt+1,f,c
  4845  00514C                     l5063:
  4846                           
  4847                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4848  00514C  5006               	movf	mem_cpy@cnt+1,w,c
  4849  00514E  E1E6               	bnz	l5055
  4850  005150  0E02               	movlw	2
  4851  005152  5C05               	subwf	mem_cpy@cnt,w,c
  4852  005154  A0D8               	btfss	status,0,c
  4853  005156  D00F               	goto	l5071
  4854  005158  D7E1               	goto	l5055
  4855  00515A                     l5065:
  4856                           
  4857                           ;ff.c: 519:   *d++ = *s++;
  4858  00515A  C009  FFD9         	movff	mem_cpy@s,fsr2l
  4859  00515E  C00A  FFDA         	movff	mem_cpy@s+1,fsr2h
  4860  005162  C007  FFE1         	movff	mem_cpy@d,fsr1l
  4861  005166  C008  FFE2         	movff	mem_cpy@d+1,fsr1h
  4862  00516A  CFDF FFE7          	movff	indf2,indf1
  4863  00516E  4A09               	infsnz	mem_cpy@s,f,c
  4864  005170  2A0A               	incf	mem_cpy@s+1,f,c
  4865  005172  4A07               	infsnz	mem_cpy@d,f,c
  4866  005174  2A08               	incf	mem_cpy@d+1,f,c
  4867  005176                     l5071:
  4868                           
  4869                           ;ff.c: 518:  while (cnt--)
  4870  005176  0605               	decf	mem_cpy@cnt,f,c
  4871  005178  A0D8               	btfss	status,0,c
  4872  00517A  0606               	decf	mem_cpy@cnt+1,f,c
  4873  00517C  2805               	incf	mem_cpy@cnt,w,c
  4874  00517E  E1ED               	bnz	l5065
  4875  005180  2806               	incf	mem_cpy@cnt+1,w,c
  4876  005182  B4D8               	btfsc	status,2,c
  4877  005184  0012               	return	
  4878  005186  D7E9               	goto	l5065
  4879  005188                     __end_of_mem_cpy:
  4880                           	opt callstack 0
  4881                           
  4882 ;; *************** function _dir_alloc *****************
  4883 ;; Defined at:
  4884 ;;		line 1199 in file "ff.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;  dp              2   32[BANK0 ] PTR struct .
  4887 ;;		 -> f_open@dj(22), 
  4888 ;;  nent            2   34[BANK0 ] unsigned short 
  4889 ;; Auto vars:     Size  Location     Type
  4890 ;;  n               2   39[BANK0 ] unsigned short 
  4891 ;;  res             1   41[BANK0 ] enum E93
  4892 ;; Return value:  Size  Location     Type
  4893 ;;                  1    wreg      enum E93
  4894 ;; Registers used:
  4895 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4896 ;; Tracked objects:
  4897 ;;		On entry : 0/0
  4898 ;;		On exit  : 0/0
  4899 ;;		Unchanged: 0/0
  4900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4901 ;;      Params:         0       4       0       0       0       0       0       0       0
  4902 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4903 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4904 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4905 ;;Total ram usage:       10 bytes
  4906 ;; Hardware stack levels used:    1
  4907 ;; Hardware stack levels required when called:   11
  4908 ;; This function calls:
  4909 ;;		_dir_next
  4910 ;;		_dir_sdi
  4911 ;;		_move_window
  4912 ;; This function is called by:
  4913 ;;		_dir_register
  4914 ;; This function uses a non-reentrant model
  4915 ;;
  4916                           
  4917                           	psect	text14
  4918  0046D2                     __ptext14:
  4919                           	opt callstack 0
  4920  0046D2                     _dir_alloc:
  4921                           	opt callstack 16
  4922                           
  4923                           ;ff.c: 1200:  DIRC* dp,;ff.c: 1201:  UINT nent;ff.c: 1203: {;ff.c: 1204:  FRESULT res;;f
      +                          f.c: 1205:  UINT n;;ff.c: 1208:  res = dir_sdi(dp, 0);
  4924                           
  4925                           ;incstack = 0
  4926  0046D2  C080  F056         	movff	dir_alloc@dp,dir_sdi@dp
  4927  0046D6  C081  F057         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  4928  0046DA  0E00               	movlw	0
  4929  0046DC  6E59               	movwf	dir_sdi@idx+1,c
  4930  0046DE  0E00               	movlw	0
  4931  0046E0  6E58               	movwf	dir_sdi@idx,c
  4932  0046E2  EC25  F01B         	call	_dir_sdi	;wreg free
  4933  0046E6  0100               	movlb	0	; () banked
  4934  0046E8  6F89               	movwf	dir_alloc@res& (0+255),b
  4935                           
  4936                           ; BSR set to: 0
  4937                           ;ff.c: 1209:  if (res == FR_OK) {
  4938  0046EA  5189               	movf	dir_alloc@res& (0+255),w,b
  4939  0046EC  A4D8               	btfss	status,2,c
  4940  0046EE  D061               	goto	u6420
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;ff.c: 1210:   n = 0;
  4944  0046F0  0E00               	movlw	0
  4945  0046F2  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  4946  0046F4  0E00               	movlw	0
  4947  0046F6  6F87               	movwf	dir_alloc@n& (0+255),b
  4948  0046F8                     l5109:
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;ff.c: 1212:    res = move_window(dp->fs, dp->sect);
  4952  0046F8  C080  FFD9         	movff	dir_alloc@dp,fsr2l
  4953  0046FC  C081  FFDA         	movff	dir_alloc@dp+1,fsr2h
  4954  004700  CFDE F030          	movff	postinc2,move_window@fs
  4955  004704  CFDD F031          	movff	postdec2,move_window@fs+1
  4956  004708  EE20 F00E          	lfsr	2,14
  4957  00470C  5180               	movf	dir_alloc@dp& (0+255),w,b
  4958  00470E  26D9               	addwf	fsr2l,f,c
  4959  004710  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4960  004712  22DA               	addwfc	fsr2h,f,c
  4961  004714  CFDE F032          	movff	postinc2,move_window@sector
  4962  004718  CFDE F033          	movff	postinc2,move_window@sector+1
  4963  00471C  CFDE F034          	movff	postinc2,move_window@sector+2
  4964  004720  CFDE F035          	movff	postinc2,move_window@sector+3
  4965  004724  EC27  F027         	call	_move_window	;wreg free
  4966  004728  0100               	movlb	0	; () banked
  4967  00472A  6F89               	movwf	dir_alloc@res& (0+255),b
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;ff.c: 1213:    if (res != FR_OK) break;
  4971  00472C  5189               	movf	dir_alloc@res& (0+255),w,b
  4972  00472E  A4D8               	btfss	status,2,c
  4973  004730  D040               	goto	u6420
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;ff.c: 1214:    if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  4977  004732  EE20 F012          	lfsr	2,18
  4978  004736  5180               	movf	dir_alloc@dp& (0+255),w,b
  4979  004738  26D9               	addwf	fsr2l,f,c
  4980  00473A  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4981  00473C  22DA               	addwfc	fsr2h,f,c
  4982  00473E  CFDE F084          	movff	postinc2,??_dir_alloc
  4983  004742  CFDD F085          	movff	postdec2,??_dir_alloc+1
  4984  004746  C084  FFD9         	movff	??_dir_alloc,fsr2l
  4985  00474A  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  4986  00474E  0EE5               	movlw	229
  4987  004750  18DE               	xorwf	postinc2,w,c
  4988  004752  B4D8               	btfsc	status,2,c
  4989  004754  D011               	goto	u6400
  4990                           
  4991                           ; BSR set to: 0
  4992  004756  EE20 F012          	lfsr	2,18
  4993  00475A  5180               	movf	dir_alloc@dp& (0+255),w,b
  4994  00475C  26D9               	addwf	fsr2l,f,c
  4995  00475E  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4996  004760  22DA               	addwfc	fsr2h,f,c
  4997  004762  CFDE F084          	movff	postinc2,??_dir_alloc
  4998  004766  CFDD F085          	movff	postdec2,??_dir_alloc+1
  4999  00476A  C084  FFD9         	movff	??_dir_alloc,fsr2l
  5000  00476E  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  5001  004772  50DF               	movf	indf2,w,c
  5002  004774  A4D8               	btfss	status,2,c
  5003  004776  D00A               	goto	l5123
  5004  004778                     u6400:
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;ff.c: 1215:     if (++n == nent) break;
  5008  004778  4B87               	infsnz	dir_alloc@n& (0+255),f,b
  5009  00477A  2B88               	incf	(dir_alloc@n+1)& (0+255),f,b
  5010  00477C  5182               	movf	dir_alloc@nent& (0+255),w,b
  5011  00477E  1987               	xorwf	dir_alloc@n& (0+255),w,b
  5012  004780  E109               	bnz	l5125
  5013  004782  5183               	movf	(dir_alloc@nent+1)& (0+255),w,b
  5014  004784  1988               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  5015  004786  B4D8               	btfsc	status,2,c
  5016  004788  D014               	goto	u6420
  5017  00478A  D004               	goto	l5125
  5018  00478C                     l5123:
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;ff.c: 1217:     n = 0;
  5022  00478C  0E00               	movlw	0
  5023  00478E  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  5024  004790  0E00               	movlw	0
  5025  004792  6F87               	movwf	dir_alloc@n& (0+255),b
  5026  004794                     l5125:
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;ff.c: 1219:    res = dir_next(dp, 1);
  5030  004794  C080  F06D         	movff	dir_alloc@dp,dir_next@dp
  5031  004798  C081  F06E         	movff	dir_alloc@dp+1,dir_next@dp+1
  5032  00479C  0E00               	movlw	0
  5033  00479E  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  5034  0047A0  0E01               	movlw	1
  5035  0047A2  6F6F               	movwf	dir_next@stretch& (0+255),b
  5036  0047A4  EC09  F014         	call	_dir_next	;wreg free
  5037  0047A8  0100               	movlb	0	; () banked
  5038  0047AA  6F89               	movwf	dir_alloc@res& (0+255),b
  5039                           
  5040                           ; BSR set to: 0
  5041                           ;ff.c: 1220:   } while (res == FR_OK);
  5042  0047AC  5189               	movf	dir_alloc@res& (0+255),w,b
  5043  0047AE  B4D8               	btfsc	status,2,c
  5044  0047B0  D7A3               	goto	l5109
  5045  0047B2                     u6420:
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;ff.c: 1222:  if (res == FR_NO_FILE) res = FR_DENIED;
  5049  0047B2  0E04               	movlw	4
  5050  0047B4  1989               	xorwf	dir_alloc@res& (0+255),w,b
  5051  0047B6  A4D8               	btfss	status,2,c
  5052  0047B8  D002               	goto	l391
  5053                           
  5054                           ; BSR set to: 0
  5055  0047BA  0E07               	movlw	7
  5056  0047BC  6F89               	movwf	dir_alloc@res& (0+255),b
  5057  0047BE                     l391:
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;ff.c: 1223:  return res;
  5061  0047BE  5189               	movf	dir_alloc@res& (0+255),w,b
  5062                           
  5063                           ; BSR set to: 0
  5064  0047C0  0012               	return		;funcret
  5065  0047C2                     __end_of_dir_alloc:
  5066                           	opt callstack 0
  5067                           
  5068 ;; *************** function _dir_sdi *****************
  5069 ;; Defined at:
  5070 ;;		line 1080 in file "ff.c"
  5071 ;; Parameters:    Size  Location     Type
  5072 ;;  dp              2   85[COMRAM] PTR struct .
  5073 ;;		 -> f_open@dj(22), 
  5074 ;;  idx             2   87[COMRAM] unsigned short 
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;  clst            4   13[BANK0 ] unsigned long 
  5077 ;;  sect            4    9[BANK0 ] unsigned long 
  5078 ;;  ic              2    7[BANK0 ] unsigned short 
  5079 ;; Return value:  Size  Location     Type
  5080 ;;                  1    wreg      enum E93
  5081 ;; Registers used:
  5082 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5083 ;; Tracked objects:
  5084 ;;		On entry : 0/0
  5085 ;;		On exit  : 0/0
  5086 ;;		Unchanged: 0/0
  5087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5088 ;;      Params:         4       0       0       0       0       0       0       0       0
  5089 ;;      Locals:         0      10       0       0       0       0       0       0       0
  5090 ;;      Temps:          0       7       0       0       0       0       0       0       0
  5091 ;;      Totals:         4      17       0       0       0       0       0       0       0
  5092 ;;Total ram usage:       21 bytes
  5093 ;; Hardware stack levels used:    1
  5094 ;; Hardware stack levels required when called:    9
  5095 ;; This function calls:
  5096 ;;		_clust2sect
  5097 ;;		_get_fat
  5098 ;; This function is called by:
  5099 ;;		_dir_alloc
  5100 ;;		_dir_find
  5101 ;;		_follow_path
  5102 ;; This function uses a non-reentrant model
  5103 ;;
  5104                           
  5105                           	psect	text15
  5106  00364A                     __ptext15:
  5107                           	opt callstack 0
  5108  00364A                     _dir_sdi:
  5109                           	opt callstack 18
  5110                           
  5111                           ;ff.c: 1081:  DIRC* dp,;ff.c: 1082:  UINT idx;ff.c: 1084: {;ff.c: 1085:  DWORD clst, sec
      +                          t;;ff.c: 1086:  UINT ic;;ff.c: 1089:  dp->index = (WORD)idx;
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;incstack = 0
  5115  00364A  EE20 F004          	lfsr	2,4
  5116  00364E  5056               	movf	dir_sdi@dp,w,c
  5117  003650  26D9               	addwf	fsr2l,f,c
  5118  003652  5057               	movf	dir_sdi@dp+1,w,c
  5119  003654  22DA               	addwfc	fsr2h,f,c
  5120  003656  C058  FFDE         	movff	dir_sdi@idx,postinc2
  5121  00365A  C059  FFDD         	movff	dir_sdi@idx+1,postdec2
  5122                           
  5123                           ;ff.c: 1090:  clst = dp->sclust;
  5124  00365E  EE20 F006          	lfsr	2,6
  5125  003662  5056               	movf	dir_sdi@dp,w,c
  5126  003664  26D9               	addwf	fsr2l,f,c
  5127  003666  5057               	movf	dir_sdi@dp+1,w,c
  5128  003668  22DA               	addwfc	fsr2h,f,c
  5129  00366A  CFDE F06D          	movff	postinc2,dir_sdi@clst
  5130  00366E  CFDE F06E          	movff	postinc2,dir_sdi@clst+1
  5131  003672  CFDE F06F          	movff	postinc2,dir_sdi@clst+2
  5132  003676  CFDE F070          	movff	postinc2,dir_sdi@clst+3
  5133                           
  5134                           ;ff.c: 1091:  if (clst == 1 || clst >= dp->fs->n_fatent)
  5135  00367A  0100               	movlb	0	; () banked
  5136  00367C  056D               	decf	dir_sdi@clst& (0+255),w,b
  5137  00367E  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5138  003680  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5139  003682  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5140  003684  B4D8               	btfsc	status,2,c
  5141  003686  D014               	goto	u5810
  5142                           
  5143                           ; BSR set to: 0
  5144  003688  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5145  00368C  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5146  003690  EE10 F012          	lfsr	1,18
  5147  003694  50DE               	movf	postinc2,w,c
  5148  003696  26E1               	addwf	fsr1l,f,c
  5149  003698  50DD               	movf	postdec2,w,c
  5150  00369A  22E2               	addwfc	fsr1h,f,c
  5151  00369C  50E6               	movf	postinc1,w,c
  5152  00369E  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5153  0036A0  50E6               	movf	postinc1,w,c
  5154  0036A2  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  5155  0036A4  50E6               	movf	postinc1,w,c
  5156  0036A6  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  5157  0036A8  50E6               	movf	postinc1,w,c
  5158  0036AA  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  5159  0036AC  A0D8               	btfss	status,0,c
  5160  0036AE  D002               	goto	l4789
  5161  0036B0                     u5810:
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;ff.c: 1092:   return FR_INT_ERR;
  5165  0036B0  0E02               	movlw	2
  5166  0036B2  0012               	return	
  5167  0036B4                     l4789:
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;ff.c: 1093:  if (!clst && dp->fs->fs_type == 3)
  5171  0036B4  516D               	movf	dir_sdi@clst& (0+255),w,b
  5172  0036B6  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5173  0036B8  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5174  0036BA  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5175  0036BC  A4D8               	btfss	status,2,c
  5176  0036BE  D022               	goto	l4795
  5177                           
  5178                           ; BSR set to: 0
  5179  0036C0  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5180  0036C4  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5181  0036C8  CFDE F060          	movff	postinc2,??_dir_sdi
  5182  0036CC  CFDD F061          	movff	postdec2,??_dir_sdi+1
  5183  0036D0  C060  FFD9         	movff	??_dir_sdi,fsr2l
  5184  0036D4  C061  FFDA         	movff	??_dir_sdi+1,fsr2h
  5185  0036D8  0E03               	movlw	3
  5186  0036DA  18DE               	xorwf	postinc2,w,c
  5187  0036DC  A4D8               	btfss	status,2,c
  5188  0036DE  D012               	goto	l4795
  5189                           
  5190                           ; BSR set to: 0
  5191                           ;ff.c: 1094:   clst = dp->fs->dirbase;
  5192  0036E0  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5193  0036E4  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5194  0036E8  EE10 F022          	lfsr	1,34
  5195  0036EC  50DE               	movf	postinc2,w,c
  5196  0036EE  26E1               	addwf	fsr1l,f,c
  5197  0036F0  50DD               	movf	postdec2,w,c
  5198  0036F2  22E2               	addwfc	fsr1h,f,c
  5199  0036F4  CFE6 F06D          	movff	postinc1,dir_sdi@clst
  5200  0036F8  CFE6 F06E          	movff	postinc1,dir_sdi@clst+1
  5201  0036FC  CFE6 F06F          	movff	postinc1,dir_sdi@clst+2
  5202  003700  CFE6 F070          	movff	postinc1,dir_sdi@clst+3
  5203  003704                     l4795:
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;ff.c: 1096:  if (clst == 0) {
  5207  003704  516D               	movf	dir_sdi@clst& (0+255),w,b
  5208  003706  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5209  003708  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5210  00370A  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5211  00370C  A4D8               	btfss	status,2,c
  5212  00370E  D023               	goto	l4805
  5213                           
  5214                           ; BSR set to: 0
  5215                           ;ff.c: 1097:   if (idx >= dp->fs->n_rootdir)
  5216  003710  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5217  003714  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5218  003718  EE10 F008          	lfsr	1,8
  5219  00371C  50DE               	movf	postinc2,w,c
  5220  00371E  26E1               	addwf	fsr1l,f,c
  5221  003720  50DD               	movf	postdec2,w,c
  5222  003722  22E2               	addwfc	fsr1h,f,c
  5223  003724  50E6               	movf	postinc1,w,c
  5224  003726  5C58               	subwf	dir_sdi@idx,w,c
  5225  003728  50E6               	movf	postinc1,w,c
  5226  00372A  5859               	subwfb	dir_sdi@idx+1,w,c
  5227  00372C  B0D8               	btfsc	status,0,c
  5228  00372E  D7C0               	goto	u5810
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;ff.c: 1099:   sect = dp->fs->dirbase;
  5232  003730  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5233  003734  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5234  003738  EE10 F022          	lfsr	1,34
  5235  00373C  50DE               	movf	postinc2,w,c
  5236  00373E  26E1               	addwf	fsr1l,f,c
  5237  003740  50DD               	movf	postdec2,w,c
  5238  003742  22E2               	addwfc	fsr1h,f,c
  5239  003744  CFE6 F069          	movff	postinc1,dir_sdi@sect
  5240  003748  CFE6 F06A          	movff	postinc1,dir_sdi@sect+1
  5241  00374C  CFE6 F06B          	movff	postinc1,dir_sdi@sect+2
  5242  003750  CFE6 F06C          	movff	postinc1,dir_sdi@sect+3
  5243                           
  5244                           ;ff.c: 1100:  }
  5245  003754  D079               	goto	l4827
  5246  003756                     l4805:
  5247                           
  5248                           ; BSR set to: 0
  5249                           ;ff.c: 1102:   ic = ((UINT)512) / 32 * dp->fs->csize;
  5250  003756  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5251  00375A  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5252  00375E  EE10 F002          	lfsr	1,2
  5253  003762  50DE               	movf	postinc2,w,c
  5254  003764  26E1               	addwf	fsr1l,f,c
  5255  003766  50DD               	movf	postdec2,w,c
  5256  003768  22E2               	addwfc	fsr1h,f,c
  5257  00376A  50E7               	movf	indf1,w,c
  5258  00376C  6F60               	movwf	??_dir_sdi& (0+255),b
  5259  00376E  5160               	movf	??_dir_sdi& (0+255),w,b
  5260  003770  0D10               	mullw	16
  5261  003772  CFF3 F067          	movff	prodl,dir_sdi@ic
  5262  003776  CFF4 F068          	movff	prodh,dir_sdi@ic+1
  5263                           
  5264                           ;ff.c: 1103:   while (idx >= ic) {
  5265  00377A  D046               	goto	l349
  5266  00377C                     l4807:
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;ff.c: 1104:    clst = get_fat(dp->fs, clst);
  5270  00377C  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5271  003780  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5272  003784  CFDE F03B          	movff	postinc2,get_fat@fs
  5273  003788  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5274  00378C  C06D  F03D         	movff	dir_sdi@clst,get_fat@clst
  5275  003790  C06E  F03E         	movff	dir_sdi@clst+1,get_fat@clst+1
  5276  003794  C06F  F03F         	movff	dir_sdi@clst+2,get_fat@clst+2
  5277  003798  C070  F040         	movff	dir_sdi@clst+3,get_fat@clst+3
  5278  00379C  EC0C  F016         	call	_get_fat	;wreg free
  5279  0037A0  C03B  F06D         	movff	?_get_fat,dir_sdi@clst
  5280  0037A4  C03C  F06E         	movff	?_get_fat+1,dir_sdi@clst+1
  5281  0037A8  C03D  F06F         	movff	?_get_fat+2,dir_sdi@clst+2
  5282  0037AC  C03E  F070         	movff	?_get_fat+3,dir_sdi@clst+3
  5283                           
  5284                           ;ff.c: 1105:    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5285  0037B0  0100               	movlb	0	; () banked
  5286  0037B2  296D               	incf	dir_sdi@clst& (0+255),w,b
  5287  0037B4  E109               	bnz	l4815
  5288  0037B6  296E               	incf	(dir_sdi@clst+1)& (0+255),w,b
  5289  0037B8  E107               	bnz	l4815
  5290  0037BA  296F               	incf	(dir_sdi@clst+2)& (0+255),w,b
  5291  0037BC  E105               	bnz	l4815
  5292  0037BE  2970               	incf	(dir_sdi@clst+3)& (0+255),w,b
  5293  0037C0  A4D8               	btfss	status,2,c
  5294  0037C2  D002               	goto	l4815
  5295                           
  5296                           ; BSR set to: 0
  5297  0037C4  0E01               	movlw	1
  5298  0037C6  0012               	return	
  5299  0037C8                     l4815:
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;ff.c: 1106:    if (clst < 2 || clst >= dp->fs->n_fatent)
  5303  0037C8  5170               	movf	(dir_sdi@clst+3)& (0+255),w,b
  5304  0037CA  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5305  0037CC  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5306  0037CE  E104               	bnz	u5870
  5307  0037D0  0E02               	movlw	2
  5308  0037D2  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5309  0037D4  A0D8               	btfss	status,0,c
  5310  0037D6  D76C               	goto	u5810
  5311  0037D8                     u5870:
  5312                           
  5313                           ; BSR set to: 0
  5314  0037D8  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5315  0037DC  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5316  0037E0  EE10 F012          	lfsr	1,18
  5317  0037E4  50DE               	movf	postinc2,w,c
  5318  0037E6  26E1               	addwf	fsr1l,f,c
  5319  0037E8  50DD               	movf	postdec2,w,c
  5320  0037EA  22E2               	addwfc	fsr1h,f,c
  5321  0037EC  50E6               	movf	postinc1,w,c
  5322  0037EE  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5323  0037F0  50E6               	movf	postinc1,w,c
  5324  0037F2  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  5325  0037F4  50E6               	movf	postinc1,w,c
  5326  0037F6  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  5327  0037F8  50E6               	movf	postinc1,w,c
  5328  0037FA  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  5329  0037FC  B0D8               	btfsc	status,0,c
  5330  0037FE  D758               	goto	u5810
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;ff.c: 1108:    idx -= ic;
  5334  003800  5167               	movf	dir_sdi@ic& (0+255),w,b
  5335  003802  5E58               	subwf	dir_sdi@idx,f,c
  5336  003804  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5337  003806  5A59               	subwfb	dir_sdi@idx+1,f,c
  5338  003808                     l349:
  5339                           
  5340                           ; BSR set to: 0
  5341                           ;ff.c: 1103:   while (idx >= ic) {
  5342  003808  5167               	movf	dir_sdi@ic& (0+255),w,b
  5343  00380A  5C58               	subwf	dir_sdi@idx,w,c
  5344  00380C  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5345  00380E  5859               	subwfb	dir_sdi@idx+1,w,c
  5346  003810  B0D8               	btfsc	status,0,c
  5347  003812  D7B4               	goto	l4807
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;ff.c: 1110:   sect = clust2sect(dp->fs, clst);
  5351  003814  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5352  003818  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5353  00381C  CFDE F00D          	movff	postinc2,clust2sect@fs
  5354  003820  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5355  003824  C06D  F00F         	movff	dir_sdi@clst,clust2sect@clst
  5356  003828  C06E  F010         	movff	dir_sdi@clst+1,clust2sect@clst+1
  5357  00382C  C06F  F011         	movff	dir_sdi@clst+2,clust2sect@clst+2
  5358  003830  C070  F012         	movff	dir_sdi@clst+3,clust2sect@clst+3
  5359  003834  EC72  F026         	call	_clust2sect	;wreg free
  5360  003838  C00D  F069         	movff	?_clust2sect,dir_sdi@sect
  5361  00383C  C00E  F06A         	movff	?_clust2sect+1,dir_sdi@sect+1
  5362  003840  C00F  F06B         	movff	?_clust2sect+2,dir_sdi@sect+2
  5363  003844  C010  F06C         	movff	?_clust2sect+3,dir_sdi@sect+3
  5364  003848                     l4827:
  5365                           
  5366                           ;ff.c: 1112:  dp->clust = clst;
  5367  003848  EE20 F00A          	lfsr	2,10
  5368  00384C  5056               	movf	dir_sdi@dp,w,c
  5369  00384E  26D9               	addwf	fsr2l,f,c
  5370  003850  5057               	movf	dir_sdi@dp+1,w,c
  5371  003852  22DA               	addwfc	fsr2h,f,c
  5372  003854  C06D  FFDE         	movff	dir_sdi@clst,postinc2
  5373  003858  C06E  FFDE         	movff	dir_sdi@clst+1,postinc2
  5374  00385C  C06F  FFDE         	movff	dir_sdi@clst+2,postinc2
  5375  003860  C070  FFDE         	movff	dir_sdi@clst+3,postinc2
  5376                           
  5377                           ;ff.c: 1113:  if (!sect) return FR_INT_ERR;
  5378  003864  0100               	movlb	0	; () banked
  5379  003866  5169               	movf	dir_sdi@sect& (0+255),w,b
  5380  003868  116A               	iorwf	(dir_sdi@sect+1)& (0+255),w,b
  5381  00386A  116B               	iorwf	(dir_sdi@sect+2)& (0+255),w,b
  5382  00386C  116C               	iorwf	(dir_sdi@sect+3)& (0+255),w,b
  5383  00386E  B4D8               	btfsc	status,2,c
  5384  003870  D71F               	goto	u5810
  5385                           
  5386                           ; BSR set to: 0
  5387                           ;ff.c: 1114:  dp->sect = sect + idx / (((UINT)512) / 32);
  5388  003872  C058  F060         	movff	dir_sdi@idx,??_dir_sdi
  5389  003876  C059  F061         	movff	dir_sdi@idx+1,??_dir_sdi+1
  5390  00387A  0E04               	movlw	4
  5391  00387C  6F62               	movwf	(??_dir_sdi+2)& (0+255),b
  5392  00387E                     u5915:
  5393  00387E  90D8               	bcf	status,0,c
  5394  003880  3361               	rrcf	(??_dir_sdi+1)& (0+255),f,b
  5395  003882  3360               	rrcf	??_dir_sdi& (0+255),f,b
  5396  003884  2F62               	decfsz	(??_dir_sdi+2)& (0+255),f,b
  5397  003886  D7FB               	goto	u5915
  5398  003888  5160               	movf	??_dir_sdi& (0+255),w,b
  5399  00388A  2569               	addwf	dir_sdi@sect& (0+255),w,b
  5400  00388C  6F63               	movwf	(??_dir_sdi+3)& (0+255),b
  5401  00388E  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  5402  003890  216A               	addwfc	(dir_sdi@sect+1)& (0+255),w,b
  5403  003892  6F64               	movwf	(??_dir_sdi+4)& (0+255),b
  5404  003894  0E00               	movlw	0
  5405  003896  216B               	addwfc	(dir_sdi@sect+2)& (0+255),w,b
  5406  003898  6F65               	movwf	(??_dir_sdi+5)& (0+255),b
  5407  00389A  0E00               	movlw	0
  5408  00389C  216C               	addwfc	(dir_sdi@sect+3)& (0+255),w,b
  5409  00389E  6F66               	movwf	(??_dir_sdi+6)& (0+255),b
  5410  0038A0  EE20 F00E          	lfsr	2,14
  5411  0038A4  5056               	movf	dir_sdi@dp,w,c
  5412  0038A6  26D9               	addwf	fsr2l,f,c
  5413  0038A8  5057               	movf	dir_sdi@dp+1,w,c
  5414  0038AA  22DA               	addwfc	fsr2h,f,c
  5415  0038AC  C063  FFDE         	movff	??_dir_sdi+3,postinc2
  5416  0038B0  C064  FFDE         	movff	??_dir_sdi+4,postinc2
  5417  0038B4  C065  FFDE         	movff	??_dir_sdi+5,postinc2
  5418  0038B8  C066  FFDE         	movff	??_dir_sdi+6,postinc2
  5419                           
  5420                           ;ff.c: 1115:  dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  5421  0038BC  0E0F               	movlw	15
  5422  0038BE  1458               	andwf	dir_sdi@idx,w,c
  5423  0038C0  6F60               	movwf	??_dir_sdi& (0+255),b
  5424  0038C2  0E00               	movlw	0
  5425  0038C4  1459               	andwf	dir_sdi@idx+1,w,c
  5426  0038C6  6F61               	movwf	(??_dir_sdi+1)& (0+255),b
  5427  0038C8  0E05               	movlw	5
  5428  0038CA                     u5925:
  5429  0038CA  90D8               	bcf	status,0,c
  5430  0038CC  3760               	rlcf	??_dir_sdi& (0+255),f,b
  5431  0038CE  3761               	rlcf	(??_dir_sdi+1)& (0+255),f,b
  5432  0038D0  2EE8               	decfsz	wreg,f,c
  5433  0038D2  D7FB               	goto	u5925
  5434  0038D4  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5435  0038D8  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5436  0038DC  CFDE F062          	movff	postinc2,??_dir_sdi+2
  5437  0038E0  CFDD F063          	movff	postdec2,??_dir_sdi+3
  5438  0038E4  5160               	movf	??_dir_sdi& (0+255),w,b
  5439  0038E6  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  5440  0038E8  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  5441  0038EA  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  5442  0038EC  0E2E               	movlw	46
  5443  0038EE  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  5444  0038F0  0E00               	movlw	0
  5445  0038F2  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  5446  0038F4  EE20 F012          	lfsr	2,18
  5447  0038F8  5056               	movf	dir_sdi@dp,w,c
  5448  0038FA  26D9               	addwf	fsr2l,f,c
  5449  0038FC  5057               	movf	dir_sdi@dp+1,w,c
  5450  0038FE  22DA               	addwfc	fsr2h,f,c
  5451  003900  C062  FFDE         	movff	??_dir_sdi+2,postinc2
  5452  003904  C063  FFDD         	movff	??_dir_sdi+3,postdec2
  5453                           
  5454                           ; BSR set to: 0
  5455                           ;ff.c: 1117:  return FR_OK;
  5456  003908  0E00               	movlw	0
  5457                           
  5458                           ; BSR set to: 0
  5459  00390A  0012               	return		;funcret
  5460  00390C                     __end_of_dir_sdi:
  5461                           	opt callstack 0
  5462                           
  5463 ;; *************** function _dir_next *****************
  5464 ;; Defined at:
  5465 ;;		line 1128 in file "ff.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;  dp              2   13[BANK0 ] PTR struct .
  5468 ;;		 -> f_open@dj(22), 
  5469 ;;  stretch         2   15[BANK0 ] int 
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;  clst            4   28[BANK0 ] unsigned long 
  5472 ;;  i               2   26[BANK0 ] unsigned short 
  5473 ;;  c               2   24[BANK0 ] unsigned short 
  5474 ;; Return value:  Size  Location     Type
  5475 ;;                  1    wreg      enum E93
  5476 ;; Registers used:
  5477 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5478 ;; Tracked objects:
  5479 ;;		On entry : 0/0
  5480 ;;		On exit  : 0/0
  5481 ;;		Unchanged: 0/0
  5482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5483 ;;      Params:         0       4       0       0       0       0       0       0       0
  5484 ;;      Locals:         0       8       0       0       0       0       0       0       0
  5485 ;;      Temps:          0       7       0       0       0       0       0       0       0
  5486 ;;      Totals:         0      19       0       0       0       0       0       0       0
  5487 ;;Total ram usage:       19 bytes
  5488 ;; Hardware stack levels used:    1
  5489 ;; Hardware stack levels required when called:   10
  5490 ;; This function calls:
  5491 ;;		_clust2sect
  5492 ;;		_create_chain
  5493 ;;		_get_fat
  5494 ;;		_mem_set
  5495 ;;		_sync_window
  5496 ;; This function is called by:
  5497 ;;		_dir_alloc
  5498 ;;		_dir_find
  5499 ;; This function uses a non-reentrant model
  5500 ;;
  5501                           
  5502                           	psect	text16
  5503  002812                     __ptext16:
  5504                           	opt callstack 0
  5505  002812                     _dir_next:
  5506                           	opt callstack 16
  5507                           
  5508                           ;ff.c: 1129:  DIRC* dp,;ff.c: 1130:  int stretch;ff.c: 1132: {;ff.c: 1133:  DWORD clst;;
      +                          ff.c: 1134:  UINT i;;ff.c: 1136:  UINT c;;ff.c: 1140:  i = dp->index + 1;
  5509                           
  5510                           ; BSR set to: 0
  5511                           ;incstack = 0
  5512  002812  0100               	movlb	0	; () banked
  5513  002814  EE20 F004          	lfsr	2,4
  5514  002818  516D               	movf	dir_next@dp& (0+255),w,b
  5515  00281A  26D9               	addwf	fsr2l,f,c
  5516  00281C  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5517  00281E  22DA               	addwfc	fsr2h,f,c
  5518  002820  CFDE F071          	movff	postinc2,??_dir_next
  5519  002824  CFDD F072          	movff	postdec2,??_dir_next+1
  5520  002828  0E01               	movlw	1
  5521  00282A  2571               	addwf	??_dir_next& (0+255),w,b
  5522  00282C  6F7A               	movwf	dir_next@i& (0+255),b
  5523  00282E  0E00               	movlw	0
  5524  002830  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5525  002832  6F7B               	movwf	(dir_next@i+1)& (0+255),b
  5526                           
  5527                           ; BSR set to: 0
  5528                           ;ff.c: 1141:  if (!(i & 0xFFFF) || !dp->sect)
  5529  002834  517A               	movf	dir_next@i& (0+255),w,b
  5530  002836  117B               	iorwf	(dir_next@i+1)& (0+255),w,b
  5531  002838  B4D8               	btfsc	status,2,c
  5532  00283A  D00C               	goto	u5940
  5533                           
  5534                           ; BSR set to: 0
  5535  00283C  EE20 F00E          	lfsr	2,14
  5536  002840  516D               	movf	dir_next@dp& (0+255),w,b
  5537  002842  26D9               	addwf	fsr2l,f,c
  5538  002844  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5539  002846  22DA               	addwfc	fsr2h,f,c
  5540  002848  50DE               	movf	postinc2,w,c
  5541  00284A  10DE               	iorwf	postinc2,w,c
  5542  00284C  10DE               	iorwf	postinc2,w,c
  5543  00284E  10DE               	iorwf	postinc2,w,c
  5544  002850  A4D8               	btfss	status,2,c
  5545  002852  D002               	goto	l4851
  5546  002854                     u5940:
  5547                           
  5548                           ; BSR set to: 0
  5549                           ;ff.c: 1142:   return FR_NO_FILE;
  5550  002854  0E04               	movlw	4
  5551  002856  0012               	return	
  5552  002858                     l4851:
  5553                           
  5554                           ; BSR set to: 0
  5555                           ;ff.c: 1144:  if (!(i % (((UINT)512) / 32))) {
  5556  002858  0E0F               	movlw	15
  5557  00285A  157A               	andwf	dir_next@i& (0+255),w,b
  5558  00285C  6F71               	movwf	??_dir_next& (0+255),b
  5559  00285E  0E00               	movlw	0
  5560  002860  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  5561  002862  6F72               	movwf	(??_dir_next+1)& (0+255),b
  5562  002864  5171               	movf	??_dir_next& (0+255),w,b
  5563  002866  1172               	iorwf	(??_dir_next+1)& (0+255),w,b
  5564  002868  A4D8               	btfss	status,2,c
  5565  00286A  D1A4               	goto	l4937
  5566                           
  5567                           ; BSR set to: 0
  5568                           ;ff.c: 1145:   dp->sect++;
  5569  00286C  EE20 F00E          	lfsr	2,14
  5570  002870  516D               	movf	dir_next@dp& (0+255),w,b
  5571  002872  26D9               	addwf	fsr2l,f,c
  5572  002874  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5573  002876  22DA               	addwfc	fsr2h,f,c
  5574  002878  2ADE               	incf	postinc2,f,c
  5575  00287A  0E00               	movlw	0
  5576  00287C  22DE               	addwfc	postinc2,f,c
  5577  00287E  22DE               	addwfc	postinc2,f,c
  5578  002880  22DE               	addwfc	postinc2,f,c
  5579                           
  5580                           ;ff.c: 1147:   if (!dp->clust) {
  5581  002882  EE20 F00A          	lfsr	2,10
  5582  002886  516D               	movf	dir_next@dp& (0+255),w,b
  5583  002888  26D9               	addwf	fsr2l,f,c
  5584  00288A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5585  00288C  22DA               	addwfc	fsr2h,f,c
  5586  00288E  50DE               	movf	postinc2,w,c
  5587  002890  10DE               	iorwf	postinc2,w,c
  5588  002892  10DE               	iorwf	postinc2,w,c
  5589  002894  10DE               	iorwf	postinc2,w,c
  5590  002896  A4D8               	btfss	status,2,c
  5591  002898  D011               	goto	l4861
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;ff.c: 1148:    if (i >= dp->fs->n_rootdir)
  5595  00289A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5596  00289E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5597  0028A2  EE10 F008          	lfsr	1,8
  5598  0028A6  50DE               	movf	postinc2,w,c
  5599  0028A8  26E1               	addwf	fsr1l,f,c
  5600  0028AA  50DD               	movf	postdec2,w,c
  5601  0028AC  22E2               	addwfc	fsr1h,f,c
  5602  0028AE  50E6               	movf	postinc1,w,c
  5603  0028B0  5D7A               	subwf	dir_next@i& (0+255),w,b
  5604  0028B2  50E6               	movf	postinc1,w,c
  5605  0028B4  597B               	subwfb	(dir_next@i+1)& (0+255),w,b
  5606  0028B6  B0D8               	btfsc	status,0,c
  5607  0028B8  D7CD               	goto	u5940
  5608  0028BA  D17C               	goto	l4937
  5609  0028BC                     l4861:
  5610                           
  5611                           ; BSR set to: 0
  5612                           ;ff.c: 1152:    if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  5613  0028BC  C07A  F071         	movff	dir_next@i,??_dir_next
  5614  0028C0  C07B  F072         	movff	dir_next@i+1,??_dir_next+1
  5615  0028C4  0E04               	movlw	4
  5616  0028C6  6F73               	movwf	(??_dir_next+2)& (0+255),b
  5617  0028C8                     u5985:
  5618  0028C8  90D8               	bcf	status,0,c
  5619  0028CA  3372               	rrcf	(??_dir_next+1)& (0+255),f,b
  5620  0028CC  3371               	rrcf	??_dir_next& (0+255),f,b
  5621  0028CE  2F73               	decfsz	(??_dir_next+2)& (0+255),f,b
  5622  0028D0  D7FB               	goto	u5985
  5623  0028D2  0EFF               	movlw	255
  5624  0028D4  6F74               	movwf	(??_dir_next+3)& (0+255),b
  5625  0028D6  0EFF               	movlw	255
  5626  0028D8  6F75               	movwf	(??_dir_next+4)& (0+255),b
  5627  0028DA  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5628  0028DE  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5629  0028E2  EE10 F002          	lfsr	1,2
  5630  0028E6  50DE               	movf	postinc2,w,c
  5631  0028E8  26E1               	addwf	fsr1l,f,c
  5632  0028EA  50DD               	movf	postdec2,w,c
  5633  0028EC  22E2               	addwfc	fsr1h,f,c
  5634  0028EE  50E7               	movf	indf1,w,c
  5635  0028F0  6F76               	movwf	(??_dir_next+5)& (0+255),b
  5636  0028F2  6B77               	clrf	(??_dir_next+6)& (0+255),b
  5637  0028F4  5174               	movf	(??_dir_next+3)& (0+255),w,b
  5638  0028F6  2776               	addwf	(??_dir_next+5)& (0+255),f,b
  5639  0028F8  5175               	movf	(??_dir_next+4)& (0+255),w,b
  5640  0028FA  2377               	addwfc	(??_dir_next+6)& (0+255),f,b
  5641  0028FC  5171               	movf	??_dir_next& (0+255),w,b
  5642  0028FE  1776               	andwf	(??_dir_next+5)& (0+255),f,b
  5643  002900  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5644  002902  1777               	andwf	(??_dir_next+6)& (0+255),f,b
  5645  002904  5176               	movf	(??_dir_next+5)& (0+255),w,b
  5646  002906  1177               	iorwf	(??_dir_next+6)& (0+255),w,b
  5647  002908  A4D8               	btfss	status,2,c
  5648  00290A  D154               	goto	l4937
  5649                           
  5650                           ; BSR set to: 0
  5651                           ;ff.c: 1153:     clst = get_fat(dp->fs, dp->clust);
  5652  00290C  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5653  002910  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5654  002914  CFDE F03B          	movff	postinc2,get_fat@fs
  5655  002918  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5656  00291C  EE20 F00A          	lfsr	2,10
  5657  002920  516D               	movf	dir_next@dp& (0+255),w,b
  5658  002922  26D9               	addwf	fsr2l,f,c
  5659  002924  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5660  002926  22DA               	addwfc	fsr2h,f,c
  5661  002928  CFDE F03D          	movff	postinc2,get_fat@clst
  5662  00292C  CFDE F03E          	movff	postinc2,get_fat@clst+1
  5663  002930  CFDE F03F          	movff	postinc2,get_fat@clst+2
  5664  002934  CFDE F040          	movff	postinc2,get_fat@clst+3
  5665  002938  EC0C  F016         	call	_get_fat	;wreg free
  5666  00293C  C03B  F07C         	movff	?_get_fat,dir_next@clst
  5667  002940  C03C  F07D         	movff	?_get_fat+1,dir_next@clst+1
  5668  002944  C03D  F07E         	movff	?_get_fat+2,dir_next@clst+2
  5669  002948  C03E  F07F         	movff	?_get_fat+3,dir_next@clst+3
  5670                           
  5671                           ;ff.c: 1154:     if (clst <= 1) return FR_INT_ERR;
  5672  00294C  0100               	movlb	0	; () banked
  5673  00294E  517F               	movf	(dir_next@clst+3)& (0+255),w,b
  5674  002950  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5675  002952  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5676  002954  E106               	bnz	l4871
  5677  002956  0E02               	movlw	2
  5678  002958  5D7C               	subwf	dir_next@clst& (0+255),w,b
  5679  00295A  B0D8               	btfsc	status,0,c
  5680  00295C  D002               	goto	l4871
  5681  00295E                     u6000:
  5682                           
  5683                           ; BSR set to: 0
  5684  00295E  0E02               	movlw	2
  5685  002960  0012               	return	
  5686  002962                     l4871:
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;ff.c: 1155:     if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5690  002962  297C               	incf	dir_next@clst& (0+255),w,b
  5691  002964  E109               	bnz	l4877
  5692  002966  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  5693  002968  E107               	bnz	l4877
  5694  00296A  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  5695  00296C  E105               	bnz	l4877
  5696  00296E  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  5697  002970  A4D8               	btfss	status,2,c
  5698  002972  D002               	goto	l4877
  5699  002974                     u6010:
  5700  002974  0E01               	movlw	1
  5701  002976  0012               	return	
  5702  002978                     l4877:
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;ff.c: 1156:     if (clst >= dp->fs->n_fatent) {
  5706  002978  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5707  00297C  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5708  002980  EE10 F012          	lfsr	1,18
  5709  002984  50DE               	movf	postinc2,w,c
  5710  002986  26E1               	addwf	fsr1l,f,c
  5711  002988  50DD               	movf	postdec2,w,c
  5712  00298A  22E2               	addwfc	fsr1h,f,c
  5713  00298C  50E6               	movf	postinc1,w,c
  5714  00298E  5D7C               	subwf	dir_next@clst& (0+255),w,b
  5715  002990  50E6               	movf	postinc1,w,c
  5716  002992  597D               	subwfb	(dir_next@clst+1)& (0+255),w,b
  5717  002994  50E6               	movf	postinc1,w,c
  5718  002996  597E               	subwfb	(dir_next@clst+2)& (0+255),w,b
  5719  002998  50E6               	movf	postinc1,w,c
  5720  00299A  597F               	subwfb	(dir_next@clst+3)& (0+255),w,b
  5721  00299C  A0D8               	btfss	status,0,c
  5722  00299E  D0DB               	goto	l4933
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;ff.c: 1158:      if (!stretch) return FR_NO_FILE;
  5726  0029A0  516F               	movf	dir_next@stretch& (0+255),w,b
  5727  0029A2  1170               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  5728  0029A4  B4D8               	btfsc	status,2,c
  5729  0029A6  D756               	goto	u5940
  5730                           
  5731                           ; BSR set to: 0
  5732                           ;ff.c: 1159:      clst = create_chain(dp->fs, dp->clust);
  5733  0029A8  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5734  0029AC  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5735  0029B0  CFDE F056          	movff	postinc2,create_chain@fs
  5736  0029B4  CFDD F057          	movff	postdec2,create_chain@fs+1
  5737  0029B8  EE20 F00A          	lfsr	2,10
  5738  0029BC  516D               	movf	dir_next@dp& (0+255),w,b
  5739  0029BE  26D9               	addwf	fsr2l,f,c
  5740  0029C0  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5741  0029C2  22DA               	addwfc	fsr2h,f,c
  5742  0029C4  CFDE F058          	movff	postinc2,create_chain@clst
  5743  0029C8  CFDE F059          	movff	postinc2,create_chain@clst+1
  5744  0029CC  CFDE F05A          	movff	postinc2,create_chain@clst+2
  5745  0029D0  CFDE F05B          	movff	postinc2,create_chain@clst+3
  5746  0029D4  ECA8  F019         	call	_create_chain	;wreg free
  5747  0029D8  C056  F07C         	movff	?_create_chain,dir_next@clst
  5748  0029DC  C057  F07D         	movff	?_create_chain+1,dir_next@clst+1
  5749  0029E0  C058  F07E         	movff	?_create_chain+2,dir_next@clst+2
  5750  0029E4  C059  F07F         	movff	?_create_chain+3,dir_next@clst+3
  5751                           
  5752                           ;ff.c: 1160:      if (clst == 0) return FR_DENIED;
  5753  0029E8  0100               	movlb	0	; () banked
  5754  0029EA  517C               	movf	dir_next@clst& (0+255),w,b
  5755  0029EC  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5756  0029EE  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5757  0029F0  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5758  0029F2  A4D8               	btfss	status,2,c
  5759  0029F4  D002               	goto	l4893
  5760                           
  5761                           ; BSR set to: 0
  5762  0029F6  0E07               	movlw	7
  5763  0029F8  0012               	return	
  5764  0029FA                     l4893:
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;ff.c: 1161:      if (clst == 1) return FR_INT_ERR;
  5768  0029FA  057C               	decf	dir_next@clst& (0+255),w,b
  5769  0029FC  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5770  0029FE  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5771  002A00  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5772  002A02  B4D8               	btfsc	status,2,c
  5773  002A04  D7AC               	goto	u6000
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;ff.c: 1162:      if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5777  002A06  297C               	incf	dir_next@clst& (0+255),w,b
  5778  002A08  E107               	bnz	l4905
  5779  002A0A  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  5780  002A0C  E105               	bnz	l4905
  5781  002A0E  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  5782  002A10  E103               	bnz	l4905
  5783  002A12  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  5784  002A14  B4D8               	btfsc	status,2,c
  5785  002A16  D7AE               	goto	u6010
  5786  002A18                     l4905:
  5787                           
  5788                           ; BSR set to: 0
  5789                           ;ff.c: 1164:      if (sync_window(dp->fs)) return FR_DISK_ERR;
  5790  002A18  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5791  002A1C  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5792  002A20  CFDE F01B          	movff	postinc2,sync_window@fs
  5793  002A24  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5794  002A28  EC4C  F020         	call	_sync_window	;wreg free
  5795  002A2C  0900               	iorlw	0
  5796  002A2E  A4D8               	btfss	status,2,c
  5797  002A30  D7A1               	goto	u6010
  5798                           
  5799                           ;ff.c: 1165:      mem_set(dp->fs->win, 0, ((UINT)512));
  5800  002A32  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5801  002A36  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5802  002A3A  CFDE F071          	movff	postinc2,??_dir_next
  5803  002A3E  CFDD F072          	movff	postdec2,??_dir_next+1
  5804  002A42  0E2E               	movlw	46
  5805  002A44  0100               	movlb	0	; () banked
  5806  002A46  2571               	addwf	??_dir_next& (0+255),w,b
  5807  002A48  6E01               	movwf	mem_set@dst,c
  5808  002A4A  0E00               	movlw	0
  5809  002A4C  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5810  002A4E  6E02               	movwf	mem_set@dst+1,c
  5811  002A50  0E00               	movlw	0
  5812  002A52  6E04               	movwf	mem_set@val+1,c
  5813  002A54  0E00               	movlw	0
  5814  002A56  6E03               	movwf	mem_set@val,c
  5815  002A58  0E02               	movlw	2
  5816  002A5A  6E06               	movwf	mem_set@cnt+1,c
  5817  002A5C  0E00               	movlw	0
  5818  002A5E  6E05               	movwf	mem_set@cnt,c
  5819  002A60  EC8F  F02A         	call	_mem_set	;wreg free
  5820                           
  5821                           ;ff.c: 1166:      dp->fs->winsect = clust2sect(dp->fs, clst);
  5822  002A64  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5823  002A68  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5824  002A6C  CFDE F00D          	movff	postinc2,clust2sect@fs
  5825  002A70  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5826  002A74  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  5827  002A78  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  5828  002A7C  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  5829  002A80  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  5830  002A84  EC72  F026         	call	_clust2sect	;wreg free
  5831  002A88  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5832  002A8C  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5833  002A90  EE10 F02A          	lfsr	1,42
  5834  002A94  50DE               	movf	postinc2,w,c
  5835  002A96  26E1               	addwf	fsr1l,f,c
  5836  002A98  50DD               	movf	postdec2,w,c
  5837  002A9A  22E2               	addwfc	fsr1h,f,c
  5838  002A9C  C00D  FFE6         	movff	?_clust2sect,postinc1
  5839  002AA0  C00E  FFE6         	movff	?_clust2sect+1,postinc1
  5840  002AA4  C00F  FFE6         	movff	?_clust2sect+2,postinc1
  5841  002AA8  C010  FFE6         	movff	?_clust2sect+3,postinc1
  5842                           
  5843                           ;ff.c: 1167:      for (c = 0; c < dp->fs->csize; c++) {
  5844  002AAC  0E00               	movlw	0
  5845  002AAE  0100               	movlb	0	; () banked
  5846  002AB0  6F79               	movwf	(dir_next@c+1)& (0+255),b
  5847  002AB2  0E00               	movlw	0
  5848  002AB4  6F78               	movwf	dir_next@c& (0+255),b
  5849  002AB6  D02B               	goto	l4929
  5850  002AB8                     l4917:
  5851                           
  5852                           ; BSR set to: 0
  5853                           ;ff.c: 1168:       dp->fs->wflag = 1;
  5854  002AB8  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5855  002ABC  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5856  002AC0  EE10 F004          	lfsr	1,4
  5857  002AC4  50DE               	movf	postinc2,w,c
  5858  002AC6  26E1               	addwf	fsr1l,f,c
  5859  002AC8  50DD               	movf	postdec2,w,c
  5860  002ACA  22E2               	addwfc	fsr1h,f,c
  5861  002ACC  0E01               	movlw	1
  5862  002ACE  6EE7               	movwf	indf1,c
  5863                           
  5864                           ; BSR set to: 0
  5865                           ;ff.c: 1169:       if (sync_window(dp->fs)) return FR_DISK_ERR;
  5866  002AD0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5867  002AD4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5868  002AD8  CFDE F01B          	movff	postinc2,sync_window@fs
  5869  002ADC  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5870  002AE0  EC4C  F020         	call	_sync_window	;wreg free
  5871  002AE4  0900               	iorlw	0
  5872  002AE6  A4D8               	btfss	status,2,c
  5873  002AE8  D745               	goto	u6010
  5874                           
  5875                           ;ff.c: 1170:       dp->fs->winsect++;
  5876  002AEA  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5877  002AEE  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5878  002AF2  EE10 F02A          	lfsr	1,42
  5879  002AF6  50DE               	movf	postinc2,w,c
  5880  002AF8  26E1               	addwf	fsr1l,f,c
  5881  002AFA  50DD               	movf	postdec2,w,c
  5882  002AFC  22E2               	addwfc	fsr1h,f,c
  5883  002AFE  2AE6               	incf	postinc1,f,c
  5884  002B00  0E00               	movlw	0
  5885  002B02  22E6               	addwfc	postinc1,f,c
  5886  002B04  22E6               	addwfc	postinc1,f,c
  5887  002B06  22E6               	addwfc	postinc1,f,c
  5888                           
  5889                           ;ff.c: 1171:      }
  5890  002B08  0100               	movlb	0	; () banked
  5891  002B0A  4B78               	infsnz	dir_next@c& (0+255),f,b
  5892  002B0C  2B79               	incf	(dir_next@c+1)& (0+255),f,b
  5893  002B0E                     l4929:
  5894                           
  5895                           ; BSR set to: 0
  5896  002B0E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5897  002B12  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5898  002B16  EE10 F002          	lfsr	1,2
  5899  002B1A  50DE               	movf	postinc2,w,c
  5900  002B1C  26E1               	addwf	fsr1l,f,c
  5901  002B1E  50DD               	movf	postdec2,w,c
  5902  002B20  22E2               	addwfc	fsr1h,f,c
  5903  002B22  50E7               	movf	indf1,w,c
  5904  002B24  6F71               	movwf	??_dir_next& (0+255),b
  5905  002B26  6B72               	clrf	(??_dir_next+1)& (0+255),b
  5906  002B28  5171               	movf	??_dir_next& (0+255),w,b
  5907  002B2A  5D78               	subwf	dir_next@c& (0+255),w,b
  5908  002B2C  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5909  002B2E  5979               	subwfb	(dir_next@c+1)& (0+255),w,b
  5910  002B30  A0D8               	btfss	status,0,c
  5911  002B32  D7C2               	goto	l4917
  5912                           
  5913                           ; BSR set to: 0
  5914                           ;ff.c: 1172:      dp->fs->winsect -= c;
  5915  002B34  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5916  002B38  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5917  002B3C  EE10 F02A          	lfsr	1,42
  5918  002B40  50DE               	movf	postinc2,w,c
  5919  002B42  26E1               	addwf	fsr1l,f,c
  5920  002B44  50DD               	movf	postdec2,w,c
  5921  002B46  22E2               	addwfc	fsr1h,f,c
  5922  002B48  5178               	movf	dir_next@c& (0+255),w,b
  5923  002B4A  5EE6               	subwf	postinc1,f,c
  5924  002B4C  5179               	movf	(dir_next@c+1)& (0+255),w,b
  5925  002B4E  5AE6               	subwfb	postinc1,f,c
  5926  002B50  0E00               	movlw	0
  5927  002B52  5AE6               	subwfb	postinc1,f,c
  5928  002B54  5AE6               	subwfb	postinc1,f,c
  5929  002B56                     l4933:
  5930                           
  5931                           ; BSR set to: 0
  5932                           ;ff.c: 1178:     dp->clust = clst;
  5933  002B56  EE20 F00A          	lfsr	2,10
  5934  002B5A  516D               	movf	dir_next@dp& (0+255),w,b
  5935  002B5C  26D9               	addwf	fsr2l,f,c
  5936  002B5E  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5937  002B60  22DA               	addwfc	fsr2h,f,c
  5938  002B62  C07C  FFDE         	movff	dir_next@clst,postinc2
  5939  002B66  C07D  FFDE         	movff	dir_next@clst+1,postinc2
  5940  002B6A  C07E  FFDE         	movff	dir_next@clst+2,postinc2
  5941  002B6E  C07F  FFDE         	movff	dir_next@clst+3,postinc2
  5942                           
  5943                           ; BSR set to: 0
  5944                           ;ff.c: 1179:     dp->sect = clust2sect(dp->fs, clst);
  5945  002B72  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5946  002B76  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5947  002B7A  CFDE F00D          	movff	postinc2,clust2sect@fs
  5948  002B7E  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5949  002B82  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  5950  002B86  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  5951  002B8A  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  5952  002B8E  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  5953  002B92  EC72  F026         	call	_clust2sect	;wreg free
  5954  002B96  0100               	movlb	0	; () banked
  5955  002B98  EE20 F00E          	lfsr	2,14
  5956  002B9C  516D               	movf	dir_next@dp& (0+255),w,b
  5957  002B9E  26D9               	addwf	fsr2l,f,c
  5958  002BA0  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5959  002BA2  22DA               	addwfc	fsr2h,f,c
  5960  002BA4  C00D  FFDE         	movff	?_clust2sect,postinc2
  5961  002BA8  C00E  FFDE         	movff	?_clust2sect+1,postinc2
  5962  002BAC  C00F  FFDE         	movff	?_clust2sect+2,postinc2
  5963  002BB0  C010  FFDE         	movff	?_clust2sect+3,postinc2
  5964  002BB4                     l4937:
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;ff.c: 1184:  dp->index = (WORD)i;
  5968  002BB4  EE20 F004          	lfsr	2,4
  5969  002BB8  516D               	movf	dir_next@dp& (0+255),w,b
  5970  002BBA  26D9               	addwf	fsr2l,f,c
  5971  002BBC  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5972  002BBE  22DA               	addwfc	fsr2h,f,c
  5973  002BC0  C07A  FFDE         	movff	dir_next@i,postinc2
  5974  002BC4  C07B  FFDD         	movff	dir_next@i+1,postdec2
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;ff.c: 1185:  dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  5978  002BC8  0E0F               	movlw	15
  5979  002BCA  157A               	andwf	dir_next@i& (0+255),w,b
  5980  002BCC  6F71               	movwf	??_dir_next& (0+255),b
  5981  002BCE  0E00               	movlw	0
  5982  002BD0  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  5983  002BD2  6F72               	movwf	(??_dir_next+1)& (0+255),b
  5984  002BD4  0E05               	movlw	5
  5985  002BD6                     u6105:
  5986  002BD6  90D8               	bcf	status,0,c
  5987  002BD8  3771               	rlcf	??_dir_next& (0+255),f,b
  5988  002BDA  3772               	rlcf	(??_dir_next+1)& (0+255),f,b
  5989  002BDC  2EE8               	decfsz	wreg,f,c
  5990  002BDE  D7FB               	goto	u6105
  5991  002BE0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5992  002BE4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5993  002BE8  CFDE F073          	movff	postinc2,??_dir_next+2
  5994  002BEC  CFDD F074          	movff	postdec2,??_dir_next+3
  5995  002BF0  5171               	movf	??_dir_next& (0+255),w,b
  5996  002BF2  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  5997  002BF4  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5998  002BF6  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  5999  002BF8  0E2E               	movlw	46
  6000  002BFA  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  6001  002BFC  0E00               	movlw	0
  6002  002BFE  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  6003  002C00  EE20 F012          	lfsr	2,18
  6004  002C04  516D               	movf	dir_next@dp& (0+255),w,b
  6005  002C06  26D9               	addwf	fsr2l,f,c
  6006  002C08  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6007  002C0A  22DA               	addwfc	fsr2h,f,c
  6008  002C0C  C073  FFDE         	movff	??_dir_next+2,postinc2
  6009  002C10  C074  FFDD         	movff	??_dir_next+3,postdec2
  6010                           
  6011                           ; BSR set to: 0
  6012                           ;ff.c: 1187:  return FR_OK;
  6013  002C14  0E00               	movlw	0
  6014  002C16  0012               	return		;funcret
  6015  002C18                     __end_of_dir_next:
  6016                           	opt callstack 0
  6017                           
  6018 ;; *************** function _f_mount *****************
  6019 ;; Defined at:
  6020 ;;		line 2402 in file "ff.c"
  6021 ;; Parameters:    Size  Location     Type
  6022 ;;  fs              2   81[COMRAM] PTR struct .
  6023 ;;		 -> FatFs(558), NULL(0), 
  6024 ;;  path            2   83[COMRAM] PTR const unsigned char 
  6025 ;;		 -> STR_6(11), STR_5(1), STR_4(1), 
  6026 ;;  opt             1   85[COMRAM] unsigned char 
  6027 ;; Auto vars:     Size  Location     Type
  6028 ;;  vol             2   91[COMRAM] int 
  6029 ;;  rp              2   89[COMRAM] PTR const unsigned char 
  6030 ;;		 -> STR_6(11), STR_5(1), STR_4(1), 
  6031 ;;  cfs             2   87[COMRAM] PTR struct .
  6032 ;;		 -> FatFs(558), NULL(0), 
  6033 ;;  res             1   86[COMRAM] enum E93
  6034 ;; Return value:  Size  Location     Type
  6035 ;;                  1    wreg      enum E93
  6036 ;; Registers used:
  6037 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6038 ;; Tracked objects:
  6039 ;;		On entry : 0/0
  6040 ;;		On exit  : 0/0
  6041 ;;		Unchanged: 0/0
  6042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6043 ;;      Params:         5       0       0       0       0       0       0       0       0
  6044 ;;      Locals:         7       0       0       0       0       0       0       0       0
  6045 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6046 ;;      Totals:        12       0       0       0       0       0       0       0       0
  6047 ;;Total ram usage:       12 bytes
  6048 ;; Hardware stack levels used:    1
  6049 ;; Hardware stack levels required when called:   10
  6050 ;; This function calls:
  6051 ;;		_find_volume
  6052 ;;		_get_ldnumber
  6053 ;; This function is called by:
  6054 ;;		_guardar
  6055 ;; This function uses a non-reentrant model
  6056 ;;
  6057                           
  6058                           	psect	text17
  6059  004D9E                     __ptext17:
  6060                           	opt callstack 0
  6061  004D9E                     _f_mount:
  6062                           	opt callstack 19
  6063                           
  6064                           ;ff.c: 2403:  FATFS* fs,;ff.c: 2404:  const TCHAR* path,;ff.c: 2405:  BYTE opt;ff.c: 240
      +                          7: {;ff.c: 2408:  FATFS *cfs;;ff.c: 2409:  int vol;;ff.c: 2410:  FRESULT res;;ff.c: 2411
      +                          :  const TCHAR *rp = path;
  6065                           
  6066                           ;incstack = 0
  6067  004D9E  C054  F05A         	movff	f_mount@path,f_mount@rp
  6068  004DA2  C055  F05B         	movff	f_mount@path+1,f_mount@rp+1
  6069                           
  6070                           ;ff.c: 2414:  vol = get_ldnumber(&rp);
  6071  004DA6  0E5A               	movlw	low f_mount@rp
  6072  004DA8  6E01               	movwf	get_ldnumber@path,c
  6073  004DAA  0E00               	movlw	high f_mount@rp
  6074  004DAC  6E02               	movwf	get_ldnumber@path+1,c
  6075  004DAE  ECCD  F024         	call	_get_ldnumber	;wreg free
  6076  004DB2  C001  F05C         	movff	?_get_ldnumber,f_mount@vol
  6077  004DB6  C002  F05D         	movff	?_get_ldnumber+1,f_mount@vol+1
  6078                           
  6079                           ;ff.c: 2415:  if (vol < 0) return FR_INVALID_DRIVE;
  6080  004DBA  AE5D               	btfss	f_mount@vol+1,7,c
  6081  004DBC  D002               	goto	l5853
  6082  004DBE  0E0B               	movlw	11
  6083  004DC0  0012               	return	
  6084  004DC2                     l5853:
  6085                           
  6086                           ;ff.c: 2416:  cfs = FatFs[vol];
  6087  004DC2  90D8               	bcf	status,0,c
  6088  004DC4  345C               	rlcf	f_mount@vol,w,c
  6089  004DC6  6ED9               	movwf	fsr2l,c
  6090  004DC8  345D               	rlcf	f_mount@vol+1,w,c
  6091  004DCA  6EDA               	movwf	fsr2h,c
  6092  004DCC  0EE9               	movlw	low ff@FatFs
  6093  004DCE  26D9               	addwf	fsr2l,f,c
  6094  004DD0  0E00               	movlw	high ff@FatFs
  6095  004DD2  22DA               	addwfc	fsr2h,f,c
  6096  004DD4  CFDE F058          	movff	postinc2,f_mount@cfs
  6097  004DD8  CFDD F059          	movff	postdec2,f_mount@cfs+1
  6098                           
  6099                           ;ff.c: 2418:  if (cfs) {
  6100  004DDC  5058               	movf	f_mount@cfs,w,c
  6101  004DDE  1059               	iorwf	f_mount@cfs+1,w,c
  6102  004DE0  B4D8               	btfsc	status,2,c
  6103  004DE2  D006               	goto	l5859
  6104                           
  6105                           ;ff.c: 2425:   cfs->fs_type = 0;
  6106  004DE4  C058  FFD9         	movff	f_mount@cfs,fsr2l
  6107  004DE8  C059  FFDA         	movff	f_mount@cfs+1,fsr2h
  6108  004DEC  0E00               	movlw	0
  6109  004DEE  6EDF               	movwf	indf2,c
  6110  004DF0                     l5859:
  6111                           
  6112                           ;ff.c: 2428:  if (fs) {
  6113  004DF0  5052               	movf	f_mount@fs,w,c
  6114  004DF2  1053               	iorwf	f_mount@fs+1,w,c
  6115  004DF4  B4D8               	btfsc	status,2,c
  6116  004DF6  D006               	goto	l5863
  6117                           
  6118                           ;ff.c: 2429:   fs->fs_type = 0;
  6119  004DF8  C052  FFD9         	movff	f_mount@fs,fsr2l
  6120  004DFC  C053  FFDA         	movff	f_mount@fs+1,fsr2h
  6121  004E00  0E00               	movlw	0
  6122  004E02  6EDF               	movwf	indf2,c
  6123  004E04                     l5863:
  6124                           
  6125                           ;ff.c: 2434:  FatFs[vol] = fs;
  6126  004E04  90D8               	bcf	status,0,c
  6127  004E06  345C               	rlcf	f_mount@vol,w,c
  6128  004E08  6ED9               	movwf	fsr2l,c
  6129  004E0A  345D               	rlcf	f_mount@vol+1,w,c
  6130  004E0C  6EDA               	movwf	fsr2h,c
  6131  004E0E  0EE9               	movlw	low ff@FatFs
  6132  004E10  26D9               	addwf	fsr2l,f,c
  6133  004E12  0E00               	movlw	high ff@FatFs
  6134  004E14  22DA               	addwfc	fsr2h,f,c
  6135  004E16  C052  FFDE         	movff	f_mount@fs,postinc2
  6136  004E1A  C053  FFDD         	movff	f_mount@fs+1,postdec2
  6137                           
  6138                           ;ff.c: 2436:  if (!fs || opt != 1) return FR_OK;
  6139  004E1E  5052               	movf	f_mount@fs,w,c
  6140  004E20  1053               	iorwf	f_mount@fs+1,w,c
  6141  004E22  B4D8               	btfsc	status,2,c
  6142  004E24  D003               	goto	u7710
  6143  004E26  0456               	decf	f_mount@opt,w,c
  6144  004E28  B4D8               	btfsc	status,2,c
  6145  004E2A  D002               	goto	l5873
  6146  004E2C                     u7710:
  6147  004E2C  0E00               	movlw	0
  6148  004E2E  0012               	return	
  6149  004E30                     l5873:
  6150                           
  6151                           ;ff.c: 2438:  res = find_volume(&fs, &path, 0);
  6152  004E30  0E52               	movlw	low f_mount@fs
  6153  004E32  6E45               	movwf	find_volume@rfs,c
  6154  004E34  0E00               	movlw	high f_mount@fs
  6155  004E36  6E46               	movwf	find_volume@rfs+1,c
  6156  004E38  0E54               	movlw	low f_mount@path
  6157  004E3A  6E47               	movwf	find_volume@path,c
  6158  004E3C  0E00               	movlw	high f_mount@path
  6159  004E3E  6E48               	movwf	find_volume@path+1,c
  6160  004E40  0E00               	movlw	0
  6161  004E42  6E49               	movwf	find_volume@wmode,c
  6162  004E44  EC15  F004         	call	_find_volume	;wreg free
  6163  004E48  6E57               	movwf	f_mount@res,c
  6164                           
  6165                           ;ff.c: 2439:  return res;
  6166  004E4A  5057               	movf	f_mount@res,w,c
  6167  004E4C  0012               	return		;funcret
  6168  004E4E                     __end_of_f_mount:
  6169                           	opt callstack 0
  6170                           
  6171 ;; *************** function _find_volume *****************
  6172 ;; Defined at:
  6173 ;;		line 2203 in file "ff.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;  rfs             2   68[COMRAM] PTR PTR struct .
  6176 ;;		 -> f_open@dj(22), f_mount@fs(2), 
  6177 ;;  path            2   70[COMRAM] PTR PTR const unsigned c
  6178 ;;		 -> f_open@path(2), f_mount@path(2), 
  6179 ;;  wmode           1   72[COMRAM] unsigned char 
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;  br             16    0[BANK0 ] unsigned long [4]
  6182 ;;  bsect           4   49[BANK0 ] unsigned long 
  6183 ;;  fasize          4   45[BANK0 ] unsigned long 
  6184 ;;  nclst           4   40[BANK0 ] unsigned long 
  6185 ;;  tsect           4   36[BANK0 ] unsigned long 
  6186 ;;  sysect          4   28[BANK0 ] unsigned long 
  6187 ;;  szbfat          4   22[BANK0 ] unsigned long 
  6188 ;;  fs              2   56[BANK0 ] PTR struct .
  6189 ;;		 -> FatFs(558), NULL(0), 
  6190 ;;  i               2   53[BANK0 ] unsigned short 
  6191 ;;  nrsv            2   34[BANK0 ] unsigned short 
  6192 ;;  vol             2   32[BANK0 ] int 
  6193 ;;  pt              2   26[BANK0 ] PTR unsigned char 
  6194 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
  6195 ;;  fmt             1   55[BANK0 ] unsigned char 
  6196 ;;  stat            1   44[BANK0 ] unsigned char 
  6197 ;; Return value:  Size  Location     Type
  6198 ;;                  1    wreg      enum E93
  6199 ;; Registers used:
  6200 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6201 ;; Tracked objects:
  6202 ;;		On entry : 0/0
  6203 ;;		On exit  : 0/0
  6204 ;;		Unchanged: 0/0
  6205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6206 ;;      Params:         5       0       0       0       0       0       0       0       0
  6207 ;;      Locals:         0      58       0       0       0       0       0       0       0
  6208 ;;      Temps:          8       0       0       0       0       0       0       0       0
  6209 ;;      Totals:        13      58       0       0       0       0       0       0       0
  6210 ;;Total ram usage:       71 bytes
  6211 ;; Hardware stack levels used:    1
  6212 ;; Hardware stack levels required when called:    9
  6213 ;; This function calls:
  6214 ;;		___lldiv
  6215 ;;		___lmul
  6216 ;;		_check_fs
  6217 ;;		_disk_initialize
  6218 ;;		_disk_status
  6219 ;;		_get_ldnumber
  6220 ;;		_move_window
  6221 ;; This function is called by:
  6222 ;;		_f_mount
  6223 ;;		_f_open
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           	psect	text18
  6228  00082A                     __ptext18:
  6229                           	opt callstack 0
  6230  00082A                     _find_volume:
  6231                           	opt callstack 19
  6232                           
  6233                           ;ff.c: 2204:  FATFS** rfs,;ff.c: 2205:  const TCHAR** path,;ff.c: 2206:  BYTE wmode;ff.c
      +                          : 2208: {;ff.c: 2209:  BYTE fmt, *pt;;ff.c: 2210:  int vol;;ff.c: 2211:  DSTATUS stat;;f
      +                          f.c: 2212:  DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];;ff.c: 2213:  WORD 
      +                          nrsv;;ff.c: 2214:  FATFS *fs;;ff.c: 2215:  UINT i;;ff.c: 2219:  *rfs = 0;
  6234                           
  6235                           ;incstack = 0
  6236  00082A  C045  FFD9         	movff	find_volume@rfs,fsr2l
  6237  00082E  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  6238  000832  0E00               	movlw	0
  6239  000834  6EDE               	movwf	postinc2,c
  6240  000836  0E00               	movlw	0
  6241  000838  6EDD               	movwf	postdec2,c
  6242                           
  6243                           ;ff.c: 2220:  vol = get_ldnumber(path);
  6244  00083A  C047  F001         	movff	find_volume@path,get_ldnumber@path
  6245  00083E  C048  F002         	movff	find_volume@path+1,get_ldnumber@path+1
  6246  000842  ECCD  F024         	call	_get_ldnumber	;wreg free
  6247  000846  C001  F080         	movff	?_get_ldnumber,find_volume@vol
  6248  00084A  C002  F081         	movff	?_get_ldnumber+1,find_volume@vol+1
  6249                           
  6250                           ;ff.c: 2221:  if (vol < 0) return FR_INVALID_DRIVE;
  6251  00084E  0100               	movlb	0	; () banked
  6252  000850  AF81               	btfss	(find_volume@vol+1)& (0+255),7,b
  6253  000852  D002               	goto	l5551
  6254                           
  6255                           ; BSR set to: 0
  6256  000854  0E0B               	movlw	11
  6257  000856  0012               	return	
  6258  000858                     l5551:
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;ff.c: 2224:  fs = FatFs[vol];
  6262  000858  90D8               	bcf	status,0,c
  6263  00085A  3580               	rlcf	find_volume@vol& (0+255),w,b
  6264  00085C  6ED9               	movwf	fsr2l,c
  6265  00085E  3581               	rlcf	(find_volume@vol+1)& (0+255),w,b
  6266  000860  6EDA               	movwf	fsr2h,c
  6267  000862  0EE9               	movlw	low ff@FatFs
  6268  000864  26D9               	addwf	fsr2l,f,c
  6269  000866  0E00               	movlw	high ff@FatFs
  6270  000868  22DA               	addwfc	fsr2h,f,c
  6271  00086A  CFDE F098          	movff	postinc2,find_volume@fs
  6272  00086E  CFDD F099          	movff	postdec2,find_volume@fs+1
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;ff.c: 2225:  if (!fs) return FR_NOT_ENABLED;
  6276  000872  5198               	movf	find_volume@fs& (0+255),w,b
  6277  000874  1199               	iorwf	(find_volume@fs+1)& (0+255),w,b
  6278  000876  A4D8               	btfss	status,2,c
  6279  000878  D002               	goto	l5559
  6280                           
  6281                           ; BSR set to: 0
  6282  00087A  0E0C               	movlw	12
  6283  00087C  0012               	return	
  6284  00087E                     l5559:
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;ff.c: 2228:  *rfs = fs;
  6288  00087E  C045  FFD9         	movff	find_volume@rfs,fsr2l
  6289  000882  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  6290  000886  C098  FFDE         	movff	find_volume@fs,postinc2
  6291  00088A  C099  FFDD         	movff	find_volume@fs+1,postdec2
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;ff.c: 2230:  if (fs->fs_type) {
  6295  00088E  C098  FFD9         	movff	find_volume@fs,fsr2l
  6296  000892  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  6297  000896  50DF               	movf	indf2,w,c
  6298  000898  B4D8               	btfsc	status,2,c
  6299  00089A  D015               	goto	l5579
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;ff.c: 2231:   stat = disk_status(fs->drv);
  6303  00089C  EE20 F001          	lfsr	2,1
  6304  0008A0  5198               	movf	find_volume@fs& (0+255),w,b
  6305  0008A2  26D9               	addwf	fsr2l,f,c
  6306  0008A4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6307  0008A6  22DA               	addwfc	fsr2h,f,c
  6308  0008A8  50DF               	movf	indf2,w,c
  6309  0008AA  ECFF  F02A         	call	_disk_status
  6310  0008AE  0100               	movlb	0	; () banked
  6311  0008B0  6F8C               	movwf	find_volume@stat& (0+255),b
  6312                           
  6313                           ; BSR set to: 0
  6314                           ;ff.c: 2233:    if (!0 && wmode && (stat & 0x04))
  6315  0008B2  B18C               	btfsc	find_volume@stat& (0+255),0,b
  6316  0008B4  D008               	goto	l5579
  6317                           
  6318                           ; BSR set to: 0
  6319  0008B6  5049               	movf	find_volume@wmode,w,c
  6320  0008B8  A4D8               	btfss	status,2,c
  6321                           
  6322                           ; BSR set to: 0
  6323  0008BA  A58C               	btfss	find_volume@stat& (0+255),2,b
  6324  0008BC  D002               	goto	l5575
  6325  0008BE                     u7240:
  6326                           
  6327                           ; BSR set to: 0
  6328                           ;ff.c: 2234:     return FR_WRITE_PROTECTED;
  6329  0008BE  0E0A               	movlw	10
  6330  0008C0  0012               	return	
  6331  0008C2                     l5575:
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;ff.c: 2235:    return FR_OK;
  6335  0008C2  0E00               	movlw	0
  6336  0008C4  0012               	return	
  6337  0008C6                     l5579:
  6338                           
  6339                           ; BSR set to: 0
  6340                           ;ff.c: 2242:  fs->fs_type = 0;
  6341  0008C6  C098  FFD9         	movff	find_volume@fs,fsr2l
  6342  0008CA  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  6343  0008CE  0E00               	movlw	0
  6344  0008D0  6EDF               	movwf	indf2,c
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;ff.c: 2243:  fs->drv = (BYTE)(vol);
  6348  0008D2  EE20 F001          	lfsr	2,1
  6349  0008D6  5198               	movf	find_volume@fs& (0+255),w,b
  6350  0008D8  26D9               	addwf	fsr2l,f,c
  6351  0008DA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6352  0008DC  22DA               	addwfc	fsr2h,f,c
  6353  0008DE  C080  FFDF         	movff	find_volume@vol,indf2
  6354                           
  6355                           ; BSR set to: 0
  6356                           ;ff.c: 2244:  stat = disk_initialize(fs->drv);
  6357  0008E2  EE20 F001          	lfsr	2,1
  6358  0008E6  5198               	movf	find_volume@fs& (0+255),w,b
  6359  0008E8  26D9               	addwf	fsr2l,f,c
  6360  0008EA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6361  0008EC  22DA               	addwfc	fsr2h,f,c
  6362  0008EE  50DF               	movf	indf2,w,c
  6363  0008F0  ECC8  F01D         	call	_disk_initialize
  6364  0008F4  0100               	movlb	0	; () banked
  6365  0008F6  6F8C               	movwf	find_volume@stat& (0+255),b
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;ff.c: 2245:  if (stat & 0x01)
  6369  0008F8  A18C               	btfss	find_volume@stat& (0+255),0,b
  6370  0008FA  D002               	goto	l5591
  6371                           
  6372                           ; BSR set to: 0
  6373                           ;ff.c: 2246:   return FR_NOT_READY;
  6374  0008FC  0E03               	movlw	3
  6375  0008FE  0012               	return	
  6376  000900                     l5591:
  6377                           
  6378                           ; BSR set to: 0
  6379  000900  5049               	movf	find_volume@wmode,w,c
  6380  000902  B4D8               	btfsc	status,2,c
  6381  000904  D002               	goto	l5599
  6382                           
  6383                           ; BSR set to: 0
  6384  000906  B58C               	btfsc	find_volume@stat& (0+255),2,b
  6385  000908  D7DA               	goto	u7240
  6386  00090A                     l5599:
  6387                           
  6388                           ; BSR set to: 0
  6389                           ;ff.c: 2254:  bsect = 0;
  6390  00090A  0E00               	movlw	0
  6391  00090C  6F91               	movwf	find_volume@bsect& (0+255),b
  6392  00090E  0E00               	movlw	0
  6393  000910  6F92               	movwf	(find_volume@bsect+1)& (0+255),b
  6394  000912  0E00               	movlw	0
  6395  000914  6F93               	movwf	(find_volume@bsect+2)& (0+255),b
  6396  000916  0E00               	movlw	0
  6397  000918  6F94               	movwf	(find_volume@bsect+3)& (0+255),b
  6398                           
  6399                           ; BSR set to: 0
  6400                           ;ff.c: 2255:  fmt = check_fs(fs, bsect);
  6401  00091A  C098  F03B         	movff	find_volume@fs,check_fs@fs
  6402  00091E  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  6403  000922  0E00               	movlw	0
  6404  000924  6E3D               	movwf	check_fs@sect,c
  6405  000926  0E00               	movlw	0
  6406  000928  6E3E               	movwf	check_fs@sect+1,c
  6407  00092A  0E00               	movlw	0
  6408  00092C  6E3F               	movwf	check_fs@sect+2,c
  6409  00092E  0E00               	movlw	0
  6410  000930  6E40               	movwf	check_fs@sect+3,c
  6411  000932  EC57  F024         	call	_check_fs	;wreg free
  6412  000936  0100               	movlb	0	; () banked
  6413  000938  6F97               	movwf	find_volume@fmt& (0+255),b
  6414                           
  6415                           ; BSR set to: 0
  6416                           ;ff.c: 2256:  if (fmt == 1 || (!fmt && (0))) {
  6417  00093A  0597               	decf	find_volume@fmt& (0+255),w,b
  6418  00093C  A4D8               	btfss	status,2,c
  6419  00093E  D0AE               	goto	u7340
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;ff.c: 2257:   for (i = 0; i < 4; i++) {
  6423  000940  0E00               	movlw	0
  6424  000942  6F96               	movwf	(find_volume@i+1)& (0+255),b
  6425  000944  0E00               	movlw	0
  6426  000946  6F95               	movwf	find_volume@i& (0+255),b
  6427  000948                     l5611:
  6428                           
  6429                           ; BSR set to: 0
  6430  000948  5196               	movf	(find_volume@i+1)& (0+255),w,b
  6431  00094A  E15A               	bnz	l5627
  6432  00094C  0E04               	movlw	4
  6433  00094E  5D95               	subwf	find_volume@i& (0+255),w,b
  6434  000950  B0D8               	btfsc	status,0,c
  6435  000952  D056               	goto	l5627
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;ff.c: 2258:    pt = fs->win + 446 + i * 16;
  6439  000954  C095  F04A         	movff	find_volume@i,??_find_volume
  6440  000958  C096  F04B         	movff	find_volume@i+1,??_find_volume+1
  6441  00095C  3A4A               	swapf	??_find_volume,f,c
  6442  00095E  3A4B               	swapf	??_find_volume+1,f,c
  6443  000960  0EF0               	movlw	240
  6444  000962  164B               	andwf	??_find_volume+1,f,c
  6445  000964  504A               	movf	??_find_volume,w,c
  6446  000966  0B0F               	andlw	15
  6447  000968  124B               	iorwf	??_find_volume+1,f,c
  6448  00096A  0EF0               	movlw	240
  6449  00096C  164A               	andwf	??_find_volume,f,c
  6450  00096E  C098  F04C         	movff	find_volume@fs,??_find_volume+2
  6451  000972  C099  F04D         	movff	find_volume@fs+1,??_find_volume+3
  6452  000976  504A               	movf	??_find_volume,w,c
  6453  000978  264C               	addwf	??_find_volume+2,f,c
  6454  00097A  504B               	movf	??_find_volume+1,w,c
  6455  00097C  224D               	addwfc	??_find_volume+3,f,c
  6456  00097E  0EEC               	movlw	236
  6457  000980  244C               	addwf	??_find_volume+2,w,c
  6458  000982  6F7A               	movwf	find_volume@pt& (0+255),b
  6459  000984  0E01               	movlw	1
  6460  000986  204D               	addwfc	??_find_volume+3,w,c
  6461  000988  6F7B               	movwf	(find_volume@pt+1)& (0+255),b
  6462                           
  6463                           ; BSR set to: 0
  6464                           ;ff.c: 2259:    br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  6465  00098A  EE20 F004          	lfsr	2,4
  6466  00098E  517A               	movf	find_volume@pt& (0+255),w,b
  6467  000990  26D9               	addwf	fsr2l,f,c
  6468  000992  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  6469  000994  22DA               	addwfc	fsr2h,f,c
  6470  000996  50DF               	movf	indf2,w,c
  6471  000998  A4D8               	btfss	status,2,c
  6472  00099A  D009               	goto	l5621
  6473                           
  6474                           ; BSR set to: 0
  6475  00099C  0E00               	movlw	0
  6476  00099E  6F70               	movwf	_find_volume$728& (0+255),b
  6477  0009A0  0E00               	movlw	0
  6478  0009A2  6F71               	movwf	(_find_volume$728+1)& (0+255),b
  6479  0009A4  0E00               	movlw	0
  6480  0009A6  6F72               	movwf	(_find_volume$728+2)& (0+255),b
  6481  0009A8  0E00               	movlw	0
  6482  0009AA  6F73               	movwf	(_find_volume$728+3)& (0+255),b
  6483  0009AC  D00E               	goto	l520
  6484  0009AE                     l5621:
  6485                           
  6486                           ; BSR set to: 0
  6487  0009AE  EE20 F008          	lfsr	2,8
  6488  0009B2  517A               	movf	find_volume@pt& (0+255),w,b
  6489  0009B4  26D9               	addwf	fsr2l,f,c
  6490  0009B6  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  6491  0009B8  22DA               	addwfc	fsr2h,f,c
  6492  0009BA  CFDE F070          	movff	postinc2,_find_volume$728
  6493  0009BE  CFDE F071          	movff	postinc2,_find_volume$728+1
  6494  0009C2  CFDE F072          	movff	postinc2,_find_volume$728+2
  6495  0009C6  CFDE F073          	movff	postinc2,_find_volume$728+3
  6496  0009CA                     l520:
  6497                           
  6498                           ; BSR set to: 0
  6499  0009CA  0E60               	movlw	low find_volume@br
  6500  0009CC  6E4A               	movwf	??_find_volume& (0+255),c
  6501  0009CE  0E00               	movlw	high find_volume@br
  6502  0009D0  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6503  0009D2  90D8               	bcf	status,0,c
  6504  0009D4  3595               	rlcf	find_volume@i& (0+255),w,b
  6505  0009D6  6ED9               	movwf	fsr2l,c
  6506  0009D8  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  6507  0009DA  6EDA               	movwf	fsr2h,c
  6508  0009DC  90D8               	bcf	status,0,c
  6509  0009DE  36D9               	rlcf	fsr2l,f,c
  6510  0009E0  36DA               	rlcf	fsr2h,f,c
  6511  0009E2  504A               	movf	??_find_volume,w,c
  6512  0009E4  26D9               	addwf	fsr2l,f,c
  6513  0009E6  504B               	movf	??_find_volume+1,w,c
  6514  0009E8  22DA               	addwfc	fsr2h,f,c
  6515  0009EA  C070  FFDE         	movff	_find_volume$728,postinc2
  6516  0009EE  C071  FFDE         	movff	_find_volume$728+1,postinc2
  6517  0009F2  C072  FFDE         	movff	_find_volume$728+2,postinc2
  6518  0009F6  C073  FFDE         	movff	_find_volume$728+3,postinc2
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;ff.c: 2260:   }
  6522  0009FA  4B95               	infsnz	find_volume@i& (0+255),f,b
  6523  0009FC  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  6524  0009FE  D7A4               	goto	l5611
  6525  000A00                     l5627:
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;ff.c: 2261:   i = 0;
  6529  000A00  0E00               	movlw	0
  6530  000A02  6F96               	movwf	(find_volume@i+1)& (0+255),b
  6531  000A04  0E00               	movlw	0
  6532  000A06  6F95               	movwf	find_volume@i& (0+255),b
  6533                           
  6534                           ; BSR set to: 0
  6535                           ;ff.c: 2262:   if (i) i--;
  6536  000A08  5195               	movf	find_volume@i& (0+255),w,b
  6537  000A0A  1196               	iorwf	(find_volume@i+1)& (0+255),w,b
  6538  000A0C  B4D8               	btfsc	status,2,c
  6539  000A0E  D003               	goto	l5633
  6540                           
  6541                           ; BSR set to: 0
  6542  000A10  0795               	decf	find_volume@i& (0+255),f,b
  6543  000A12  A0D8               	btfss	status,0,c
  6544  000A14  0796               	decf	(find_volume@i+1)& (0+255),f,b
  6545  000A16                     l5633:
  6546                           
  6547                           ; BSR set to: 0
  6548                           ;ff.c: 2264:    bsect = br[i];
  6549  000A16  0E60               	movlw	low find_volume@br
  6550  000A18  6E4A               	movwf	??_find_volume& (0+255),c
  6551  000A1A  0E00               	movlw	high find_volume@br
  6552  000A1C  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6553  000A1E  90D8               	bcf	status,0,c
  6554  000A20  3595               	rlcf	find_volume@i& (0+255),w,b
  6555  000A22  6ED9               	movwf	fsr2l,c
  6556  000A24  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  6557  000A26  6EDA               	movwf	fsr2h,c
  6558  000A28  90D8               	bcf	status,0,c
  6559  000A2A  36D9               	rlcf	fsr2l,f,c
  6560  000A2C  36DA               	rlcf	fsr2h,f,c
  6561  000A2E  504A               	movf	??_find_volume,w,c
  6562  000A30  26D9               	addwf	fsr2l,f,c
  6563  000A32  504B               	movf	??_find_volume+1,w,c
  6564  000A34  22DA               	addwfc	fsr2h,f,c
  6565  000A36  CFDE F091          	movff	postinc2,find_volume@bsect
  6566  000A3A  CFDE F092          	movff	postinc2,find_volume@bsect+1
  6567  000A3E  CFDE F093          	movff	postinc2,find_volume@bsect+2
  6568  000A42  CFDE F094          	movff	postinc2,find_volume@bsect+3
  6569                           
  6570                           ; BSR set to: 0
  6571                           ;ff.c: 2265:    fmt = bsect ? check_fs(fs, bsect) : 2;
  6572  000A46  5191               	movf	find_volume@bsect& (0+255),w,b
  6573  000A48  1192               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  6574  000A4A  1193               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  6575  000A4C  1194               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  6576  000A4E  A4D8               	btfss	status,2,c
  6577  000A50  D005               	goto	l5639
  6578                           
  6579                           ; BSR set to: 0
  6580  000A52  0E00               	movlw	0
  6581  000A54  6F75               	movwf	(_find_volume$729+1)& (0+255),b
  6582  000A56  0E02               	movlw	2
  6583  000A58  6F74               	movwf	_find_volume$729& (0+255),b
  6584  000A5A  D013               	goto	l5641
  6585  000A5C                     l5639:
  6586                           
  6587                           ; BSR set to: 0
  6588  000A5C  C098  F03B         	movff	find_volume@fs,check_fs@fs
  6589  000A60  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  6590  000A64  C091  F03D         	movff	find_volume@bsect,check_fs@sect
  6591  000A68  C092  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  6592  000A6C  C093  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  6593  000A70  C094  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  6594  000A74  EC57  F024         	call	_check_fs	;wreg free
  6595  000A78  6E4A               	movwf	??_find_volume& (0+255),c
  6596  000A7A  504A               	movf	??_find_volume,w,c
  6597  000A7C  0100               	movlb	0	; () banked
  6598  000A7E  6F74               	movwf	_find_volume$729& (0+255),b
  6599  000A80  6B75               	clrf	(_find_volume$729+1)& (0+255),b
  6600  000A82                     l5641:
  6601                           
  6602                           ; BSR set to: 0
  6603                           ;ff.c: 2266:   } while (!0 && fmt && ++i < 4);
  6604  000A82  C074  F097         	movff	_find_volume$729,find_volume@fmt
  6605                           
  6606                           ; BSR set to: 0
  6607  000A86  5197               	movf	find_volume@fmt& (0+255),w,b
  6608  000A88  B4D8               	btfsc	status,2,c
  6609  000A8A  D008               	goto	u7340
  6610                           
  6611                           ; BSR set to: 0
  6612  000A8C  4B95               	infsnz	find_volume@i& (0+255),f,b
  6613  000A8E  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  6614  000A90  5196               	movf	(find_volume@i+1)& (0+255),w,b
  6615  000A92  E104               	bnz	u7340
  6616  000A94  0E04               	movlw	4
  6617  000A96  5D95               	subwf	find_volume@i& (0+255),w,b
  6618  000A98  A0D8               	btfss	status,0,c
  6619  000A9A  D7BD               	goto	l5633
  6620  000A9C                     u7340:
  6621                           
  6622                           ; BSR set to: 0
  6623                           ;ff.c: 2268:  if (fmt == 3) return FR_DISK_ERR;
  6624  000A9C  0E03               	movlw	3
  6625  000A9E  1997               	xorwf	find_volume@fmt& (0+255),w,b
  6626  000AA0  A4D8               	btfss	status,2,c
  6627  000AA2  D002               	goto	l5653
  6628                           
  6629                           ; BSR set to: 0
  6630  000AA4  0E01               	movlw	1
  6631  000AA6  0012               	return	
  6632  000AA8                     l5653:
  6633                           
  6634                           ; BSR set to: 0
  6635                           ;ff.c: 2269:  if (fmt) return FR_NO_FILESYSTEM;
  6636  000AA8  5197               	movf	find_volume@fmt& (0+255),w,b
  6637  000AAA  B4D8               	btfsc	status,2,c
  6638  000AAC  D002               	goto	l5659
  6639  000AAE                     u7360:
  6640  000AAE                     l5655:
  6641                           
  6642                           ; BSR set to: 0
  6643  000AAE  0E0D               	movlw	13
  6644  000AB0  0012               	return	
  6645  000AB2                     l5659:
  6646                           
  6647                           ; BSR set to: 0
  6648                           ;ff.c: 2273:  if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  6649  000AB2  EE20 F039          	lfsr	2,57
  6650  000AB6  5198               	movf	find_volume@fs& (0+255),w,b
  6651  000AB8  26D9               	addwf	fsr2l,f,c
  6652  000ABA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6653  000ABC  22DA               	addwfc	fsr2h,f,c
  6654  000ABE  50DE               	movf	postinc2,w,c
  6655  000AC0  E1F6               	bnz	l5655
  6656  000AC2  0E02               	movlw	2
  6657  000AC4  18DE               	xorwf	postinc2,w,c
  6658  000AC6  A4D8               	btfss	status,2,c
  6659  000AC8  D7F2               	goto	u7360
  6660                           
  6661                           ; BSR set to: 0
  6662                           ;ff.c: 2276:  fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  6663  000ACA  EE20 F044          	lfsr	2,68
  6664  000ACE  5198               	movf	find_volume@fs& (0+255),w,b
  6665  000AD0  26D9               	addwf	fsr2l,f,c
  6666  000AD2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6667  000AD4  22DA               	addwfc	fsr2h,f,c
  6668  000AD6  CFDE F04A          	movff	postinc2,??_find_volume
  6669  000ADA  CFDD F04B          	movff	postdec2,??_find_volume+1
  6670  000ADE  C04A  F08D         	movff	??_find_volume,find_volume@fasize
  6671  000AE2  C04B  F08E         	movff	??_find_volume+1,find_volume@fasize+1
  6672  000AE6  6B8F               	clrf	(find_volume@fasize+2)& (0+255),b
  6673  000AE8  6B90               	clrf	(find_volume@fasize+3)& (0+255),b
  6674                           
  6675                           ; BSR set to: 0
  6676                           ;ff.c: 2277:  if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  6677  000AEA  518D               	movf	find_volume@fasize& (0+255),w,b
  6678  000AEC  118E               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  6679  000AEE  118F               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  6680  000AF0  1190               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  6681  000AF2  A4D8               	btfss	status,2,c
  6682  000AF4  D00E               	goto	l533
  6683                           
  6684                           ; BSR set to: 0
  6685  000AF6  EE20 F052          	lfsr	2,82
  6686  000AFA  5198               	movf	find_volume@fs& (0+255),w,b
  6687  000AFC  26D9               	addwf	fsr2l,f,c
  6688  000AFE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6689  000B00  22DA               	addwfc	fsr2h,f,c
  6690  000B02  CFDE F08D          	movff	postinc2,find_volume@fasize
  6691  000B06  CFDE F08E          	movff	postinc2,find_volume@fasize+1
  6692  000B0A  CFDE F08F          	movff	postinc2,find_volume@fasize+2
  6693  000B0E  CFDE F090          	movff	postinc2,find_volume@fasize+3
  6694  000B12                     l533:
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;ff.c: 2278:  fs->fsize = fasize;
  6698  000B12  EE20 F016          	lfsr	2,22
  6699  000B16  5198               	movf	find_volume@fs& (0+255),w,b
  6700  000B18  26D9               	addwf	fsr2l,f,c
  6701  000B1A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6702  000B1C  22DA               	addwfc	fsr2h,f,c
  6703  000B1E  C08D  FFDE         	movff	find_volume@fasize,postinc2
  6704  000B22  C08E  FFDE         	movff	find_volume@fasize+1,postinc2
  6705  000B26  C08F  FFDE         	movff	find_volume@fasize+2,postinc2
  6706  000B2A  C090  FFDE         	movff	find_volume@fasize+3,postinc2
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;ff.c: 2280:  fs->n_fats = fs->win[16];
  6710  000B2E  EE20 F03E          	lfsr	2,62
  6711  000B32  5198               	movf	find_volume@fs& (0+255),w,b
  6712  000B34  26D9               	addwf	fsr2l,f,c
  6713  000B36  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6714  000B38  22DA               	addwfc	fsr2h,f,c
  6715  000B3A  EE10 F003          	lfsr	1,3
  6716  000B3E  5198               	movf	find_volume@fs& (0+255),w,b
  6717  000B40  26E1               	addwf	fsr1l,f,c
  6718  000B42  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6719  000B44  22E2               	addwfc	fsr1h,f,c
  6720  000B46  CFDF FFE7          	movff	indf2,indf1
  6721                           
  6722                           ; BSR set to: 0
  6723                           ;ff.c: 2281:  if (fs->n_fats != 1 && fs->n_fats != 2)
  6724  000B4A  EE20 F003          	lfsr	2,3
  6725  000B4E  5198               	movf	find_volume@fs& (0+255),w,b
  6726  000B50  26D9               	addwf	fsr2l,f,c
  6727  000B52  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6728  000B54  22DA               	addwfc	fsr2h,f,c
  6729  000B56  04DE               	decf	postinc2,w,c
  6730  000B58  B4D8               	btfsc	status,2,c
  6731  000B5A  D00A               	goto	l5681
  6732                           
  6733                           ; BSR set to: 0
  6734  000B5C  EE20 F003          	lfsr	2,3
  6735  000B60  5198               	movf	find_volume@fs& (0+255),w,b
  6736  000B62  26D9               	addwf	fsr2l,f,c
  6737  000B64  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6738  000B66  22DA               	addwfc	fsr2h,f,c
  6739  000B68  0E02               	movlw	2
  6740  000B6A  18DE               	xorwf	postinc2,w,c
  6741  000B6C  A4D8               	btfss	status,2,c
  6742  000B6E  D79F               	goto	u7360
  6743  000B70                     l5681:
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;ff.c: 2283:  fasize *= fs->n_fats;
  6747  000B70  C08D  F001         	movff	find_volume@fasize,___lmul@multiplier
  6748  000B74  C08E  F002         	movff	find_volume@fasize+1,___lmul@multiplier+1
  6749  000B78  C08F  F003         	movff	find_volume@fasize+2,___lmul@multiplier+2
  6750  000B7C  C090  F004         	movff	find_volume@fasize+3,___lmul@multiplier+3
  6751  000B80  EE20 F003          	lfsr	2,3
  6752  000B84  5198               	movf	find_volume@fs& (0+255),w,b
  6753  000B86  26D9               	addwf	fsr2l,f,c
  6754  000B88  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6755  000B8A  22DA               	addwfc	fsr2h,f,c
  6756  000B8C  50DF               	movf	indf2,w,c
  6757  000B8E  6E4A               	movwf	??_find_volume& (0+255),c
  6758  000B90  504A               	movf	??_find_volume,w,c
  6759  000B92  6E05               	movwf	___lmul@multiplicand,c
  6760  000B94  6A06               	clrf	___lmul@multiplicand+1,c
  6761  000B96  6A07               	clrf	___lmul@multiplicand+2,c
  6762  000B98  6A08               	clrf	___lmul@multiplicand+3,c
  6763  000B9A  ECC8  F029         	call	___lmul	;wreg free
  6764  000B9E  C001  F08D         	movff	?___lmul,find_volume@fasize
  6765  000BA2  C002  F08E         	movff	?___lmul+1,find_volume@fasize+1
  6766  000BA6  C003  F08F         	movff	?___lmul+2,find_volume@fasize+2
  6767  000BAA  C004  F090         	movff	?___lmul+3,find_volume@fasize+3
  6768                           
  6769                           ;ff.c: 2285:  fs->csize = fs->win[13];
  6770  000BAE  0100               	movlb	0	; () banked
  6771  000BB0  EE20 F03B          	lfsr	2,59
  6772  000BB4  5198               	movf	find_volume@fs& (0+255),w,b
  6773  000BB6  26D9               	addwf	fsr2l,f,c
  6774  000BB8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6775  000BBA  22DA               	addwfc	fsr2h,f,c
  6776  000BBC  EE10 F002          	lfsr	1,2
  6777  000BC0  5198               	movf	find_volume@fs& (0+255),w,b
  6778  000BC2  26E1               	addwf	fsr1l,f,c
  6779  000BC4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6780  000BC6  22E2               	addwfc	fsr1h,f,c
  6781  000BC8  CFDF FFE7          	movff	indf2,indf1
  6782                           
  6783                           ; BSR set to: 0
  6784                           ;ff.c: 2286:  if (!fs->csize || (fs->csize & (fs->csize - 1)))
  6785  000BCC  EE20 F002          	lfsr	2,2
  6786  000BD0  5198               	movf	find_volume@fs& (0+255),w,b
  6787  000BD2  26D9               	addwf	fsr2l,f,c
  6788  000BD4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6789  000BD6  22DA               	addwfc	fsr2h,f,c
  6790  000BD8  50DF               	movf	indf2,w,c
  6791  000BDA  B4D8               	btfsc	status,2,c
  6792  000BDC  D768               	goto	u7360
  6793                           
  6794                           ; BSR set to: 0
  6795  000BDE  0EFF               	movlw	255
  6796  000BE0  6E4A               	movwf	??_find_volume& (0+255),c
  6797  000BE2  0EFF               	movlw	255
  6798  000BE4  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6799  000BE6  EE20 F002          	lfsr	2,2
  6800  000BEA  5198               	movf	find_volume@fs& (0+255),w,b
  6801  000BEC  26D9               	addwf	fsr2l,f,c
  6802  000BEE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6803  000BF0  22DA               	addwfc	fsr2h,f,c
  6804  000BF2  50DF               	movf	indf2,w,c
  6805  000BF4  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6806  000BF6  6A4D               	clrf	(??_find_volume+3)& (0+255),c
  6807  000BF8  504A               	movf	??_find_volume,w,c
  6808  000BFA  264C               	addwf	??_find_volume+2,f,c
  6809  000BFC  504B               	movf	??_find_volume+1,w,c
  6810  000BFE  224D               	addwfc	??_find_volume+3,f,c
  6811  000C00  EE20 F002          	lfsr	2,2
  6812  000C04  5198               	movf	find_volume@fs& (0+255),w,b
  6813  000C06  26D9               	addwf	fsr2l,f,c
  6814  000C08  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6815  000C0A  22DA               	addwfc	fsr2h,f,c
  6816  000C0C  50DF               	movf	indf2,w,c
  6817  000C0E  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6818  000C10  504E               	movf	??_find_volume+4,w,c
  6819  000C12  164C               	andwf	??_find_volume+2,f,c
  6820  000C14  0E00               	movlw	0
  6821  000C16  164D               	andwf	??_find_volume+3,f,c
  6822  000C18  504C               	movf	??_find_volume+2,w,c
  6823  000C1A  104D               	iorwf	??_find_volume+3,w,c
  6824  000C1C  A4D8               	btfss	status,2,c
  6825  000C1E  D747               	goto	u7360
  6826                           
  6827                           ; BSR set to: 0
  6828                           ;ff.c: 2289:  fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
  6829  000C20  EE20 F03F          	lfsr	2,63
  6830  000C24  5198               	movf	find_volume@fs& (0+255),w,b
  6831  000C26  26D9               	addwf	fsr2l,f,c
  6832  000C28  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6833  000C2A  22DA               	addwfc	fsr2h,f,c
  6834  000C2C  EE10 F008          	lfsr	1,8
  6835  000C30  5198               	movf	find_volume@fs& (0+255),w,b
  6836  000C32  26E1               	addwf	fsr1l,f,c
  6837  000C34  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6838  000C36  22E2               	addwfc	fsr1h,f,c
  6839  000C38  CFDE FFE6          	movff	postinc2,postinc1
  6840  000C3C  CFDD FFE5          	movff	postdec2,postdec1
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;ff.c: 2290:  if (fs->n_rootdir % (((UINT)512) / 32))
  6844  000C40  EE20 F008          	lfsr	2,8
  6845  000C44  5198               	movf	find_volume@fs& (0+255),w,b
  6846  000C46  26D9               	addwf	fsr2l,f,c
  6847  000C48  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6848  000C4A  22DA               	addwfc	fsr2h,f,c
  6849  000C4C  CFDE F04A          	movff	postinc2,??_find_volume
  6850  000C50  CFDD F04B          	movff	postdec2,??_find_volume+1
  6851  000C54  0E0F               	movlw	15
  6852  000C56  164A               	andwf	??_find_volume,f,c
  6853  000C58  0E00               	movlw	0
  6854  000C5A  164B               	andwf	??_find_volume+1,f,c
  6855  000C5C  504A               	movf	??_find_volume,w,c
  6856  000C5E  104B               	iorwf	??_find_volume+1,w,c
  6857  000C60  A4D8               	btfss	status,2,c
  6858  000C62  D725               	goto	u7360
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;ff.c: 2293:  tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
  6862  000C64  EE20 F041          	lfsr	2,65
  6863  000C68  5198               	movf	find_volume@fs& (0+255),w,b
  6864  000C6A  26D9               	addwf	fsr2l,f,c
  6865  000C6C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6866  000C6E  22DA               	addwfc	fsr2h,f,c
  6867  000C70  CFDE F04A          	movff	postinc2,??_find_volume
  6868  000C74  CFDD F04B          	movff	postdec2,??_find_volume+1
  6869  000C78  C04A  F084         	movff	??_find_volume,find_volume@tsect
  6870  000C7C  C04B  F085         	movff	??_find_volume+1,find_volume@tsect+1
  6871  000C80  6B86               	clrf	(find_volume@tsect+2)& (0+255),b
  6872  000C82  6B87               	clrf	(find_volume@tsect+3)& (0+255),b
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;ff.c: 2294:  if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
  6876  000C84  5184               	movf	find_volume@tsect& (0+255),w,b
  6877  000C86  1185               	iorwf	(find_volume@tsect+1)& (0+255),w,b
  6878  000C88  1186               	iorwf	(find_volume@tsect+2)& (0+255),w,b
  6879  000C8A  1187               	iorwf	(find_volume@tsect+3)& (0+255),w,b
  6880  000C8C  A4D8               	btfss	status,2,c
  6881  000C8E  D00E               	goto	l539
  6882                           
  6883                           ; BSR set to: 0
  6884  000C90  EE20 F04E          	lfsr	2,78
  6885  000C94  5198               	movf	find_volume@fs& (0+255),w,b
  6886  000C96  26D9               	addwf	fsr2l,f,c
  6887  000C98  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6888  000C9A  22DA               	addwfc	fsr2h,f,c
  6889  000C9C  CFDE F084          	movff	postinc2,find_volume@tsect
  6890  000CA0  CFDE F085          	movff	postinc2,find_volume@tsect+1
  6891  000CA4  CFDE F086          	movff	postinc2,find_volume@tsect+2
  6892  000CA8  CFDE F087          	movff	postinc2,find_volume@tsect+3
  6893  000CAC                     l539:
  6894                           
  6895                           ; BSR set to: 0
  6896                           ;ff.c: 2296:  nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
  6897  000CAC  EE20 F03C          	lfsr	2,60
  6898  000CB0  5198               	movf	find_volume@fs& (0+255),w,b
  6899  000CB2  26D9               	addwf	fsr2l,f,c
  6900  000CB4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6901  000CB6  22DA               	addwfc	fsr2h,f,c
  6902  000CB8  CFDE F082          	movff	postinc2,find_volume@nrsv
  6903  000CBC  CFDD F083          	movff	postdec2,find_volume@nrsv+1
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;ff.c: 2297:  if (!nrsv) return FR_NO_FILESYSTEM;
  6907  000CC0  5182               	movf	find_volume@nrsv& (0+255),w,b
  6908  000CC2  1183               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
  6909  000CC4  B4D8               	btfsc	status,2,c
  6910  000CC6  D6F3               	goto	u7360
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;ff.c: 2300:  sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
  6914  000CC8  EE20 F008          	lfsr	2,8
  6915  000CCC  5198               	movf	find_volume@fs& (0+255),w,b
  6916  000CCE  26D9               	addwf	fsr2l,f,c
  6917  000CD0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6918  000CD2  22DA               	addwfc	fsr2h,f,c
  6919  000CD4  CFDE F04A          	movff	postinc2,??_find_volume
  6920  000CD8  CFDD F04B          	movff	postdec2,??_find_volume+1
  6921  000CDC  0E04               	movlw	4
  6922  000CDE  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6923  000CE0                     u7465:
  6924  000CE0  90D8               	bcf	status,0,c
  6925  000CE2  324B               	rrcf	??_find_volume+1,f,c
  6926  000CE4  324A               	rrcf	??_find_volume,f,c
  6927  000CE6  2E4C               	decfsz	(??_find_volume+2)& (0+255),f,c
  6928  000CE8  D7FB               	goto	u7465
  6929  000CEA  5182               	movf	find_volume@nrsv& (0+255),w,b
  6930  000CEC  244A               	addwf	??_find_volume,w,c
  6931  000CEE  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6932  000CF0  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  6933  000CF2  204B               	addwfc	??_find_volume+1,w,c
  6934  000CF4  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6935  000CF6  6A4F               	clrf	(??_find_volume+5)& (0+255),c
  6936  000CF8  B0D8               	btfsc	status,0,c
  6937  000CFA  2A4F               	incf	(??_find_volume+5)& (0+255),f,c
  6938  000CFC  6A50               	clrf	(??_find_volume+6)& (0+255),c
  6939  000CFE  518D               	movf	find_volume@fasize& (0+255),w,b
  6940  000D00  244D               	addwf	??_find_volume+3,w,c
  6941  000D02  6F7C               	movwf	find_volume@sysect& (0+255),b
  6942  000D04  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  6943  000D06  204E               	addwfc	??_find_volume+4,w,c
  6944  000D08  6F7D               	movwf	(find_volume@sysect+1)& (0+255),b
  6945  000D0A  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  6946  000D0C  204F               	addwfc	??_find_volume+5,w,c
  6947  000D0E  6F7E               	movwf	(find_volume@sysect+2)& (0+255),b
  6948  000D10  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  6949  000D12  2050               	addwfc	??_find_volume+6,w,c
  6950  000D14  6F7F               	movwf	(find_volume@sysect+3)& (0+255),b
  6951                           
  6952                           ; BSR set to: 0
  6953                           ;ff.c: 2301:  if (tsect < sysect) return FR_NO_FILESYSTEM;
  6954  000D16  517C               	movf	find_volume@sysect& (0+255),w,b
  6955  000D18  5D84               	subwf	find_volume@tsect& (0+255),w,b
  6956  000D1A  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6957  000D1C  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  6958  000D1E  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6959  000D20  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  6960  000D22  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6961  000D24  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  6962  000D26  A0D8               	btfss	status,0,c
  6963  000D28  D6C2               	goto	u7360
  6964                           
  6965                           ; BSR set to: 0
  6966                           ;ff.c: 2302:  nclst = (tsect - sysect) / fs->csize;
  6967  000D2A  517C               	movf	find_volume@sysect& (0+255),w,b
  6968  000D2C  5D84               	subwf	find_volume@tsect& (0+255),w,b
  6969  000D2E  6E01               	movwf	___lldiv@dividend,c
  6970  000D30  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6971  000D32  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  6972  000D34  6E02               	movwf	___lldiv@dividend+1,c
  6973  000D36  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6974  000D38  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  6975  000D3A  6E03               	movwf	___lldiv@dividend+2,c
  6976  000D3C  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6977  000D3E  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  6978  000D40  6E04               	movwf	___lldiv@dividend+3,c
  6979  000D42  EE20 F002          	lfsr	2,2
  6980  000D46  5198               	movf	find_volume@fs& (0+255),w,b
  6981  000D48  26D9               	addwf	fsr2l,f,c
  6982  000D4A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6983  000D4C  22DA               	addwfc	fsr2h,f,c
  6984  000D4E  50DF               	movf	indf2,w,c
  6985  000D50  6E4A               	movwf	??_find_volume& (0+255),c
  6986  000D52  504A               	movf	??_find_volume,w,c
  6987  000D54  6E05               	movwf	___lldiv@divisor,c
  6988  000D56  6A06               	clrf	___lldiv@divisor+1,c
  6989  000D58  6A07               	clrf	___lldiv@divisor+2,c
  6990  000D5A  6A08               	clrf	___lldiv@divisor+3,c
  6991  000D5C  ECC4  F027         	call	___lldiv	;wreg free
  6992  000D60  C001  F088         	movff	?___lldiv,find_volume@nclst
  6993  000D64  C002  F089         	movff	?___lldiv+1,find_volume@nclst+1
  6994  000D68  C003  F08A         	movff	?___lldiv+2,find_volume@nclst+2
  6995  000D6C  C004  F08B         	movff	?___lldiv+3,find_volume@nclst+3
  6996                           
  6997                           ;ff.c: 2303:  if (!nclst) return FR_NO_FILESYSTEM;
  6998  000D70  0100               	movlb	0	; () banked
  6999  000D72  5188               	movf	find_volume@nclst& (0+255),w,b
  7000  000D74  1189               	iorwf	(find_volume@nclst+1)& (0+255),w,b
  7001  000D76  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  7002  000D78  118B               	iorwf	(find_volume@nclst+3)& (0+255),w,b
  7003  000D7A  B4D8               	btfsc	status,2,c
  7004  000D7C  D698               	goto	u7360
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;ff.c: 2304:  fmt = 1;
  7008  000D7E  0E01               	movlw	1
  7009  000D80  6F97               	movwf	find_volume@fmt& (0+255),b
  7010                           
  7011                           ; BSR set to: 0
  7012                           ;ff.c: 2305:  if (nclst >= 4086U) fmt = 2;
  7013  000D82  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  7014  000D84  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  7015  000D86  E106               	bnz	u7490
  7016  000D88  0EF6               	movlw	246
  7017  000D8A  5D88               	subwf	find_volume@nclst& (0+255),w,b
  7018  000D8C  0E0F               	movlw	15
  7019  000D8E  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  7020  000D90  A0D8               	btfss	status,0,c
  7021  000D92  D002               	goto	l5735
  7022  000D94                     u7490:
  7023                           
  7024                           ; BSR set to: 0
  7025  000D94  0E02               	movlw	2
  7026  000D96  6F97               	movwf	find_volume@fmt& (0+255),b
  7027  000D98                     l5735:
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;ff.c: 2306:  if (nclst >= 65526U) fmt = 3;
  7031  000D98  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  7032  000D9A  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  7033  000D9C  E106               	bnz	u7500
  7034  000D9E  0EF6               	movlw	246
  7035  000DA0  5D88               	subwf	find_volume@nclst& (0+255),w,b
  7036  000DA2  0EFF               	movlw	255
  7037  000DA4  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  7038  000DA6  A0D8               	btfss	status,0,c
  7039  000DA8  D002               	goto	l5739
  7040  000DAA                     u7500:
  7041                           
  7042                           ; BSR set to: 0
  7043  000DAA  0E03               	movlw	3
  7044  000DAC  6F97               	movwf	find_volume@fmt& (0+255),b
  7045  000DAE                     l5739:
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;ff.c: 2309:  fs->n_fatent = nclst + 2;
  7049  000DAE  0E02               	movlw	2
  7050  000DB0  2588               	addwf	find_volume@nclst& (0+255),w,b
  7051  000DB2  6E4A               	movwf	??_find_volume& (0+255),c
  7052  000DB4  0E00               	movlw	0
  7053  000DB6  2189               	addwfc	(find_volume@nclst+1)& (0+255),w,b
  7054  000DB8  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7055  000DBA  0E00               	movlw	0
  7056  000DBC  218A               	addwfc	(find_volume@nclst+2)& (0+255),w,b
  7057  000DBE  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  7058  000DC0  0E00               	movlw	0
  7059  000DC2  218B               	addwfc	(find_volume@nclst+3)& (0+255),w,b
  7060  000DC4  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  7061  000DC6  EE20 F012          	lfsr	2,18
  7062  000DCA  5198               	movf	find_volume@fs& (0+255),w,b
  7063  000DCC  26D9               	addwf	fsr2l,f,c
  7064  000DCE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7065  000DD0  22DA               	addwfc	fsr2h,f,c
  7066  000DD2  C04A  FFDE         	movff	??_find_volume,postinc2
  7067  000DD6  C04B  FFDE         	movff	??_find_volume+1,postinc2
  7068  000DDA  C04C  FFDE         	movff	??_find_volume+2,postinc2
  7069  000DDE  C04D  FFDE         	movff	??_find_volume+3,postinc2
  7070                           
  7071                           ; BSR set to: 0
  7072                           ;ff.c: 2310:  fs->volbase = bsect;
  7073  000DE2  EE20 F01A          	lfsr	2,26
  7074  000DE6  5198               	movf	find_volume@fs& (0+255),w,b
  7075  000DE8  26D9               	addwf	fsr2l,f,c
  7076  000DEA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7077  000DEC  22DA               	addwfc	fsr2h,f,c
  7078  000DEE  C091  FFDE         	movff	find_volume@bsect,postinc2
  7079  000DF2  C092  FFDE         	movff	find_volume@bsect+1,postinc2
  7080  000DF6  C093  FFDE         	movff	find_volume@bsect+2,postinc2
  7081  000DFA  C094  FFDE         	movff	find_volume@bsect+3,postinc2
  7082                           
  7083                           ; BSR set to: 0
  7084                           ;ff.c: 2311:  fs->fatbase = bsect + nrsv;
  7085  000DFE  5182               	movf	find_volume@nrsv& (0+255),w,b
  7086  000E00  2591               	addwf	find_volume@bsect& (0+255),w,b
  7087  000E02  6E4A               	movwf	??_find_volume& (0+255),c
  7088  000E04  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  7089  000E06  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  7090  000E08  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7091  000E0A  0E00               	movlw	0
  7092  000E0C  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  7093  000E0E  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  7094  000E10  0E00               	movlw	0
  7095  000E12  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  7096  000E14  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  7097  000E16  EE20 F01E          	lfsr	2,30
  7098  000E1A  5198               	movf	find_volume@fs& (0+255),w,b
  7099  000E1C  26D9               	addwf	fsr2l,f,c
  7100  000E1E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7101  000E20  22DA               	addwfc	fsr2h,f,c
  7102  000E22  C04A  FFDE         	movff	??_find_volume,postinc2
  7103  000E26  C04B  FFDE         	movff	??_find_volume+1,postinc2
  7104  000E2A  C04C  FFDE         	movff	??_find_volume+2,postinc2
  7105  000E2E  C04D  FFDE         	movff	??_find_volume+3,postinc2
  7106                           
  7107                           ; BSR set to: 0
  7108                           ;ff.c: 2312:  fs->database = bsect + sysect;
  7109  000E32  517C               	movf	find_volume@sysect& (0+255),w,b
  7110  000E34  2591               	addwf	find_volume@bsect& (0+255),w,b
  7111  000E36  6E4A               	movwf	??_find_volume& (0+255),c
  7112  000E38  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  7113  000E3A  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  7114  000E3C  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7115  000E3E  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  7116  000E40  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  7117  000E42  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  7118  000E44  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  7119  000E46  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  7120  000E48  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  7121  000E4A  EE20 F026          	lfsr	2,38
  7122  000E4E  5198               	movf	find_volume@fs& (0+255),w,b
  7123  000E50  26D9               	addwf	fsr2l,f,c
  7124  000E52  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7125  000E54  22DA               	addwfc	fsr2h,f,c
  7126  000E56  C04A  FFDE         	movff	??_find_volume,postinc2
  7127  000E5A  C04B  FFDE         	movff	??_find_volume+1,postinc2
  7128  000E5E  C04C  FFDE         	movff	??_find_volume+2,postinc2
  7129  000E62  C04D  FFDE         	movff	??_find_volume+3,postinc2
  7130                           
  7131                           ; BSR set to: 0
  7132                           ;ff.c: 2313:  if (fmt == 3) {
  7133  000E66  0E03               	movlw	3
  7134  000E68  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7135  000E6A  A4D8               	btfss	status,2,c
  7136  000E6C  D03D               	goto	l5759
  7137                           
  7138                           ; BSR set to: 0
  7139                           ;ff.c: 2314:   if (fs->n_rootdir) return FR_NO_FILESYSTEM;
  7140  000E6E  EE20 F008          	lfsr	2,8
  7141  000E72  5198               	movf	find_volume@fs& (0+255),w,b
  7142  000E74  26D9               	addwf	fsr2l,f,c
  7143  000E76  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7144  000E78  22DA               	addwfc	fsr2h,f,c
  7145  000E7A  50DE               	movf	postinc2,w,c
  7146  000E7C  10DE               	iorwf	postinc2,w,c
  7147  000E7E  A4D8               	btfss	status,2,c
  7148  000E80  D616               	goto	u7360
  7149                           
  7150                           ; BSR set to: 0
  7151                           ;ff.c: 2315:   fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
  7152  000E82  EE20 F05A          	lfsr	2,90
  7153  000E86  5198               	movf	find_volume@fs& (0+255),w,b
  7154  000E88  26D9               	addwf	fsr2l,f,c
  7155  000E8A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7156  000E8C  22DA               	addwfc	fsr2h,f,c
  7157  000E8E  EE10 F022          	lfsr	1,34
  7158  000E92  5198               	movf	find_volume@fs& (0+255),w,b
  7159  000E94  26E1               	addwf	fsr1l,f,c
  7160  000E96  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7161  000E98  22E2               	addwfc	fsr1h,f,c
  7162  000E9A  CFDE FFE6          	movff	postinc2,postinc1
  7163  000E9E  CFDE FFE6          	movff	postinc2,postinc1
  7164  000EA2  CFDE FFE6          	movff	postinc2,postinc1
  7165  000EA6  CFDE FFE6          	movff	postinc2,postinc1
  7166                           
  7167                           ; BSR set to: 0
  7168                           ;ff.c: 2316:   szbfat = fs->n_fatent * 4;
  7169  000EAA  EE20 F012          	lfsr	2,18
  7170  000EAE  5198               	movf	find_volume@fs& (0+255),w,b
  7171  000EB0  26D9               	addwf	fsr2l,f,c
  7172  000EB2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7173  000EB4  22DA               	addwfc	fsr2h,f,c
  7174  000EB6  CFDE F04A          	movff	postinc2,??_find_volume
  7175  000EBA  CFDE F04B          	movff	postinc2,??_find_volume+1
  7176  000EBE  CFDE F04C          	movff	postinc2,??_find_volume+2
  7177  000EC2  CFDE F04D          	movff	postinc2,??_find_volume+3
  7178  000EC6  0E02               	movlw	2
  7179  000EC8                     u7535:
  7180  000EC8  90D8               	bcf	status,0,c
  7181  000ECA  364A               	rlcf	??_find_volume,f,c
  7182  000ECC  364B               	rlcf	??_find_volume+1,f,c
  7183  000ECE  364C               	rlcf	??_find_volume+2,f,c
  7184  000ED0  364D               	rlcf	??_find_volume+3,f,c
  7185  000ED2  2EE8               	decfsz	wreg,f,c
  7186  000ED4  D7F9               	goto	u7535
  7187  000ED6  C04A  F076         	movff	??_find_volume,find_volume@szbfat
  7188  000EDA  C04B  F077         	movff	??_find_volume+1,find_volume@szbfat+1
  7189  000EDE  C04C  F078         	movff	??_find_volume+2,find_volume@szbfat+2
  7190  000EE2  C04D  F079         	movff	??_find_volume+3,find_volume@szbfat+3
  7191                           
  7192                           ;ff.c: 2317:  } else {
  7193  000EE6  D091               	goto	l547
  7194  000EE8                     l5759:
  7195                           
  7196                           ; BSR set to: 0
  7197                           ;ff.c: 2318:   if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
  7198  000EE8  EE20 F008          	lfsr	2,8
  7199  000EEC  5198               	movf	find_volume@fs& (0+255),w,b
  7200  000EEE  26D9               	addwf	fsr2l,f,c
  7201  000EF0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7202  000EF2  22DA               	addwfc	fsr2h,f,c
  7203  000EF4  50DE               	movf	postinc2,w,c
  7204  000EF6  10DE               	iorwf	postinc2,w,c
  7205  000EF8  B4D8               	btfsc	status,2,c
  7206  000EFA  D5D9               	goto	u7360
  7207                           
  7208                           ; BSR set to: 0
  7209                           ;ff.c: 2319:   fs->dirbase = fs->fatbase + fasize;
  7210  000EFC  EE20 F01E          	lfsr	2,30
  7211  000F00  5198               	movf	find_volume@fs& (0+255),w,b
  7212  000F02  26D9               	addwf	fsr2l,f,c
  7213  000F04  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7214  000F06  22DA               	addwfc	fsr2h,f,c
  7215  000F08  CFDE F04A          	movff	postinc2,??_find_volume
  7216  000F0C  CFDE F04B          	movff	postinc2,??_find_volume+1
  7217  000F10  CFDE F04C          	movff	postinc2,??_find_volume+2
  7218  000F14  CFDE F04D          	movff	postinc2,??_find_volume+3
  7219  000F18  518D               	movf	find_volume@fasize& (0+255),w,b
  7220  000F1A  244A               	addwf	??_find_volume,w,c
  7221  000F1C  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  7222  000F1E  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  7223  000F20  204B               	addwfc	??_find_volume+1,w,c
  7224  000F22  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  7225  000F24  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  7226  000F26  204C               	addwfc	??_find_volume+2,w,c
  7227  000F28  6E50               	movwf	(??_find_volume+6)& (0+255),c
  7228  000F2A  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  7229  000F2C  204D               	addwfc	??_find_volume+3,w,c
  7230  000F2E  6E51               	movwf	(??_find_volume+7)& (0+255),c
  7231  000F30  EE20 F022          	lfsr	2,34
  7232  000F34  5198               	movf	find_volume@fs& (0+255),w,b
  7233  000F36  26D9               	addwf	fsr2l,f,c
  7234  000F38  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7235  000F3A  22DA               	addwfc	fsr2h,f,c
  7236  000F3C  C04E  FFDE         	movff	??_find_volume+4,postinc2
  7237  000F40  C04F  FFDE         	movff	??_find_volume+5,postinc2
  7238  000F44  C050  FFDE         	movff	??_find_volume+6,postinc2
  7239  000F48  C051  FFDE         	movff	??_find_volume+7,postinc2
  7240                           
  7241                           ; BSR set to: 0
  7242                           ;ff.c: 2320:   szbfat = (fmt == 2) ?
  7243  000F4C  0E02               	movlw	2
  7244  000F4E  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7245  000F50  B4D8               	btfsc	status,2,c
  7246  000F52  D044               	goto	l5771
  7247                           
  7248                           ; BSR set to: 0
  7249  000F54  EE20 F012          	lfsr	2,18
  7250  000F58  5198               	movf	find_volume@fs& (0+255),w,b
  7251  000F5A  26D9               	addwf	fsr2l,f,c
  7252  000F5C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7253  000F5E  22DA               	addwfc	fsr2h,f,c
  7254  000F60  CFDE F04A          	movff	postinc2,??_find_volume
  7255  000F64  CFDE F04B          	movff	postinc2,??_find_volume+1
  7256  000F68  CFDE F04C          	movff	postinc2,??_find_volume+2
  7257  000F6C  CFDE F04D          	movff	postinc2,??_find_volume+3
  7258  000F70  0E01               	movlw	1
  7259  000F72  144A               	andwf	??_find_volume,w,c
  7260  000F74  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  7261  000F76  0E00               	movlw	0
  7262  000F78  144B               	andwf	??_find_volume+1,w,c
  7263  000F7A  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  7264  000F7C  0E00               	movlw	0
  7265  000F7E  144C               	andwf	??_find_volume+2,w,c
  7266  000F80  6E50               	movwf	(??_find_volume+6)& (0+255),c
  7267  000F82  0E00               	movlw	0
  7268  000F84  144D               	andwf	??_find_volume+3,w,c
  7269  000F86  6E51               	movwf	(??_find_volume+7)& (0+255),c
  7270  000F88  EE20 F012          	lfsr	2,18
  7271  000F8C  5198               	movf	find_volume@fs& (0+255),w,b
  7272  000F8E  26D9               	addwf	fsr2l,f,c
  7273  000F90  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7274  000F92  22DA               	addwfc	fsr2h,f,c
  7275  000F94  CFDE F001          	movff	postinc2,___lmul@multiplier
  7276  000F98  CFDE F002          	movff	postinc2,___lmul@multiplier+1
  7277  000F9C  CFDE F003          	movff	postinc2,___lmul@multiplier+2
  7278  000FA0  CFDE F004          	movff	postinc2,___lmul@multiplier+3
  7279  000FA4  0E03               	movlw	3
  7280  000FA6  6E05               	movwf	___lmul@multiplicand,c
  7281  000FA8  0E00               	movlw	0
  7282  000FAA  6E06               	movwf	___lmul@multiplicand+1,c
  7283  000FAC  0E00               	movlw	0
  7284  000FAE  6E07               	movwf	___lmul@multiplicand+2,c
  7285  000FB0  0E00               	movlw	0
  7286  000FB2  6E08               	movwf	___lmul@multiplicand+3,c
  7287  000FB4  ECC8  F029         	call	___lmul	;wreg free
  7288  000FB8  90D8               	bcf	status,0,c
  7289  000FBA  3204               	rrcf	?___lmul+3,f,c
  7290  000FBC  3203               	rrcf	?___lmul+2,f,c
  7291  000FBE  3202               	rrcf	?___lmul+1,f,c
  7292  000FC0  3201               	rrcf	?___lmul,f,c
  7293  000FC2  504E               	movf	??_find_volume+4,w,c
  7294  000FC4  2401               	addwf	?___lmul,w,c
  7295  000FC6  0100               	movlb	0	; () banked
  7296  000FC8  6F76               	movwf	find_volume@szbfat& (0+255),b
  7297  000FCA  504F               	movf	??_find_volume+5,w,c
  7298  000FCC  2002               	addwfc	?___lmul+1,w,c
  7299  000FCE  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  7300  000FD0  5050               	movf	??_find_volume+6,w,c
  7301  000FD2  2003               	addwfc	?___lmul+2,w,c
  7302  000FD4  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  7303  000FD6  5051               	movf	??_find_volume+7,w,c
  7304  000FD8  2004               	addwfc	?___lmul+3,w,c
  7305  000FDA  D016               	goto	L6
  7306  000FDC                     l5771:
  7307                           
  7308                           ; BSR set to: 0
  7309  000FDC  EE20 F012          	lfsr	2,18
  7310  000FE0  5198               	movf	find_volume@fs& (0+255),w,b
  7311  000FE2  26D9               	addwf	fsr2l,f,c
  7312  000FE4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7313  000FE6  22DA               	addwfc	fsr2h,f,c
  7314  000FE8  CFDE F04A          	movff	postinc2,??_find_volume
  7315  000FEC  CFDE F04B          	movff	postinc2,??_find_volume+1
  7316  000FF0  CFDE F04C          	movff	postinc2,??_find_volume+2
  7317  000FF4  CFDE F04D          	movff	postinc2,??_find_volume+3
  7318  000FF8  90D8               	bcf	status,0,c
  7319  000FFA  344A               	rlcf	??_find_volume,w,c
  7320  000FFC  6F76               	movwf	find_volume@szbfat& (0+255),b
  7321  000FFE  344B               	rlcf	??_find_volume+1,w,c
  7322  001000  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  7323  001002  344C               	rlcf	??_find_volume+2,w,c
  7324  001004  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  7325  001006  344D               	rlcf	??_find_volume+3,w,c
  7326  001008                     L6:
  7327  001008  6F79               	movwf	(find_volume@szbfat+3)& (0+255),b
  7328  00100A                     l547:
  7329                           
  7330                           ; BSR set to: 0
  7331                           ;ff.c: 2323:  if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
  7332  00100A  0EFF               	movlw	255
  7333  00100C  2576               	addwf	find_volume@szbfat& (0+255),w,b
  7334  00100E  6E4A               	movwf	??_find_volume& (0+255),c
  7335  001010  0E01               	movlw	1
  7336  001012  2177               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
  7337  001014  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7338  001016  0E00               	movlw	0
  7339  001018  2178               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
  7340  00101A  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  7341  00101C  0E00               	movlw	0
  7342  00101E  2179               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
  7343  001020  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  7344  001022  0E0A               	movlw	10
  7345  001024  D005               	goto	u7560
  7346  001026                     u7565:
  7347  001026  90D8               	bcf	status,0,c
  7348  001028  324D               	rrcf	??_find_volume+3,f,c
  7349  00102A  324C               	rrcf	??_find_volume+2,f,c
  7350  00102C  324B               	rrcf	??_find_volume+1,f,c
  7351  00102E  324A               	rrcf	??_find_volume,f,c
  7352  001030                     u7560:
  7353  001030  2EE8               	decfsz	wreg,f,c
  7354  001032  D7F9               	goto	u7565
  7355  001034  EE20 F016          	lfsr	2,22
  7356  001038  5198               	movf	find_volume@fs& (0+255),w,b
  7357  00103A  26D9               	addwf	fsr2l,f,c
  7358  00103C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7359  00103E  22DA               	addwfc	fsr2h,f,c
  7360  001040  504A               	movf	??_find_volume,w,c
  7361  001042  5CDE               	subwf	postinc2,w,c
  7362  001044  504B               	movf	??_find_volume+1,w,c
  7363  001046  58DE               	subwfb	postinc2,w,c
  7364  001048  504C               	movf	??_find_volume+2,w,c
  7365  00104A  58DE               	subwfb	postinc2,w,c
  7366  00104C  504D               	movf	??_find_volume+3,w,c
  7367  00104E  58DE               	subwfb	postinc2,w,c
  7368  001050  A0D8               	btfss	status,0,c
  7369  001052  D52D               	goto	u7360
  7370                           
  7371                           ; BSR set to: 0
  7372                           ;ff.c: 2328:  fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  7373  001054  EE20 F00E          	lfsr	2,14
  7374  001058  5198               	movf	find_volume@fs& (0+255),w,b
  7375  00105A  26D9               	addwf	fsr2l,f,c
  7376  00105C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7377  00105E  22DA               	addwfc	fsr2h,f,c
  7378  001060  0EFF               	movlw	255
  7379  001062  6EDE               	movwf	postinc2,c
  7380  001064  0EFF               	movlw	255
  7381  001066  6EDE               	movwf	postinc2,c
  7382  001068  0EFF               	movlw	255
  7383  00106A  6EDE               	movwf	postinc2,c
  7384  00106C  0EFF               	movlw	255
  7385  00106E  6EDD               	movwf	postdec2,c
  7386  001070  52DD               	movf	postdec2,f,c
  7387  001072  52DD               	movf	postdec2,f,c
  7388  001074  EE10 F00A          	lfsr	1,10
  7389  001078  5198               	movf	find_volume@fs& (0+255),w,b
  7390  00107A  26E1               	addwf	fsr1l,f,c
  7391  00107C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7392  00107E  22E2               	addwfc	fsr1h,f,c
  7393  001080  CFDE FFE6          	movff	postinc2,postinc1
  7394  001084  CFDE FFE6          	movff	postinc2,postinc1
  7395  001088  CFDE FFE6          	movff	postinc2,postinc1
  7396  00108C  CFDE FFE6          	movff	postinc2,postinc1
  7397                           
  7398                           ; BSR set to: 0
  7399                           ;ff.c: 2331:  fs->fsi_flag = 0x80;
  7400  001090  EE20 F005          	lfsr	2,5
  7401  001094  5198               	movf	find_volume@fs& (0+255),w,b
  7402  001096  26D9               	addwf	fsr2l,f,c
  7403  001098  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7404  00109A  22DA               	addwfc	fsr2h,f,c
  7405  00109C  0E80               	movlw	128
  7406  00109E  6EDF               	movwf	indf2,c
  7407                           
  7408                           ; BSR set to: 0
  7409                           ;ff.c: 2333:  if (fmt == 3
  7410  0010A0  0E03               	movlw	3
  7411  0010A2  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7412  0010A4  A4D8               	btfss	status,2,c
  7413  0010A6  D083               	goto	l5795
  7414                           
  7415                           ; BSR set to: 0
  7416  0010A8  EE20 F05E          	lfsr	2,94
  7417  0010AC  5198               	movf	find_volume@fs& (0+255),w,b
  7418  0010AE  26D9               	addwf	fsr2l,f,c
  7419  0010B0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7420  0010B2  22DA               	addwfc	fsr2h,f,c
  7421  0010B4  04DE               	decf	postinc2,w,c
  7422  0010B6  10DE               	iorwf	postinc2,w,c
  7423  0010B8  A4D8               	btfss	status,2,c
  7424  0010BA  D079               	goto	l5795
  7425                           
  7426                           ; BSR set to: 0
  7427  0010BC  C098  F030         	movff	find_volume@fs,move_window@fs
  7428  0010C0  C099  F031         	movff	find_volume@fs+1,move_window@fs+1
  7429  0010C4  0E01               	movlw	1
  7430  0010C6  2591               	addwf	find_volume@bsect& (0+255),w,b
  7431  0010C8  6E32               	movwf	move_window@sector,c
  7432  0010CA  0E00               	movlw	0
  7433  0010CC  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  7434  0010CE  6E33               	movwf	move_window@sector+1,c
  7435  0010D0  0E00               	movlw	0
  7436  0010D2  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  7437  0010D4  6E34               	movwf	move_window@sector+2,c
  7438  0010D6  0E00               	movlw	0
  7439  0010D8  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  7440  0010DA  6E35               	movwf	move_window@sector+3,c
  7441  0010DC  EC27  F027         	call	_move_window	;wreg free
  7442  0010E0  0900               	iorlw	0
  7443  0010E2  A4D8               	btfss	status,2,c
  7444  0010E4  D064               	goto	l5795
  7445                           
  7446                           ;ff.c: 2336:  {;ff.c: 2337:   fs->fsi_flag = 0;
  7447  0010E6  0100               	movlb	0	; () banked
  7448  0010E8  EE20 F005          	lfsr	2,5
  7449  0010EC  5198               	movf	find_volume@fs& (0+255),w,b
  7450  0010EE  26D9               	addwf	fsr2l,f,c
  7451  0010F0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7452  0010F2  22DA               	addwfc	fsr2h,f,c
  7453  0010F4  0E00               	movlw	0
  7454  0010F6  6EDF               	movwf	indf2,c
  7455                           
  7456                           ;ff.c: 2338:   if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
  7457  0010F8  EE22 F02C          	lfsr	2,556
  7458  0010FC  5198               	movf	find_volume@fs& (0+255),w,b
  7459  0010FE  26D9               	addwf	fsr2l,f,c
  7460  001100  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7461  001102  22DA               	addwfc	fsr2h,f,c
  7462  001104  0E55               	movlw	85
  7463  001106  18DE               	xorwf	postinc2,w,c
  7464  001108  E152               	bnz	l5795
  7465  00110A  0EAA               	movlw	170
  7466  00110C  18DE               	xorwf	postinc2,w,c
  7467  00110E  A4D8               	btfss	status,2,c
  7468  001110  D04E               	goto	l5795
  7469                           
  7470                           ; BSR set to: 0
  7471  001112  EE20 F02E          	lfsr	2,46
  7472  001116  5198               	movf	find_volume@fs& (0+255),w,b
  7473  001118  26D9               	addwf	fsr2l,f,c
  7474  00111A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7475  00111C  22DA               	addwfc	fsr2h,f,c
  7476  00111E  0E52               	movlw	82
  7477  001120  18DE               	xorwf	postinc2,w,c
  7478  001122  E145               	bnz	l5795
  7479  001124  0E52               	movlw	82
  7480  001126  18DE               	xorwf	postinc2,w,c
  7481  001128  E142               	bnz	l5795
  7482  00112A  0E61               	movlw	97
  7483  00112C  18DE               	xorwf	postinc2,w,c
  7484  00112E  E13F               	bnz	l5795
  7485  001130  0E41               	movlw	65
  7486  001132  18DE               	xorwf	postinc2,w,c
  7487  001134  A4D8               	btfss	status,2,c
  7488  001136  D03B               	goto	l5795
  7489                           
  7490                           ; BSR set to: 0
  7491  001138  EE22 F012          	lfsr	2,530
  7492  00113C  5198               	movf	find_volume@fs& (0+255),w,b
  7493  00113E  26D9               	addwf	fsr2l,f,c
  7494  001140  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7495  001142  22DA               	addwfc	fsr2h,f,c
  7496  001144  0E72               	movlw	114
  7497  001146  18DE               	xorwf	postinc2,w,c
  7498  001148  E132               	bnz	l5795
  7499  00114A  0E72               	movlw	114
  7500  00114C  18DE               	xorwf	postinc2,w,c
  7501  00114E  E12F               	bnz	l5795
  7502  001150  0E41               	movlw	65
  7503  001152  18DE               	xorwf	postinc2,w,c
  7504  001154  E12C               	bnz	l5795
  7505  001156  0E61               	movlw	97
  7506  001158  18DE               	xorwf	postinc2,w,c
  7507  00115A  A4D8               	btfss	status,2,c
  7508  00115C  D028               	goto	l5795
  7509                           
  7510                           ; BSR set to: 0
  7511                           ;ff.c: 2341:   {;ff.c: 2343:    fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488)
      +                          );
  7512  00115E  EE22 F016          	lfsr	2,534
  7513  001162  5198               	movf	find_volume@fs& (0+255),w,b
  7514  001164  26D9               	addwf	fsr2l,f,c
  7515  001166  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7516  001168  22DA               	addwfc	fsr2h,f,c
  7517  00116A  EE10 F00E          	lfsr	1,14
  7518  00116E  5198               	movf	find_volume@fs& (0+255),w,b
  7519  001170  26E1               	addwf	fsr1l,f,c
  7520  001172  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7521  001174  22E2               	addwfc	fsr1h,f,c
  7522  001176  CFDE FFE6          	movff	postinc2,postinc1
  7523  00117A  CFDE FFE6          	movff	postinc2,postinc1
  7524  00117E  CFDE FFE6          	movff	postinc2,postinc1
  7525  001182  CFDE FFE6          	movff	postinc2,postinc1
  7526                           
  7527                           ;ff.c: 2346:    fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
  7528  001186  EE22 F01A          	lfsr	2,538
  7529  00118A  5198               	movf	find_volume@fs& (0+255),w,b
  7530  00118C  26D9               	addwf	fsr2l,f,c
  7531  00118E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7532  001190  22DA               	addwfc	fsr2h,f,c
  7533  001192  EE10 F00A          	lfsr	1,10
  7534  001196  5198               	movf	find_volume@fs& (0+255),w,b
  7535  001198  26E1               	addwf	fsr1l,f,c
  7536  00119A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7537  00119C  22E2               	addwfc	fsr1h,f,c
  7538  00119E  CFDE FFE6          	movff	postinc2,postinc1
  7539  0011A2  CFDE FFE6          	movff	postinc2,postinc1
  7540  0011A6  CFDE FFE6          	movff	postinc2,postinc1
  7541  0011AA  CFDE FFE6          	movff	postinc2,postinc1
  7542  0011AE                     l5795:
  7543                           
  7544                           ;ff.c: 2352:  fs->fs_type = fmt;
  7545  0011AE  C098  FFD9         	movff	find_volume@fs,fsr2l
  7546  0011B2  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7547  0011B6  C097  FFDF         	movff	find_volume@fmt,indf2
  7548                           
  7549                           ;ff.c: 2353:  fs->id = ++Fsid;
  7550  0011BA  0100               	movlb	0	; () banked
  7551  0011BC  4BE7               	infsnz	_Fsid& (0+255),f,b
  7552  0011BE  2BE8               	incf	(_Fsid+1)& (0+255),f,b
  7553  0011C0  EE20 F006          	lfsr	2,6
  7554  0011C4  5198               	movf	find_volume@fs& (0+255),w,b
  7555  0011C6  26D9               	addwf	fsr2l,f,c
  7556  0011C8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7557  0011CA  22DA               	addwfc	fsr2h,f,c
  7558  0011CC  C0E7  FFDE         	movff	_Fsid,postinc2
  7559  0011D0  C0E8  FFDD         	movff	_Fsid+1,postdec2
  7560  0011D4  EF61  F004         	goto	l5575
  7561  0011D8                     __end_of_find_volume:
  7562                           	opt callstack 0
  7563                           
  7564 ;; *************** function _get_ldnumber *****************
  7565 ;; Defined at:
  7566 ;;		line 2114 in file "ff.c"
  7567 ;; Parameters:    Size  Location     Type
  7568 ;;  path            2    0[COMRAM] PTR PTR const unsigned c
  7569 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;  tt              2   12[COMRAM] PTR const unsigned char 
  7572 ;;		 -> STR_6(11), STR_5(1), STR_4(1), 
  7573 ;;  i               2   10[COMRAM] unsigned short 
  7574 ;;  vol             2    8[COMRAM] int 
  7575 ;;  tp              2    6[COMRAM] PTR const unsigned char 
  7576 ;;		 -> STR_6(11), STR_5(1), STR_4(1), 
  7577 ;; Return value:  Size  Location     Type
  7578 ;;                  2    0[COMRAM] int 
  7579 ;; Registers used:
  7580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7581 ;; Tracked objects:
  7582 ;;		On entry : 0/0
  7583 ;;		On exit  : 0/0
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7586 ;;      Params:         2       0       0       0       0       0       0       0       0
  7587 ;;      Locals:        10       0       0       0       0       0       0       0       0
  7588 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7589 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7590 ;;Total ram usage:       14 bytes
  7591 ;; Hardware stack levels used:    1
  7592 ;; This function calls:
  7593 ;;		Nothing
  7594 ;; This function is called by:
  7595 ;;		_find_volume
  7596 ;;		_f_mount
  7597 ;; This function uses a non-reentrant model
  7598 ;;
  7599                           
  7600                           	psect	text19
  7601  00499A                     __ptext19:
  7602                           	opt callstack 0
  7603  00499A                     _get_ldnumber:
  7604                           	opt callstack 27
  7605                           
  7606                           ;ff.c: 2115:  const TCHAR** path;ff.c: 2117: {;ff.c: 2118:  const TCHAR *tp, *tt;;ff.c: 
      +                          2119:  UINT i;;ff.c: 2120:  int vol = -1;
  7607                           
  7608                           ; BSR set to: 0
  7609                           ;incstack = 0
  7610  00499A  6809               	setf	get_ldnumber@vol,c
  7611  00499C  680A               	setf	get_ldnumber@vol+1,c
  7612                           
  7613                           ;ff.c: 2129:  if (*path) {
  7614  00499E  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7615  0049A2  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7616  0049A6  50DE               	movf	postinc2,w,c
  7617  0049A8  10DE               	iorwf	postinc2,w,c
  7618  0049AA  B4D8               	btfsc	status,2,c
  7619  0049AC  D05B               	goto	l5351
  7620                           
  7621                           ;ff.c: 2130:   for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
  7622  0049AE  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7623  0049B2  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7624  0049B6  CFDE F00D          	movff	postinc2,get_ldnumber@tt
  7625  0049BA  CFDD F00E          	movff	postdec2,get_ldnumber@tt+1
  7626  0049BE  D002               	goto	l5325
  7627  0049C0                     l5323:
  7628  0049C0  4A0D               	infsnz	get_ldnumber@tt,f,c
  7629  0049C2  2A0E               	incf	get_ldnumber@tt+1,f,c
  7630  0049C4                     l5325:
  7631  0049C4  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7632  0049C8  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7633  0049CC                     	if	0	;tblptru may be non-zero
  7634  0049CC                     	endif
  7635  0049CC                     	if	0	;tblptru may be non-zero
  7636  0049CC                     	endif
  7637  0049CC  0E20               	movlw	32
  7638  0049CE  0008               	tblrd		*
  7639  0049D0  64F5               	cpfsgt	tablat,c
  7640  0049D2  D009               	goto	u6830
  7641  0049D4  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7642  0049D8  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7643  0049DC                     	if	0	;tblptru may be non-zero
  7644  0049DC                     	endif
  7645  0049DC                     	if	0	;tblptru may be non-zero
  7646  0049DC                     	endif
  7647  0049DC  0008               	tblrd		*
  7648  0049DE  50F5               	movf	tablat,w,c
  7649  0049E0  0A3A               	xorlw	58
  7650  0049E2  A4D8               	btfss	status,2,c
  7651  0049E4  D7ED               	goto	l5323
  7652  0049E6                     u6830:
  7653                           
  7654                           ;ff.c: 2131:   if (*tt == ':') {
  7655  0049E6  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7656  0049EA  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7657  0049EE                     	if	0	;tblptru may be non-zero
  7658  0049EE                     	endif
  7659  0049EE                     	if	0	;tblptru may be non-zero
  7660  0049EE                     	endif
  7661  0049EE  0008               	tblrd		*
  7662  0049F0  50F5               	movf	tablat,w,c
  7663  0049F2  0A3A               	xorlw	58
  7664  0049F4  A4D8               	btfss	status,2,c
  7665  0049F6  D03B               	goto	l5355
  7666                           
  7667                           ;ff.c: 2132:    tp = *path;
  7668  0049F8  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7669  0049FC  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7670  004A00  CFDE F007          	movff	postinc2,get_ldnumber@tp
  7671  004A04  CFDD F008          	movff	postdec2,get_ldnumber@tp+1
  7672                           
  7673                           ;ff.c: 2133:    i = *tp++ - '0';
  7674  004A08  C007  FFF6         	movff	get_ldnumber@tp,tblptrl
  7675  004A0C  C008  FFF7         	movff	get_ldnumber@tp+1,tblptrh
  7676  004A10                     	if	0	;tblptru may be non-zero
  7677  004A10                     	endif
  7678  004A10                     	if	0	;tblptru may be non-zero
  7679  004A10                     	endif
  7680  004A10  0008               	tblrd		*
  7681  004A12  CFF5 F003          	movff	tablat,??_get_ldnumber
  7682  004A16  0ED0               	movlw	208
  7683  004A18  2403               	addwf	??_get_ldnumber,w,c
  7684  004A1A  6E0B               	movwf	get_ldnumber@i,c
  7685  004A1C  6A0C               	clrf	get_ldnumber@i+1,c
  7686  004A1E  0EFF               	movlw	255
  7687  004A20  220C               	addwfc	get_ldnumber@i+1,f,c
  7688  004A22  4A07               	infsnz	get_ldnumber@tp,f,c
  7689  004A24  2A08               	incf	get_ldnumber@tp+1,f,c
  7690                           
  7691                           ;ff.c: 2134:    if (i < 10 && tp == tt) {
  7692  004A26  500C               	movf	get_ldnumber@i+1,w,c
  7693  004A28  E11D               	bnz	l5351
  7694  004A2A  0E0A               	movlw	10
  7695  004A2C  5C0B               	subwf	get_ldnumber@i,w,c
  7696  004A2E  B0D8               	btfsc	status,0,c
  7697  004A30  D019               	goto	l5351
  7698  004A32  500D               	movf	get_ldnumber@tt,w,c
  7699  004A34  1807               	xorwf	get_ldnumber@tp,w,c
  7700  004A36  E116               	bnz	l5351
  7701  004A38  500E               	movf	get_ldnumber@tt+1,w,c
  7702  004A3A  1808               	xorwf	get_ldnumber@tp+1,w,c
  7703  004A3C  A4D8               	btfss	status,2,c
  7704  004A3E  D012               	goto	l5351
  7705                           
  7706                           ;ff.c: 2135:     if (i < 1) {
  7707  004A40  500B               	movf	get_ldnumber@i,w,c
  7708  004A42  100C               	iorwf	get_ldnumber@i+1,w,c
  7709  004A44  A4D8               	btfss	status,2,c
  7710  004A46  D00E               	goto	l5351
  7711                           
  7712                           ;ff.c: 2136:      vol = (int)i;
  7713  004A48  C00B  F009         	movff	get_ldnumber@i,get_ldnumber@vol
  7714  004A4C  C00C  F00A         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
  7715                           
  7716                           ;ff.c: 2137:      *path = ++tt;
  7717  004A50  4A0D               	infsnz	get_ldnumber@tt,f,c
  7718  004A52  2A0E               	incf	get_ldnumber@tt+1,f,c
  7719  004A54  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7720  004A58  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7721  004A5C  C00D  FFDE         	movff	get_ldnumber@tt,postinc2
  7722  004A60  C00E  FFDD         	movff	get_ldnumber@tt+1,postdec2
  7723  004A64                     l5351:
  7724                           
  7725                           ;ff.c: 2156:    return vol;
  7726  004A64  C009  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  7727  004A68  C00A  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  7728  004A6C  0012               	return	
  7729  004A6E                     l5355:
  7730                           
  7731                           ;ff.c: 2161:   vol = 0;
  7732  004A6E  0E00               	movlw	0
  7733  004A70  6E0A               	movwf	get_ldnumber@vol+1,c
  7734  004A72  0E00               	movlw	0
  7735  004A74  6E09               	movwf	get_ldnumber@vol,c
  7736  004A76  D7F6               	goto	l5351
  7737  004A78                     __end_of_get_ldnumber:
  7738                           	opt callstack 0
  7739                           
  7740 ;; *************** function _disk_initialize *****************
  7741 ;; Defined at:
  7742 ;;		line 296 in file "diskio.c"
  7743 ;; Parameters:    Size  Location     Type
  7744 ;;  pdrv            1    wreg     unsigned char 
  7745 ;; Auto vars:     Size  Location     Type
  7746 ;;  pdrv            1   17[COMRAM] unsigned char 
  7747 ;;  ocr             4   18[COMRAM] unsigned char [4]
  7748 ;;  tmr             2   26[COMRAM] unsigned short 
  7749 ;;  n               1   28[COMRAM] unsigned char 
  7750 ;;  ty              1   25[COMRAM] unsigned char 
  7751 ;;  cmd             1   24[COMRAM] unsigned char 
  7752 ;; Return value:  Size  Location     Type
  7753 ;;                  1    wreg      unsigned char 
  7754 ;; Registers used:
  7755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7756 ;; Tracked objects:
  7757 ;;		On entry : 0/0
  7758 ;;		On exit  : 0/0
  7759 ;;		Unchanged: 0/0
  7760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7761 ;;      Params:         0       0       0       0       0       0       0       0       0
  7762 ;;      Locals:        12       0       0       0       0       0       0       0       0
  7763 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7764 ;;      Totals:        13       0       0       0       0       0       0       0       0
  7765 ;;Total ram usage:       13 bytes
  7766 ;; Hardware stack levels used:    1
  7767 ;; Hardware stack levels required when called:    5
  7768 ;; This function calls:
  7769 ;;		_SPI1_Exchange8bit
  7770 ;;		_SPI1_Initialize
  7771 ;;		_SPI1_Open
  7772 ;;		_deselect
  7773 ;;		_send_cmd
  7774 ;; This function is called by:
  7775 ;;		_find_volume
  7776 ;; This function uses a non-reentrant model
  7777 ;;
  7778                           
  7779                           	psect	text20
  7780  003B90                     __ptext20:
  7781                           	opt callstack 0
  7782  003B90                     _disk_initialize:
  7783                           	opt callstack 22
  7784                           
  7785                           ;incstack = 0
  7786                           ;disk_initialize@pdrv stored from wreg
  7787  003B90  6E12               	movwf	disk_initialize@pdrv,c
  7788                           
  7789                           ;diskio.c: 297:  BYTE pdrv;diskio.c: 299: {;diskio.c: 300:  BYTE n, cmd, ty, ocr[4];;dis
      +                          kio.c: 301:  UINT tmr;;diskio.c: 304:  if (pdrv) return 0x01;
  7790  003B92  5012               	movf	disk_initialize@pdrv,w,c
  7791  003B94  B4D8               	btfsc	status,2,c
  7792  003B96  D002               	goto	l70
  7793  003B98  0E01               	movlw	1
  7794  003B9A  0012               	return	
  7795  003B9C                     l70:
  7796                           
  7797                           ;diskio.c: 306:  if (Stat & 0x02) return Stat;
  7798  003B9C  0100               	movlb	0	; () banked
  7799  003B9E  A3F6               	btfss	_Stat& (0+255),1,b
  7800  003BA0  D003               	goto	l4955
  7801  003BA2                     u6120:
  7802  003BA2  0100               	movlb	0	; () banked
  7803  003BA4  51F6               	movf	_Stat& (0+255),w,b
  7804  003BA6  0012               	return	
  7805  003BA8                     l4955:
  7806                           
  7807                           ; BSR set to: 0
  7808                           ;diskio.c: 308:  SPI1_Initialize();
  7809  003BA8  EC37  F02B         	call	_SPI1_Initialize	;wreg free
  7810                           
  7811                           ;diskio.c: 309:  for (n = 10; n; n--) SPI1_Exchange8bit(0xFF);
  7812  003BAC  0E0A               	movlw	10
  7813  003BAE  6E1D               	movwf	disk_initialize@n,c
  7814  003BB0  D004               	goto	l4963
  7815  003BB2                     l4959:
  7816  003BB2  0EFF               	movlw	255
  7817  003BB4  EC11  F02B         	call	_SPI1_Exchange8bit
  7818  003BB8  061D               	decf	disk_initialize@n,f,c
  7819  003BBA                     l4963:
  7820  003BBA  501D               	movf	disk_initialize@n,w,c
  7821  003BBC  A4D8               	btfss	status,2,c
  7822  003BBE  D7F9               	goto	l4959
  7823                           
  7824                           ;diskio.c: 311:  ty = 0;
  7825  003BC0  0E00               	movlw	0
  7826  003BC2  6E1A               	movwf	disk_initialize@ty,c
  7827                           
  7828                           ;diskio.c: 312:  if (send_cmd((0), 0) == 1) {
  7829  003BC4  0E00               	movlw	0
  7830  003BC6  6E0B               	movwf	send_cmd@arg,c
  7831  003BC8  0E00               	movlw	0
  7832  003BCA  6E0C               	movwf	send_cmd@arg+1,c
  7833  003BCC  0E00               	movlw	0
  7834  003BCE  6E0D               	movwf	send_cmd@arg+2,c
  7835  003BD0  0E00               	movlw	0
  7836  003BD2  6E0E               	movwf	send_cmd@arg+3,c
  7837  003BD4  0E00               	movlw	0
  7838  003BD6  EC17  F02A         	call	_send_cmd
  7839  003BDA  06E8               	decf	wreg,f,c
  7840  003BDC  A4D8               	btfss	status,2,c
  7841  003BDE  D0C1               	goto	l92
  7842                           
  7843                           ;diskio.c: 313:   if (send_cmd((8), 0x1AA) == 1) {
  7844  003BE0  0EAA               	movlw	170
  7845  003BE2  6E0B               	movwf	send_cmd@arg,c
  7846  003BE4  0E01               	movlw	1
  7847  003BE6  6E0C               	movwf	send_cmd@arg+1,c
  7848  003BE8  0E00               	movlw	0
  7849  003BEA  6E0D               	movwf	send_cmd@arg+2,c
  7850  003BEC  0E00               	movlw	0
  7851  003BEE  6E0E               	movwf	send_cmd@arg+3,c
  7852  003BF0  0E08               	movlw	8
  7853  003BF2  EC17  F02A         	call	_send_cmd
  7854  003BF6  06E8               	decf	wreg,f,c
  7855  003BF8  A4D8               	btfss	status,2,c
  7856  003BFA  D067               	goto	l5019
  7857                           
  7858                           ;diskio.c: 314:    for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  7859  003BFC  0E00               	movlw	0
  7860  003BFE  6E1D               	movwf	disk_initialize@n,c
  7861  003C00                     l4977:
  7862  003C00  0E13               	movlw	low disk_initialize@ocr
  7863  003C02  241D               	addwf	disk_initialize@n,w,c
  7864  003C04  6ED9               	movwf	fsr2l,c
  7865  003C06  6ADA               	clrf	fsr2h,c
  7866  003C08  0E00               	movlw	high disk_initialize@ocr
  7867  003C0A  22DA               	addwfc	fsr2h,f,c
  7868  003C0C  0EFF               	movlw	255
  7869  003C0E  EC11  F02B         	call	_SPI1_Exchange8bit
  7870  003C12  6EDF               	movwf	indf2,c
  7871  003C14  2A1D               	incf	disk_initialize@n,f,c
  7872  003C16  0E03               	movlw	3
  7873  003C18  641D               	cpfsgt	disk_initialize@n,c
  7874  003C1A  D7F2               	goto	l4977
  7875                           
  7876                           ;diskio.c: 315:    if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
  7877  003C1C  0415               	decf	disk_initialize@ocr+2,w,c
  7878  003C1E  A4D8               	btfss	status,2,c
  7879  003C20  D0A0               	goto	l92
  7880  003C22  0EAA               	movlw	170
  7881  003C24  1816               	xorwf	disk_initialize@ocr+3,w,c
  7882  003C26  A4D8               	btfss	status,2,c
  7883  003C28  D09C               	goto	l92
  7884                           
  7885                           ;diskio.c: 316:     for (tmr = 1000; tmr; tmr--) {
  7886  003C2A  0E03               	movlw	3
  7887  003C2C  6E1C               	movwf	disk_initialize@tmr+1,c
  7888  003C2E  0EE8               	movlw	232
  7889  003C30  6E1B               	movwf	disk_initialize@tmr,c
  7890  003C32  D018               	goto	l81
  7891  003C34                     l4989:
  7892                           
  7893                           ;diskio.c: 317:      if (send_cmd((0x80+41), 1UL << 30) == 0) break;
  7894  003C34  0E00               	movlw	0
  7895  003C36  6E0B               	movwf	send_cmd@arg,c
  7896  003C38  0E00               	movlw	0
  7897  003C3A  6E0C               	movwf	send_cmd@arg+1,c
  7898  003C3C  0E00               	movlw	0
  7899  003C3E  6E0D               	movwf	send_cmd@arg+2,c
  7900  003C40  0E40               	movlw	64
  7901  003C42  6E0E               	movwf	send_cmd@arg+3,c
  7902  003C44  0EA9               	movlw	169
  7903  003C46  EC17  F02A         	call	_send_cmd
  7904  003C4A  0900               	iorlw	0
  7905  003C4C  B4D8               	btfsc	status,2,c
  7906  003C4E  D00E               	goto	u6200
  7907                           
  7908                           ;diskio.c: 318:      _delay((unsigned long)((1)*(8000000/4000.0)));
  7909  003C50  0E03               	movlw	3
  7910  003C52  6E11               	movwf	??_disk_initialize& (0+255),c
  7911  003C54  0E98               	movlw	152
  7912  003C56                     u8877:
  7913  003C56  2EE8               	decfsz	wreg,f,c
  7914  003C58  D7FE               	bra	u8877
  7915  003C5A  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  7916  003C5C  D7FC               	bra	u8877
  7917                           
  7918                           ;diskio.c: 319:     }
  7919  003C5E  061B               	decf	disk_initialize@tmr,f,c
  7920  003C60  A0D8               	btfss	status,0,c
  7921  003C62  061C               	decf	disk_initialize@tmr+1,f,c
  7922  003C64                     l81:
  7923  003C64  501B               	movf	disk_initialize@tmr,w,c
  7924  003C66  101C               	iorwf	disk_initialize@tmr+1,w,c
  7925  003C68  A4D8               	btfss	status,2,c
  7926  003C6A  D7E4               	goto	l4989
  7927  003C6C                     u6200:
  7928                           
  7929                           ;diskio.c: 320:     if (tmr && send_cmd((58), 0) == 0) {
  7930  003C6C  501B               	movf	disk_initialize@tmr,w,c
  7931  003C6E  101C               	iorwf	disk_initialize@tmr+1,w,c
  7932  003C70  B4D8               	btfsc	status,2,c
  7933  003C72  D077               	goto	l92
  7934  003C74  0E00               	movlw	0
  7935  003C76  6E0B               	movwf	send_cmd@arg,c
  7936  003C78  0E00               	movlw	0
  7937  003C7A  6E0C               	movwf	send_cmd@arg+1,c
  7938  003C7C  0E00               	movlw	0
  7939  003C7E  6E0D               	movwf	send_cmd@arg+2,c
  7940  003C80  0E00               	movlw	0
  7941  003C82  6E0E               	movwf	send_cmd@arg+3,c
  7942  003C84  0E3A               	movlw	58
  7943  003C86  EC17  F02A         	call	_send_cmd
  7944  003C8A  0900               	iorlw	0
  7945  003C8C  A4D8               	btfss	status,2,c
  7946  003C8E  D069               	goto	l92
  7947                           
  7948                           ;diskio.c: 321:      for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  7949  003C90  0E00               	movlw	0
  7950  003C92  6E1D               	movwf	disk_initialize@n,c
  7951  003C94                     l5007:
  7952  003C94  0E13               	movlw	low disk_initialize@ocr
  7953  003C96  241D               	addwf	disk_initialize@n,w,c
  7954  003C98  6ED9               	movwf	fsr2l,c
  7955  003C9A  6ADA               	clrf	fsr2h,c
  7956  003C9C  0E00               	movlw	high disk_initialize@ocr
  7957  003C9E  22DA               	addwfc	fsr2h,f,c
  7958  003CA0  0EFF               	movlw	255
  7959  003CA2  EC11  F02B         	call	_SPI1_Exchange8bit
  7960  003CA6  6EDF               	movwf	indf2,c
  7961  003CA8  2A1D               	incf	disk_initialize@n,f,c
  7962  003CAA  0E03               	movlw	3
  7963  003CAC  641D               	cpfsgt	disk_initialize@n,c
  7964  003CAE  D7F2               	goto	l5007
  7965                           
  7966                           ;diskio.c: 322:      ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
  7967  003CB0  BC13               	btfsc	disk_initialize@ocr,6,c
  7968  003CB2  D004               	goto	l5015
  7969  003CB4  0E00               	movlw	0
  7970  003CB6  6E18               	movwf	_disk_initialize$134+1,c
  7971  003CB8  0E04               	movlw	4
  7972  003CBA  D003               	goto	L7
  7973  003CBC                     l5015:
  7974  003CBC  0E00               	movlw	0
  7975  003CBE  6E18               	movwf	_disk_initialize$134+1,c
  7976  003CC0  0E0C               	movlw	12
  7977  003CC2                     L7:
  7978  003CC2  6E17               	movwf	_disk_initialize$134,c
  7979  003CC4  C017  F01A         	movff	_disk_initialize$134,disk_initialize@ty
  7980  003CC8  D04C               	goto	l92
  7981  003CCA                     l5019:
  7982                           
  7983                           ;diskio.c: 326:    if (send_cmd((0x80+41), 0) <= 1) {
  7984  003CCA  0E00               	movlw	0
  7985  003CCC  6E0B               	movwf	send_cmd@arg,c
  7986  003CCE  0E00               	movlw	0
  7987  003CD0  6E0C               	movwf	send_cmd@arg+1,c
  7988  003CD2  0E00               	movlw	0
  7989  003CD4  6E0D               	movwf	send_cmd@arg+2,c
  7990  003CD6  0E00               	movlw	0
  7991  003CD8  6E0E               	movwf	send_cmd@arg+3,c
  7992  003CDA  0EA9               	movlw	169
  7993  003CDC  EC17  F02A         	call	_send_cmd
  7994  003CE0  6E11               	movwf	??_disk_initialize& (0+255),c
  7995  003CE2  0E02               	movlw	2
  7996  003CE4  6011               	cpfslt	??_disk_initialize,c
  7997  003CE6  D004               	goto	l5023
  7998                           
  7999                           ;diskio.c: 327:     ty = 0x02; cmd = (0x80+41);
  8000  003CE8  0E02               	movlw	2
  8001  003CEA  6E1A               	movwf	disk_initialize@ty,c
  8002  003CEC  0EA9               	movlw	169
  8003  003CEE  D003               	goto	L8
  8004  003CF0                     l5023:
  8005                           
  8006                           ;diskio.c: 329:     ty = 0x01; cmd = (1);
  8007  003CF0  0E01               	movlw	1
  8008  003CF2  6E1A               	movwf	disk_initialize@ty,c
  8009  003CF4  0E01               	movlw	1
  8010  003CF6                     L8:
  8011  003CF6  6E19               	movwf	disk_initialize@cmd,c
  8012                           
  8013                           ;diskio.c: 331:    for (tmr = 1000; tmr; tmr--) {
  8014                           
  8015                           ;diskio.c: 330:    }
  8016  003CF8  0E03               	movlw	3
  8017  003CFA  6E1C               	movwf	disk_initialize@tmr+1,c
  8018  003CFC  0EE8               	movlw	232
  8019  003CFE  6E1B               	movwf	disk_initialize@tmr,c
  8020  003D00  D018               	goto	l95
  8021  003D02                     l5025:
  8022                           
  8023                           ;diskio.c: 332:     if (send_cmd(cmd, 0) == 0) break;
  8024  003D02  0E00               	movlw	0
  8025  003D04  6E0B               	movwf	send_cmd@arg,c
  8026  003D06  0E00               	movlw	0
  8027  003D08  6E0C               	movwf	send_cmd@arg+1,c
  8028  003D0A  0E00               	movlw	0
  8029  003D0C  6E0D               	movwf	send_cmd@arg+2,c
  8030  003D0E  0E00               	movlw	0
  8031  003D10  6E0E               	movwf	send_cmd@arg+3,c
  8032  003D12  5019               	movf	disk_initialize@cmd,w,c
  8033  003D14  EC17  F02A         	call	_send_cmd
  8034  003D18  0900               	iorlw	0
  8035  003D1A  B4D8               	btfsc	status,2,c
  8036  003D1C  D00E               	goto	u6270
  8037                           
  8038                           ;diskio.c: 333:     _delay((unsigned long)((1)*(8000000/4000.0)));
  8039  003D1E  0E03               	movlw	3
  8040  003D20  6E11               	movwf	??_disk_initialize& (0+255),c
  8041  003D22  0E98               	movlw	152
  8042  003D24                     u8887:
  8043  003D24  2EE8               	decfsz	wreg,f,c
  8044  003D26  D7FE               	bra	u8887
  8045  003D28  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  8046  003D2A  D7FC               	bra	u8887
  8047                           
  8048                           ;diskio.c: 334:    }
  8049  003D2C  061B               	decf	disk_initialize@tmr,f,c
  8050  003D2E  A0D8               	btfss	status,0,c
  8051  003D30  061C               	decf	disk_initialize@tmr+1,f,c
  8052  003D32                     l95:
  8053  003D32  501B               	movf	disk_initialize@tmr,w,c
  8054  003D34  101C               	iorwf	disk_initialize@tmr+1,w,c
  8055  003D36  A4D8               	btfss	status,2,c
  8056  003D38  D7E4               	goto	l5025
  8057  003D3A                     u6270:
  8058                           
  8059                           ;diskio.c: 335:    if (!tmr || send_cmd((16), 512) != 0)
  8060  003D3A  501B               	movf	disk_initialize@tmr,w,c
  8061  003D3C  101C               	iorwf	disk_initialize@tmr+1,w,c
  8062  003D3E  B4D8               	btfsc	status,2,c
  8063  003D40  D00E               	goto	u6290
  8064  003D42  0E00               	movlw	0
  8065  003D44  6E0B               	movwf	send_cmd@arg,c
  8066  003D46  0E02               	movlw	2
  8067  003D48  6E0C               	movwf	send_cmd@arg+1,c
  8068  003D4A  0E00               	movlw	0
  8069  003D4C  6E0D               	movwf	send_cmd@arg+2,c
  8070  003D4E  0E00               	movlw	0
  8071  003D50  6E0E               	movwf	send_cmd@arg+3,c
  8072  003D52  0E10               	movlw	16
  8073  003D54  EC17  F02A         	call	_send_cmd
  8074  003D58  0900               	iorlw	0
  8075  003D5A  B4D8               	btfsc	status,2,c
  8076  003D5C  D002               	goto	l92
  8077  003D5E                     u6290:
  8078                           
  8079                           ;diskio.c: 336:     ty = 0;
  8080  003D5E  0E00               	movlw	0
  8081  003D60  6E1A               	movwf	disk_initialize@ty,c
  8082  003D62                     l92:
  8083                           
  8084                           ;diskio.c: 339:  CardType = ty;
  8085  003D62  C01A  F0EB         	movff	disk_initialize@ty,_CardType
  8086                           
  8087                           ;diskio.c: 340:  deselect();
  8088  003D66  EC44  F02B         	call	_deselect	;wreg free
  8089                           
  8090                           ;diskio.c: 342:  if (ty) {
  8091  003D6A  501A               	movf	disk_initialize@ty,w,c
  8092  003D6C  B4D8               	btfsc	status,2,c
  8093  003D6E  D719               	goto	u6120
  8094                           
  8095                           ;diskio.c: 343:   Stat &= ~0x01;
  8096  003D70  0100               	movlb	0	; () banked
  8097  003D72  91F6               	bcf	_Stat& (0+255),0,b
  8098                           
  8099                           ; BSR set to: 0
  8100                           ;diskio.c: 344:   SPI1_Open();
  8101  003D74  EC29  F02B         	call	_SPI1_Open	;wreg free
  8102  003D78  D714               	goto	u6120
  8103  003D7A                     __end_of_disk_initialize:
  8104                           	opt callstack 0
  8105                           
  8106 ;; *************** function _SPI1_Open *****************
  8107 ;; Defined at:
  8108 ;;		line 77 in file "mcc_generated_files/spi1.c"
  8109 ;; Parameters:    Size  Location     Type
  8110 ;;		None
  8111 ;; Auto vars:     Size  Location     Type
  8112 ;;		None
  8113 ;; Return value:  Size  Location     Type
  8114 ;;                  1    wreg      void 
  8115 ;; Registers used:
  8116 ;;		wreg, status,2
  8117 ;; Tracked objects:
  8118 ;;		On entry : 0/0
  8119 ;;		On exit  : 0/0
  8120 ;;		Unchanged: 0/0
  8121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8122 ;;      Params:         0       0       0       0       0       0       0       0       0
  8123 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8124 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8125 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8126 ;;Total ram usage:        0 bytes
  8127 ;; Hardware stack levels used:    1
  8128 ;; This function calls:
  8129 ;;		Nothing
  8130 ;; This function is called by:
  8131 ;;		_disk_initialize
  8132 ;; This function uses a non-reentrant model
  8133 ;;
  8134                           
  8135                           	psect	text21
  8136  005652                     __ptext21:
  8137                           	opt callstack 0
  8138  005652                     _SPI1_Open:
  8139                           	opt callstack 26
  8140                           
  8141                           ;mcc_generated_files/spi1.c: 81:  SSP1STAT = 0x40;
  8142                           
  8143                           ;incstack = 0
  8144  005652  0E40               	movlw	64
  8145  005654  6EC7               	movwf	4039,c	;volatile
  8146                           
  8147                           ;mcc_generated_files/spi1.c: 84:  SSP1CON1 = 0x20;
  8148  005656  0E20               	movlw	32
  8149  005658  6EC6               	movwf	4038,c	;volatile
  8150                           
  8151                           ;mcc_generated_files/spi1.c: 87:  SSP1ADD = 0x00;
  8152  00565A  0E00               	movlw	0
  8153  00565C  6EC8               	movwf	4040,c	;volatile
  8154  00565E  0012               	return		;funcret
  8155  005660                     __end_of_SPI1_Open:
  8156                           	opt callstack 0
  8157                           
  8158 ;; *************** function _check_fs *****************
  8159 ;; Defined at:
  8160 ;;		line 2175 in file "ff.c"
  8161 ;; Parameters:    Size  Location     Type
  8162 ;;  fs              2   58[COMRAM] PTR struct .
  8163 ;;		 -> FatFs(558), NULL(0), 
  8164 ;;  sect            4   60[COMRAM] unsigned long 
  8165 ;; Auto vars:     Size  Location     Type
  8166 ;;		None
  8167 ;; Return value:  Size  Location     Type
  8168 ;;                  1    wreg      unsigned char 
  8169 ;; Registers used:
  8170 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8171 ;; Tracked objects:
  8172 ;;		On entry : 0/0
  8173 ;;		On exit  : 0/0
  8174 ;;		Unchanged: 0/0
  8175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8176 ;;      Params:         6       0       0       0       0       0       0       0       0
  8177 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8178 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8179 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8180 ;;Total ram usage:       10 bytes
  8181 ;; Hardware stack levels used:    1
  8182 ;; Hardware stack levels required when called:    8
  8183 ;; This function calls:
  8184 ;;		_move_window
  8185 ;; This function is called by:
  8186 ;;		_find_volume
  8187 ;; This function uses a non-reentrant model
  8188 ;;
  8189                           
  8190                           	psect	text22
  8191  0048AE                     __ptext22:
  8192                           	opt callstack 0
  8193  0048AE                     _check_fs:
  8194                           	opt callstack 19
  8195                           
  8196                           ;ff.c: 2176:  FATFS* fs,;ff.c: 2177:  DWORD sect;ff.c: 2179: {;ff.c: 2180:  fs->wflag = 
      +                          0; fs->winsect = 0xFFFFFFFF;
  8197                           
  8198                           ;incstack = 0
  8199  0048AE  EE20 F004          	lfsr	2,4
  8200  0048B2  503B               	movf	check_fs@fs,w,c
  8201  0048B4  26D9               	addwf	fsr2l,f,c
  8202  0048B6  503C               	movf	check_fs@fs+1,w,c
  8203  0048B8  22DA               	addwfc	fsr2h,f,c
  8204  0048BA  0E00               	movlw	0
  8205  0048BC  6EDF               	movwf	indf2,c
  8206  0048BE  EE20 F02A          	lfsr	2,42
  8207  0048C2  503B               	movf	check_fs@fs,w,c
  8208  0048C4  26D9               	addwf	fsr2l,f,c
  8209  0048C6  503C               	movf	check_fs@fs+1,w,c
  8210  0048C8  22DA               	addwfc	fsr2h,f,c
  8211  0048CA  0EFF               	movlw	255
  8212  0048CC  6EDE               	movwf	postinc2,c
  8213  0048CE  0EFF               	movlw	255
  8214  0048D0  6EDE               	movwf	postinc2,c
  8215  0048D2  0EFF               	movlw	255
  8216  0048D4  6EDE               	movwf	postinc2,c
  8217  0048D6  0EFF               	movlw	255
  8218  0048D8  6EDD               	movwf	postdec2,c
  8219                           
  8220                           ;ff.c: 2181:  if (move_window(fs, sect) != FR_OK)
  8221  0048DA  C03B  F030         	movff	check_fs@fs,move_window@fs
  8222  0048DE  C03C  F031         	movff	check_fs@fs+1,move_window@fs+1
  8223  0048E2  C03D  F032         	movff	check_fs@sect,move_window@sector
  8224  0048E6  C03E  F033         	movff	check_fs@sect+1,move_window@sector+1
  8225  0048EA  C03F  F034         	movff	check_fs@sect+2,move_window@sector+2
  8226  0048EE  C040  F035         	movff	check_fs@sect+3,move_window@sector+3
  8227  0048F2  EC27  F027         	call	_move_window	;wreg free
  8228  0048F6  0900               	iorlw	0
  8229  0048F8  B4D8               	btfsc	status,2,c
  8230  0048FA  D002               	goto	l5369
  8231                           
  8232                           ;ff.c: 2182:   return 3;
  8233  0048FC  0E03               	movlw	3
  8234  0048FE  0012               	return	
  8235  004900                     l5369:
  8236                           
  8237                           ;ff.c: 2184:  if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
  8238  004900  EE22 F02C          	lfsr	2,556
  8239  004904  503B               	movf	check_fs@fs,w,c
  8240  004906  26D9               	addwf	fsr2l,f,c
  8241  004908  503C               	movf	check_fs@fs+1,w,c
  8242  00490A  22DA               	addwfc	fsr2h,f,c
  8243  00490C  0E55               	movlw	85
  8244  00490E  18DE               	xorwf	postinc2,w,c
  8245  004910  E104               	bnz	u6890
  8246  004912  0EAA               	movlw	170
  8247  004914  18DE               	xorwf	postinc2,w,c
  8248  004916  B4D8               	btfsc	status,2,c
  8249  004918  D002               	goto	l5375
  8250  00491A                     u6890:
  8251                           
  8252                           ;ff.c: 2185:   return 2;
  8253  00491A  0E02               	movlw	2
  8254  00491C  0012               	return	
  8255  00491E                     l5375:
  8256                           
  8257                           ;ff.c: 2187:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
  8258  00491E  EE20 F064          	lfsr	2,100
  8259  004922  503B               	movf	check_fs@fs,w,c
  8260  004924  26D9               	addwf	fsr2l,f,c
  8261  004926  503C               	movf	check_fs@fs+1,w,c
  8262  004928  22DA               	addwfc	fsr2h,f,c
  8263  00492A  0EFF               	movlw	255
  8264  00492C  14DE               	andwf	postinc2,w,c
  8265  00492E  6E41               	movwf	??_check_fs& (0+255),c
  8266  004930  0EFF               	movlw	255
  8267  004932  14DE               	andwf	postinc2,w,c
  8268  004934  6E42               	movwf	(??_check_fs+1)& (0+255),c
  8269  004936  0EFF               	movlw	255
  8270  004938  14DE               	andwf	postinc2,w,c
  8271  00493A  6E43               	movwf	(??_check_fs+2)& (0+255),c
  8272  00493C  0E00               	movlw	0
  8273  00493E  14DE               	andwf	postinc2,w,c
  8274  004940  6E44               	movwf	(??_check_fs+3)& (0+255),c
  8275  004942  0E46               	movlw	70
  8276  004944  1841               	xorwf	??_check_fs,w,c
  8277  004946  E10A               	bnz	l5381
  8278  004948  0E41               	movlw	65
  8279  00494A  1842               	xorwf	??_check_fs+1,w,c
  8280  00494C  E107               	bnz	l5381
  8281  00494E  0E54               	movlw	84
  8282  004950  1843               	xorwf	??_check_fs+2,w,c
  8283  004952  1044               	iorwf	??_check_fs+3,w,c
  8284  004954  A4D8               	btfss	status,2,c
  8285  004956  D002               	goto	l5381
  8286  004958                     u6900:
  8287                           
  8288                           ;ff.c: 2188:   return 0;
  8289  004958  0E00               	movlw	0
  8290  00495A  0012               	return	
  8291  00495C                     l5381:
  8292                           
  8293                           ;ff.c: 2189:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
  8294  00495C  EE20 F080          	lfsr	2,128
  8295  004960  503B               	movf	check_fs@fs,w,c
  8296  004962  26D9               	addwf	fsr2l,f,c
  8297  004964  503C               	movf	check_fs@fs+1,w,c
  8298  004966  22DA               	addwfc	fsr2h,f,c
  8299  004968  0EFF               	movlw	255
  8300  00496A  14DE               	andwf	postinc2,w,c
  8301  00496C  6E41               	movwf	??_check_fs& (0+255),c
  8302  00496E  0EFF               	movlw	255
  8303  004970  14DE               	andwf	postinc2,w,c
  8304  004972  6E42               	movwf	(??_check_fs+1)& (0+255),c
  8305  004974  0EFF               	movlw	255
  8306  004976  14DE               	andwf	postinc2,w,c
  8307  004978  6E43               	movwf	(??_check_fs+2)& (0+255),c
  8308  00497A  0E00               	movlw	0
  8309  00497C  14DE               	andwf	postinc2,w,c
  8310  00497E  6E44               	movwf	(??_check_fs+3)& (0+255),c
  8311  004980  0E46               	movlw	70
  8312  004982  1841               	xorwf	??_check_fs,w,c
  8313  004984  E108               	bnz	l5387
  8314  004986  0E41               	movlw	65
  8315  004988  1842               	xorwf	??_check_fs+1,w,c
  8316  00498A  E105               	bnz	l5387
  8317  00498C  0E54               	movlw	84
  8318  00498E  1843               	xorwf	??_check_fs+2,w,c
  8319  004990  1044               	iorwf	??_check_fs+3,w,c
  8320  004992  B4D8               	btfsc	status,2,c
  8321  004994  D7E1               	goto	u6900
  8322  004996                     l5387:
  8323                           
  8324                           ;ff.c: 2192:  return 1;
  8325  004996  0E01               	movlw	1
  8326  004998  0012               	return		;funcret
  8327  00499A                     __end_of_check_fs:
  8328                           	opt callstack 0
  8329                           
  8330 ;; *************** function _f_lseek *****************
  8331 ;; Defined at:
  8332 ;;		line 3033 in file "ff.c"
  8333 ;; Parameters:    Size  Location     Type
  8334 ;;  fp              2   13[BANK0 ] PTR struct .
  8335 ;;		 -> Fil(32), 
  8336 ;;  ofs             4   15[BANK0 ] unsigned long 
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;  clst            4   48[BANK0 ] unsigned long 
  8339 ;;  bcs             4   44[BANK0 ] unsigned long 
  8340 ;;  nsect           4   40[BANK0 ] unsigned long 
  8341 ;;  ifptr           4   35[BANK0 ] unsigned long 
  8342 ;;  res             1   39[BANK0 ] enum E93
  8343 ;; Return value:  Size  Location     Type
  8344 ;;                  1    wreg      enum E93
  8345 ;; Registers used:
  8346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8347 ;; Tracked objects:
  8348 ;;		On entry : 0/0
  8349 ;;		On exit  : 0/0
  8350 ;;		Unchanged: 0/0
  8351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8352 ;;      Params:         0       6       0       0       0       0       0       0       0
  8353 ;;      Locals:         0      17       0       0       0       0       0       0       0
  8354 ;;      Temps:          0      16       0       0       0       0       0       0       0
  8355 ;;      Totals:         0      39       0       0       0       0       0       0       0
  8356 ;;Total ram usage:       39 bytes
  8357 ;; Hardware stack levels used:    1
  8358 ;; Hardware stack levels required when called:   10
  8359 ;; This function calls:
  8360 ;;		___lldiv
  8361 ;;		_clust2sect
  8362 ;;		_create_chain
  8363 ;;		_get_fat
  8364 ;;		_validate
  8365 ;; This function is called by:
  8366 ;;		_guardar
  8367 ;; This function uses a non-reentrant model
  8368 ;;
  8369                           
  8370                           	psect	text23
  8371  00193C                     __ptext23:
  8372                           	opt callstack 0
  8373  00193C                     _f_lseek:
  8374                           	opt callstack 19
  8375                           
  8376                           ;ff.c: 3034:  FIL* fp,;ff.c: 3035:  DWORD ofs;ff.c: 3037: {;ff.c: 3038:  FRESULT res;;ff
      +                          .c: 3039:  DWORD clst, bcs, nsect, ifptr;;ff.c: 3045:  res = validate(fp);
  8377                           
  8378                           ;incstack = 0
  8379  00193C  C06D  F002         	movff	f_lseek@fp,validate@obj
  8380  001940  C06E  F003         	movff	f_lseek@fp+1,validate@obj+1
  8381  001944  EC7A  F027         	call	_validate	;wreg free
  8382  001948  0100               	movlb	0	; () banked
  8383  00194A  6F87               	movwf	f_lseek@res& (0+255),b
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;ff.c: 3046:  if (res != FR_OK) return res;
  8387  00194C  5187               	movf	f_lseek@res& (0+255),w,b
  8388  00194E  B4D8               	btfsc	status,2,c
  8389  001950  D002               	goto	l6153
  8390  001952                     u8230:
  8391                           
  8392                           ; BSR set to: 0
  8393  001952  5187               	movf	f_lseek@res& (0+255),w,b
  8394  001954  0012               	return	
  8395  001956                     l6153:
  8396                           
  8397                           ; BSR set to: 0
  8398                           ;ff.c: 3047:  if (fp->err)
  8399  001956  EE20 F005          	lfsr	2,5
  8400  00195A  516D               	movf	f_lseek@fp& (0+255),w,b
  8401  00195C  26D9               	addwf	fsr2l,f,c
  8402  00195E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8403  001960  22DA               	addwfc	fsr2h,f,c
  8404  001962  50DF               	movf	indf2,w,c
  8405  001964  B4D8               	btfsc	status,2,c
  8406  001966  D008               	goto	l6159
  8407                           
  8408                           ; BSR set to: 0
  8409                           ;ff.c: 3048:   return (FRESULT)fp->err;
  8410  001968  EE20 F005          	lfsr	2,5
  8411  00196C  516D               	movf	f_lseek@fp& (0+255),w,b
  8412  00196E  26D9               	addwf	fsr2l,f,c
  8413  001970  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8414  001972  22DA               	addwfc	fsr2h,f,c
  8415  001974  50DF               	movf	indf2,w,c
  8416  001976  0012               	return	
  8417  001978                     l6159:
  8418                           
  8419                           ; BSR set to: 0
  8420                           ;ff.c: 3106:  {;ff.c: 3107:   if (ofs > fp->fsize
  8421  001978  EE20 F00A          	lfsr	2,10
  8422  00197C  516D               	movf	f_lseek@fp& (0+255),w,b
  8423  00197E  26D9               	addwf	fsr2l,f,c
  8424  001980  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8425  001982  22DA               	addwfc	fsr2h,f,c
  8426  001984  516F               	movf	f_lseek@ofs& (0+255),w,b
  8427  001986  5CDE               	subwf	postinc2,w,c
  8428  001988  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8429  00198A  58DE               	subwfb	postinc2,w,c
  8430  00198C  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8431  00198E  58DE               	subwfb	postinc2,w,c
  8432  001990  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8433  001992  58DE               	subwfb	postinc2,w,c
  8434  001994  B0D8               	btfsc	status,0,c
  8435  001996  D016               	goto	l667
  8436                           
  8437                           ; BSR set to: 0
  8438  001998  EE20 F004          	lfsr	2,4
  8439  00199C  516D               	movf	f_lseek@fp& (0+255),w,b
  8440  00199E  26D9               	addwf	fsr2l,f,c
  8441  0019A0  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8442  0019A2  22DA               	addwfc	fsr2h,f,c
  8443  0019A4  B2DF               	btfsc	indf2,1,c
  8444  0019A6  D00E               	goto	l667
  8445                           
  8446                           ; BSR set to: 0
  8447                           ;ff.c: 3111:    ) ofs = fp->fsize;
  8448  0019A8  EE20 F00A          	lfsr	2,10
  8449  0019AC  516D               	movf	f_lseek@fp& (0+255),w,b
  8450  0019AE  26D9               	addwf	fsr2l,f,c
  8451  0019B0  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8452  0019B2  22DA               	addwfc	fsr2h,f,c
  8453  0019B4  CFDE F06F          	movff	postinc2,f_lseek@ofs
  8454  0019B8  CFDE F070          	movff	postinc2,f_lseek@ofs+1
  8455  0019BC  CFDE F071          	movff	postinc2,f_lseek@ofs+2
  8456  0019C0  CFDE F072          	movff	postinc2,f_lseek@ofs+3
  8457  0019C4                     l667:
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;ff.c: 3113:   ifptr = fp->fptr;
  8461  0019C4  EE20 F006          	lfsr	2,6
  8462  0019C8  516D               	movf	f_lseek@fp& (0+255),w,b
  8463  0019CA  26D9               	addwf	fsr2l,f,c
  8464  0019CC  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8465  0019CE  22DA               	addwfc	fsr2h,f,c
  8466  0019D0  CFDE F083          	movff	postinc2,f_lseek@ifptr
  8467  0019D4  CFDE F084          	movff	postinc2,f_lseek@ifptr+1
  8468  0019D8  CFDE F085          	movff	postinc2,f_lseek@ifptr+2
  8469  0019DC  CFDE F086          	movff	postinc2,f_lseek@ifptr+3
  8470                           
  8471                           ;ff.c: 3114:   fp->fptr = nsect = 0;
  8472  0019E0  0E00               	movlw	0
  8473  0019E2  6F88               	movwf	f_lseek@nsect& (0+255),b
  8474  0019E4  0E00               	movlw	0
  8475  0019E6  6F89               	movwf	(f_lseek@nsect+1)& (0+255),b
  8476  0019E8  0E00               	movlw	0
  8477  0019EA  6F8A               	movwf	(f_lseek@nsect+2)& (0+255),b
  8478  0019EC  0E00               	movlw	0
  8479  0019EE  6F8B               	movwf	(f_lseek@nsect+3)& (0+255),b
  8480  0019F0  EE20 F006          	lfsr	2,6
  8481  0019F4  516D               	movf	f_lseek@fp& (0+255),w,b
  8482  0019F6  26D9               	addwf	fsr2l,f,c
  8483  0019F8  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8484  0019FA  22DA               	addwfc	fsr2h,f,c
  8485  0019FC  C088  FFDE         	movff	f_lseek@nsect,postinc2
  8486  001A00  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  8487  001A04  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  8488  001A08  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  8489                           
  8490                           ; BSR set to: 0
  8491                           ;ff.c: 3115:   if (ofs) {
  8492  001A0C  516F               	movf	f_lseek@ofs& (0+255),w,b
  8493  001A0E  1170               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
  8494  001A10  1171               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
  8495  001A12  1172               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
  8496  001A14  B4D8               	btfsc	status,2,c
  8497  001A16  D22D               	goto	l6253
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;ff.c: 3116:    bcs = (DWORD)fp->fs->csize * ((UINT)512);
  8501  001A18  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8502  001A1C  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8503  001A20  EE10 F002          	lfsr	1,2
  8504  001A24  50DE               	movf	postinc2,w,c
  8505  001A26  26E1               	addwf	fsr1l,f,c
  8506  001A28  50DD               	movf	postdec2,w,c
  8507  001A2A  22E2               	addwfc	fsr1h,f,c
  8508  001A2C  50E7               	movf	indf1,w,c
  8509  001A2E  6F73               	movwf	??_f_lseek& (0+255),b
  8510  001A30  C073  F074         	movff	??_f_lseek,??_f_lseek+1
  8511  001A34  6B75               	clrf	(??_f_lseek+2)& (0+255),b
  8512  001A36  6B76               	clrf	(??_f_lseek+3)& (0+255),b
  8513  001A38  6B77               	clrf	(??_f_lseek+4)& (0+255),b
  8514  001A3A  0E09               	movlw	9
  8515  001A3C                     u8285:
  8516  001A3C  90D8               	bcf	status,0,c
  8517  001A3E  3774               	rlcf	(??_f_lseek+1)& (0+255),f,b
  8518  001A40  3775               	rlcf	(??_f_lseek+2)& (0+255),f,b
  8519  001A42  3776               	rlcf	(??_f_lseek+3)& (0+255),f,b
  8520  001A44  3777               	rlcf	(??_f_lseek+4)& (0+255),f,b
  8521  001A46  2EE8               	decfsz	wreg,f,c
  8522  001A48  D7F9               	goto	u8285
  8523  001A4A  C074  F08C         	movff	??_f_lseek+1,f_lseek@bcs
  8524  001A4E  C075  F08D         	movff	??_f_lseek+2,f_lseek@bcs+1
  8525  001A52  C076  F08E         	movff	??_f_lseek+3,f_lseek@bcs+2
  8526  001A56  C077  F08F         	movff	??_f_lseek+4,f_lseek@bcs+3
  8527                           
  8528                           ; BSR set to: 0
  8529                           ;ff.c: 3117:    if (ifptr > 0 &&
  8530  001A5A  5183               	movf	f_lseek@ifptr& (0+255),w,b
  8531  001A5C  1184               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
  8532  001A5E  1185               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
  8533  001A60  1186               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
  8534  001A62  B4D8               	btfsc	status,2,c
  8535  001A64  D097               	goto	l6175
  8536                           
  8537                           ; BSR set to: 0
  8538  001A66  0EFF               	movlw	255
  8539  001A68  256F               	addwf	f_lseek@ofs& (0+255),w,b
  8540  001A6A  6E01               	movwf	___lldiv@dividend,c
  8541  001A6C  0EFF               	movlw	255
  8542  001A6E  2170               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
  8543  001A70  6E02               	movwf	___lldiv@dividend+1,c
  8544  001A72  0EFF               	movlw	255
  8545  001A74  2171               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
  8546  001A76  6E03               	movwf	___lldiv@dividend+2,c
  8547  001A78  0EFF               	movlw	255
  8548  001A7A  2172               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
  8549  001A7C  6E04               	movwf	___lldiv@dividend+3,c
  8550  001A7E  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  8551  001A82  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8552  001A86  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8553  001A8A  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8554  001A8E  ECC4  F027         	call	___lldiv	;wreg free
  8555  001A92  C001  F073         	movff	?___lldiv,??_f_lseek
  8556  001A96  C002  F074         	movff	?___lldiv+1,??_f_lseek+1
  8557  001A9A  C003  F075         	movff	?___lldiv+2,??_f_lseek+2
  8558  001A9E  C004  F076         	movff	?___lldiv+3,??_f_lseek+3
  8559  001AA2  0EFF               	movlw	255
  8560  001AA4  0100               	movlb	0	; () banked
  8561  001AA6  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  8562  001AA8  6E01               	movwf	___lldiv@dividend,c
  8563  001AAA  0EFF               	movlw	255
  8564  001AAC  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8565  001AAE  6E02               	movwf	___lldiv@dividend+1,c
  8566  001AB0  0EFF               	movlw	255
  8567  001AB2  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8568  001AB4  6E03               	movwf	___lldiv@dividend+2,c
  8569  001AB6  0EFF               	movlw	255
  8570  001AB8  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8571  001ABA  6E04               	movwf	___lldiv@dividend+3,c
  8572  001ABC  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  8573  001AC0  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8574  001AC4  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8575  001AC8  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8576  001ACC  ECC4  F027         	call	___lldiv	;wreg free
  8577  001AD0  5001               	movf	?___lldiv,w,c
  8578  001AD2  0100               	movlb	0	; () banked
  8579  001AD4  5D73               	subwf	??_f_lseek& (0+255),w,b
  8580  001AD6  5002               	movf	?___lldiv+1,w,c
  8581  001AD8  5974               	subwfb	(??_f_lseek+1)& (0+255),w,b
  8582  001ADA  5003               	movf	?___lldiv+2,w,c
  8583  001ADC  5975               	subwfb	(??_f_lseek+2)& (0+255),w,b
  8584  001ADE  5004               	movf	?___lldiv+3,w,c
  8585  001AE0  5976               	subwfb	(??_f_lseek+3)& (0+255),w,b
  8586  001AE2  A0D8               	btfss	status,0,c
  8587  001AE4  D057               	goto	l6175
  8588                           
  8589                           ; BSR set to: 0
  8590                           ;ff.c: 3118:     (ofs - 1) / bcs >= (ifptr - 1) / bcs) {;ff.c: 3119:     fp->fptr = (ifp
      +                          tr - 1) & ~(bcs - 1);
  8591  001AE6  0EFF               	movlw	255
  8592  001AE8  258C               	addwf	f_lseek@bcs& (0+255),w,b
  8593  001AEA  6F73               	movwf	??_f_lseek& (0+255),b
  8594  001AEC  0EFF               	movlw	255
  8595  001AEE  218D               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
  8596  001AF0  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8597  001AF2  0EFF               	movlw	255
  8598  001AF4  218E               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
  8599  001AF6  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8600  001AF8  0EFF               	movlw	255
  8601  001AFA  218F               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
  8602  001AFC  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8603  001AFE  1D73               	comf	??_f_lseek& (0+255),w,b
  8604  001B00  6F77               	movwf	(??_f_lseek+4)& (0+255),b
  8605  001B02  1D74               	comf	(??_f_lseek+1)& (0+255),w,b
  8606  001B04  6F78               	movwf	(??_f_lseek+5)& (0+255),b
  8607  001B06  1D75               	comf	(??_f_lseek+2)& (0+255),w,b
  8608  001B08  6F79               	movwf	(??_f_lseek+6)& (0+255),b
  8609  001B0A  1D76               	comf	(??_f_lseek+3)& (0+255),w,b
  8610  001B0C  6F7A               	movwf	(??_f_lseek+7)& (0+255),b
  8611  001B0E  0EFF               	movlw	255
  8612  001B10  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  8613  001B12  6F7B               	movwf	(??_f_lseek+8)& (0+255),b
  8614  001B14  0EFF               	movlw	255
  8615  001B16  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8616  001B18  6F7C               	movwf	(??_f_lseek+9)& (0+255),b
  8617  001B1A  0EFF               	movlw	255
  8618  001B1C  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8619  001B1E  6F7D               	movwf	(??_f_lseek+10)& (0+255),b
  8620  001B20  0EFF               	movlw	255
  8621  001B22  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8622  001B24  6F7E               	movwf	(??_f_lseek+11)& (0+255),b
  8623  001B26  5177               	movf	(??_f_lseek+4)& (0+255),w,b
  8624  001B28  157B               	andwf	(??_f_lseek+8)& (0+255),w,b
  8625  001B2A  6F7F               	movwf	(??_f_lseek+12)& (0+255),b
  8626  001B2C  5178               	movf	(??_f_lseek+5)& (0+255),w,b
  8627  001B2E  157C               	andwf	(??_f_lseek+9)& (0+255),w,b
  8628  001B30  6F80               	movwf	(??_f_lseek+13)& (0+255),b
  8629  001B32  5179               	movf	(??_f_lseek+6)& (0+255),w,b
  8630  001B34  157D               	andwf	(??_f_lseek+10)& (0+255),w,b
  8631  001B36  6F81               	movwf	(??_f_lseek+14)& (0+255),b
  8632  001B38  517A               	movf	(??_f_lseek+7)& (0+255),w,b
  8633  001B3A  157E               	andwf	(??_f_lseek+11)& (0+255),w,b
  8634  001B3C  6F82               	movwf	(??_f_lseek+15)& (0+255),b
  8635  001B3E  EE20 F006          	lfsr	2,6
  8636  001B42  516D               	movf	f_lseek@fp& (0+255),w,b
  8637  001B44  26D9               	addwf	fsr2l,f,c
  8638  001B46  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8639  001B48  22DA               	addwfc	fsr2h,f,c
  8640  001B4A  C07F  FFDE         	movff	??_f_lseek+12,postinc2
  8641  001B4E  C080  FFDE         	movff	??_f_lseek+13,postinc2
  8642  001B52  C081  FFDE         	movff	??_f_lseek+14,postinc2
  8643  001B56  C082  FFDE         	movff	??_f_lseek+15,postinc2
  8644                           
  8645                           ;ff.c: 3120:     ofs -= fp->fptr;
  8646  001B5A  EE20 F006          	lfsr	2,6
  8647  001B5E  516D               	movf	f_lseek@fp& (0+255),w,b
  8648  001B60  26D9               	addwf	fsr2l,f,c
  8649  001B62  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8650  001B64  22DA               	addwfc	fsr2h,f,c
  8651  001B66  50DE               	movf	postinc2,w,c
  8652  001B68  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  8653  001B6A  50DE               	movf	postinc2,w,c
  8654  001B6C  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8655  001B6E  50DE               	movf	postinc2,w,c
  8656  001B70  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8657  001B72  50DD               	movf	postdec2,w,c
  8658  001B74  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8659                           
  8660                           ;ff.c: 3121:     clst = fp->clust;
  8661  001B76  EE20 F012          	lfsr	2,18
  8662  001B7A  516D               	movf	f_lseek@fp& (0+255),w,b
  8663  001B7C  26D9               	addwf	fsr2l,f,c
  8664  001B7E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8665  001B80  22DA               	addwfc	fsr2h,f,c
  8666  001B82  CFDE F090          	movff	postinc2,f_lseek@clst
  8667  001B86  CFDE F091          	movff	postinc2,f_lseek@clst+1
  8668  001B8A  CFDE F092          	movff	postinc2,f_lseek@clst+2
  8669  001B8E  CFDE F093          	movff	postinc2,f_lseek@clst+3
  8670                           
  8671                           ;ff.c: 3122:    } else {
  8672  001B92  D06E               	goto	l6199
  8673  001B94                     l6175:
  8674                           
  8675                           ; BSR set to: 0
  8676                           ;ff.c: 3123:     clst = fp->sclust;
  8677  001B94  EE20 F00E          	lfsr	2,14
  8678  001B98  516D               	movf	f_lseek@fp& (0+255),w,b
  8679  001B9A  26D9               	addwf	fsr2l,f,c
  8680  001B9C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8681  001B9E  22DA               	addwfc	fsr2h,f,c
  8682  001BA0  CFDE F090          	movff	postinc2,f_lseek@clst
  8683  001BA4  CFDE F091          	movff	postinc2,f_lseek@clst+1
  8684  001BA8  CFDE F092          	movff	postinc2,f_lseek@clst+2
  8685  001BAC  CFDE F093          	movff	postinc2,f_lseek@clst+3
  8686                           
  8687                           ; BSR set to: 0
  8688                           ;ff.c: 3125:     if (clst == 0) {
  8689  001BB0  5190               	movf	f_lseek@clst& (0+255),w,b
  8690  001BB2  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8691  001BB4  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8692  001BB6  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8693  001BB8  A4D8               	btfss	status,2,c
  8694  001BBA  D04C               	goto	l671
  8695                           
  8696                           ; BSR set to: 0
  8697                           ;ff.c: 3126:      clst = create_chain(fp->fs, 0);
  8698  001BBC  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8699  001BC0  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8700  001BC4  CFDE F056          	movff	postinc2,create_chain@fs
  8701  001BC8  CFDD F057          	movff	postdec2,create_chain@fs+1
  8702  001BCC  0E00               	movlw	0
  8703  001BCE  6E58               	movwf	create_chain@clst,c
  8704  001BD0  0E00               	movlw	0
  8705  001BD2  6E59               	movwf	create_chain@clst+1,c
  8706  001BD4  0E00               	movlw	0
  8707  001BD6  6E5A               	movwf	create_chain@clst+2,c
  8708  001BD8  0E00               	movlw	0
  8709  001BDA  6E5B               	movwf	create_chain@clst+3,c
  8710  001BDC  ECA8  F019         	call	_create_chain	;wreg free
  8711  001BE0  C056  F090         	movff	?_create_chain,f_lseek@clst
  8712  001BE4  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  8713  001BE8  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  8714  001BEC  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  8715                           
  8716                           ;ff.c: 3127:      if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  8717  001BF0  0100               	movlb	0	; () banked
  8718  001BF2  0590               	decf	f_lseek@clst& (0+255),w,b
  8719  001BF4  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8720  001BF6  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8721  001BF8  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8722  001BFA  A4D8               	btfss	status,2,c
  8723  001BFC  D00A               	goto	l6189
  8724  001BFE                     u8320:
  8725                           
  8726                           ; BSR set to: 0
  8727  001BFE  EE20 F005          	lfsr	2,5
  8728  001C02  516D               	movf	f_lseek@fp& (0+255),w,b
  8729  001C04  26D9               	addwf	fsr2l,f,c
  8730  001C06  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8731  001C08  22DA               	addwfc	fsr2h,f,c
  8732  001C0A  0E02               	movlw	2
  8733  001C0C  6EDF               	movwf	indf2,c
  8734                           
  8735                           ; BSR set to: 0
  8736  001C0E  0E02               	movlw	2
  8737  001C10  0012               	return	
  8738  001C12                     l6189:
  8739                           
  8740                           ; BSR set to: 0
  8741                           ;ff.c: 3128:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  8742  001C12  2990               	incf	f_lseek@clst& (0+255),w,b
  8743  001C14  E111               	bnz	l6197
  8744  001C16  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  8745  001C18  E10F               	bnz	l6197
  8746  001C1A  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  8747  001C1C  E10D               	bnz	l6197
  8748  001C1E  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  8749  001C20  A4D8               	btfss	status,2,c
  8750  001C22  D00A               	goto	l6197
  8751  001C24                     u8330:
  8752                           
  8753                           ; BSR set to: 0
  8754  001C24  EE20 F005          	lfsr	2,5
  8755  001C28  516D               	movf	f_lseek@fp& (0+255),w,b
  8756  001C2A  26D9               	addwf	fsr2l,f,c
  8757  001C2C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8758  001C2E  22DA               	addwfc	fsr2h,f,c
  8759  001C30  0E01               	movlw	1
  8760  001C32  6EDF               	movwf	indf2,c
  8761                           
  8762                           ; BSR set to: 0
  8763  001C34  0E01               	movlw	1
  8764  001C36  0012               	return	
  8765  001C38                     l6197:
  8766                           
  8767                           ; BSR set to: 0
  8768                           ;ff.c: 3129:      fp->sclust = clst;
  8769  001C38  EE20 F00E          	lfsr	2,14
  8770  001C3C  516D               	movf	f_lseek@fp& (0+255),w,b
  8771  001C3E  26D9               	addwf	fsr2l,f,c
  8772  001C40  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8773  001C42  22DA               	addwfc	fsr2h,f,c
  8774  001C44  C090  FFDE         	movff	f_lseek@clst,postinc2
  8775  001C48  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8776  001C4C  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8777  001C50  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8778  001C54                     l671:
  8779                           
  8780                           ; BSR set to: 0
  8781                           ;ff.c: 3132:     fp->clust = clst;
  8782  001C54  EE20 F012          	lfsr	2,18
  8783  001C58  516D               	movf	f_lseek@fp& (0+255),w,b
  8784  001C5A  26D9               	addwf	fsr2l,f,c
  8785  001C5C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8786  001C5E  22DA               	addwfc	fsr2h,f,c
  8787  001C60  C090  FFDE         	movff	f_lseek@clst,postinc2
  8788  001C64  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8789  001C68  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8790  001C6C  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8791  001C70                     l6199:
  8792                           
  8793                           ; BSR set to: 0
  8794                           ;ff.c: 3134:    if (clst != 0) {
  8795  001C70  5190               	movf	f_lseek@clst& (0+255),w,b
  8796  001C72  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8797  001C74  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8798  001C76  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8799  001C78  A4D8               	btfss	status,2,c
  8800  001C7A  D097               	goto	l6235
  8801  001C7C  D0FA               	goto	l6253
  8802  001C7E                     l6203:
  8803                           
  8804                           ; BSR set to: 0
  8805                           ;ff.c: 3137:      if (fp->flag & 0x02) {
  8806  001C7E  EE20 F004          	lfsr	2,4
  8807  001C82  516D               	movf	f_lseek@fp& (0+255),w,b
  8808  001C84  26D9               	addwf	fsr2l,f,c
  8809  001C86  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8810  001C88  22DA               	addwfc	fsr2h,f,c
  8811  001C8A  A2DF               	btfss	indf2,1,c
  8812  001C8C  D02A               	goto	l6211
  8813                           
  8814                           ; BSR set to: 0
  8815                           ;ff.c: 3138:       clst = create_chain(fp->fs, clst);
  8816  001C8E  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8817  001C92  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8818  001C96  CFDE F056          	movff	postinc2,create_chain@fs
  8819  001C9A  CFDD F057          	movff	postdec2,create_chain@fs+1
  8820  001C9E  C090  F058         	movff	f_lseek@clst,create_chain@clst
  8821  001CA2  C091  F059         	movff	f_lseek@clst+1,create_chain@clst+1
  8822  001CA6  C092  F05A         	movff	f_lseek@clst+2,create_chain@clst+2
  8823  001CAA  C093  F05B         	movff	f_lseek@clst+3,create_chain@clst+3
  8824  001CAE  ECA8  F019         	call	_create_chain	;wreg free
  8825  001CB2  C056  F090         	movff	?_create_chain,f_lseek@clst
  8826  001CB6  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  8827  001CBA  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  8828  001CBE  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  8829                           
  8830                           ;ff.c: 3139:       if (clst == 0) {
  8831  001CC2  0100               	movlb	0	; () banked
  8832  001CC4  5190               	movf	f_lseek@clst& (0+255),w,b
  8833  001CC6  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8834  001CC8  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8835  001CCA  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8836  001CCC  A4D8               	btfss	status,2,c
  8837  001CCE  D023               	goto	l6213
  8838                           
  8839                           ; BSR set to: 0
  8840                           ;ff.c: 3140:        ofs = bcs; break;
  8841  001CD0  C08C  F06F         	movff	f_lseek@bcs,f_lseek@ofs
  8842  001CD4  C08D  F070         	movff	f_lseek@bcs+1,f_lseek@ofs+1
  8843  001CD8  C08E  F071         	movff	f_lseek@bcs+2,f_lseek@ofs+2
  8844  001CDC  C08F  F072         	movff	f_lseek@bcs+3,f_lseek@ofs+3
  8845  001CE0  D06E               	goto	u8400
  8846  001CE2                     l6211:
  8847                           
  8848                           ; BSR set to: 0
  8849                           ;ff.c: 3144:       clst = get_fat(fp->fs, clst);
  8850  001CE2  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8851  001CE6  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8852  001CEA  CFDE F03B          	movff	postinc2,get_fat@fs
  8853  001CEE  CFDD F03C          	movff	postdec2,get_fat@fs+1
  8854  001CF2  C090  F03D         	movff	f_lseek@clst,get_fat@clst
  8855  001CF6  C091  F03E         	movff	f_lseek@clst+1,get_fat@clst+1
  8856  001CFA  C092  F03F         	movff	f_lseek@clst+2,get_fat@clst+2
  8857  001CFE  C093  F040         	movff	f_lseek@clst+3,get_fat@clst+3
  8858  001D02  EC0C  F016         	call	_get_fat	;wreg free
  8859  001D06  C03B  F090         	movff	?_get_fat,f_lseek@clst
  8860  001D0A  C03C  F091         	movff	?_get_fat+1,f_lseek@clst+1
  8861  001D0E  C03D  F092         	movff	?_get_fat+2,f_lseek@clst+2
  8862  001D12  C03E  F093         	movff	?_get_fat+3,f_lseek@clst+3
  8863  001D16                     l6213:
  8864                           
  8865                           ;ff.c: 3145:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  8866  001D16  0100               	movlb	0	; () banked
  8867  001D18  2990               	incf	f_lseek@clst& (0+255),w,b
  8868  001D1A  E107               	bnz	l6221
  8869  001D1C  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  8870  001D1E  E105               	bnz	l6221
  8871  001D20  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  8872  001D22  E103               	bnz	l6221
  8873  001D24  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  8874  001D26  B4D8               	btfsc	status,2,c
  8875  001D28  D77D               	goto	u8330
  8876  001D2A                     l6221:
  8877                           
  8878                           ; BSR set to: 0
  8879                           ;ff.c: 3146:      if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_E
      +                          RR); return FR_INT_ERR; };
  8880  001D2A  5193               	movf	(f_lseek@clst+3)& (0+255),w,b
  8881  001D2C  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8882  001D2E  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8883  001D30  E104               	bnz	u8380
  8884  001D32  0E02               	movlw	2
  8885  001D34  5D90               	subwf	f_lseek@clst& (0+255),w,b
  8886  001D36  A0D8               	btfss	status,0,c
  8887  001D38  D762               	goto	u8320
  8888  001D3A                     u8380:
  8889                           
  8890                           ; BSR set to: 0
  8891  001D3A  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8892  001D3E  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8893  001D42  EE10 F012          	lfsr	1,18
  8894  001D46  50DE               	movf	postinc2,w,c
  8895  001D48  26E1               	addwf	fsr1l,f,c
  8896  001D4A  50DD               	movf	postdec2,w,c
  8897  001D4C  22E2               	addwfc	fsr1h,f,c
  8898  001D4E  50E6               	movf	postinc1,w,c
  8899  001D50  5D90               	subwf	f_lseek@clst& (0+255),w,b
  8900  001D52  50E6               	movf	postinc1,w,c
  8901  001D54  5991               	subwfb	(f_lseek@clst+1)& (0+255),w,b
  8902  001D56  50E6               	movf	postinc1,w,c
  8903  001D58  5992               	subwfb	(f_lseek@clst+2)& (0+255),w,b
  8904  001D5A  50E6               	movf	postinc1,w,c
  8905  001D5C  5993               	subwfb	(f_lseek@clst+3)& (0+255),w,b
  8906  001D5E  B0D8               	btfsc	status,0,c
  8907  001D60  D74E               	goto	u8320
  8908                           
  8909                           ; BSR set to: 0
  8910                           ;ff.c: 3147:      fp->clust = clst;
  8911                           
  8912                           ; BSR set to: 0
  8913  001D62  EE20 F012          	lfsr	2,18
  8914  001D66  516D               	movf	f_lseek@fp& (0+255),w,b
  8915  001D68  26D9               	addwf	fsr2l,f,c
  8916  001D6A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8917  001D6C  22DA               	addwfc	fsr2h,f,c
  8918  001D6E  C090  FFDE         	movff	f_lseek@clst,postinc2
  8919  001D72  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8920  001D76  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8921  001D7A  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8922                           
  8923                           ;ff.c: 3148:      fp->fptr += bcs;
  8924  001D7E  EE20 F006          	lfsr	2,6
  8925  001D82  516D               	movf	f_lseek@fp& (0+255),w,b
  8926  001D84  26D9               	addwf	fsr2l,f,c
  8927  001D86  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8928  001D88  22DA               	addwfc	fsr2h,f,c
  8929  001D8A  518C               	movf	f_lseek@bcs& (0+255),w,b
  8930  001D8C  26DE               	addwf	postinc2,f,c
  8931  001D8E  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8932  001D90  22DE               	addwfc	postinc2,f,c
  8933  001D92  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8934  001D94  22DE               	addwfc	postinc2,f,c
  8935  001D96  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8936  001D98  22DE               	addwfc	postinc2,f,c
  8937                           
  8938                           ; BSR set to: 0
  8939                           ;ff.c: 3149:      ofs -= bcs;
  8940  001D9A  518C               	movf	f_lseek@bcs& (0+255),w,b
  8941  001D9C  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  8942  001D9E  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8943  001DA0  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8944  001DA2  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8945  001DA4  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8946  001DA6  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8947  001DA8  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8948  001DAA                     l6235:
  8949                           
  8950                           ; BSR set to: 0
  8951                           ;ff.c: 3135:     while (ofs > bcs) {
  8952  001DAA  516F               	movf	f_lseek@ofs& (0+255),w,b
  8953  001DAC  5D8C               	subwf	f_lseek@bcs& (0+255),w,b
  8954  001DAE  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8955  001DB0  598D               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
  8956  001DB2  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8957  001DB4  598E               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
  8958  001DB6  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8959  001DB8  598F               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
  8960  001DBA  A0D8               	btfss	status,0,c
  8961  001DBC  D760               	goto	l6203
  8962  001DBE                     u8400:
  8963                           
  8964                           ; BSR set to: 0
  8965                           ;ff.c: 3151:     fp->fptr += ofs;
  8966  001DBE  EE20 F006          	lfsr	2,6
  8967  001DC2  516D               	movf	f_lseek@fp& (0+255),w,b
  8968  001DC4  26D9               	addwf	fsr2l,f,c
  8969  001DC6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8970  001DC8  22DA               	addwfc	fsr2h,f,c
  8971  001DCA  516F               	movf	f_lseek@ofs& (0+255),w,b
  8972  001DCC  26DE               	addwf	postinc2,f,c
  8973  001DCE  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8974  001DD0  22DE               	addwfc	postinc2,f,c
  8975  001DD2  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8976  001DD4  22DE               	addwfc	postinc2,f,c
  8977  001DD6  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8978  001DD8  22DE               	addwfc	postinc2,f,c
  8979                           
  8980                           ; BSR set to: 0
  8981                           ;ff.c: 3152:     if (ofs % ((UINT)512)) {
  8982  001DDA  0EFF               	movlw	255
  8983  001DDC  156F               	andwf	f_lseek@ofs& (0+255),w,b
  8984  001DDE  6F73               	movwf	??_f_lseek& (0+255),b
  8985  001DE0  0E01               	movlw	1
  8986  001DE2  1570               	andwf	(f_lseek@ofs+1)& (0+255),w,b
  8987  001DE4  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8988  001DE6  0E00               	movlw	0
  8989  001DE8  1571               	andwf	(f_lseek@ofs+2)& (0+255),w,b
  8990  001DEA  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8991  001DEC  0E00               	movlw	0
  8992  001DEE  1572               	andwf	(f_lseek@ofs+3)& (0+255),w,b
  8993  001DF0  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8994  001DF2  5173               	movf	??_f_lseek& (0+255),w,b
  8995  001DF4  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
  8996  001DF6  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
  8997  001DF8  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
  8998  001DFA  B4D8               	btfsc	status,2,c
  8999  001DFC  D03A               	goto	l6253
  9000                           
  9001                           ; BSR set to: 0
  9002                           ;ff.c: 3153:      nsect = clust2sect(fp->fs, clst);
  9003  001DFE  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  9004  001E02  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  9005  001E06  CFDE F00D          	movff	postinc2,clust2sect@fs
  9006  001E0A  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  9007  001E0E  C090  F00F         	movff	f_lseek@clst,clust2sect@clst
  9008  001E12  C091  F010         	movff	f_lseek@clst+1,clust2sect@clst+1
  9009  001E16  C092  F011         	movff	f_lseek@clst+2,clust2sect@clst+2
  9010  001E1A  C093  F012         	movff	f_lseek@clst+3,clust2sect@clst+3
  9011  001E1E  EC72  F026         	call	_clust2sect	;wreg free
  9012  001E22  C00D  F088         	movff	?_clust2sect,f_lseek@nsect
  9013  001E26  C00E  F089         	movff	?_clust2sect+1,f_lseek@nsect+1
  9014  001E2A  C00F  F08A         	movff	?_clust2sect+2,f_lseek@nsect+2
  9015  001E2E  C010  F08B         	movff	?_clust2sect+3,f_lseek@nsect+3
  9016                           
  9017                           ;ff.c: 3154:      if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  9018  001E32  0100               	movlb	0	; () banked
  9019  001E34  5188               	movf	f_lseek@nsect& (0+255),w,b
  9020  001E36  1189               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
  9021  001E38  118A               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
  9022  001E3A  118B               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
  9023  001E3C  B4D8               	btfsc	status,2,c
  9024  001E3E  D6DF               	goto	u8320
  9025                           
  9026                           ; BSR set to: 0
  9027                           ;ff.c: 3155:      nsect += ofs / ((UINT)512);
  9028                           
  9029                           ; BSR set to: 0
  9030  001E40  C06F  F073         	movff	f_lseek@ofs,??_f_lseek
  9031  001E44  C070  F074         	movff	f_lseek@ofs+1,??_f_lseek+1
  9032  001E48  C071  F075         	movff	f_lseek@ofs+2,??_f_lseek+2
  9033  001E4C  C072  F076         	movff	f_lseek@ofs+3,??_f_lseek+3
  9034  001E50  0E0A               	movlw	10
  9035  001E52  D005               	goto	u8430
  9036  001E54                     u8435:
  9037  001E54  90D8               	bcf	status,0,c
  9038  001E56  3376               	rrcf	(??_f_lseek+3)& (0+255),f,b
  9039  001E58  3375               	rrcf	(??_f_lseek+2)& (0+255),f,b
  9040  001E5A  3374               	rrcf	(??_f_lseek+1)& (0+255),f,b
  9041  001E5C  3373               	rrcf	??_f_lseek& (0+255),f,b
  9042  001E5E                     u8430:
  9043  001E5E  2EE8               	decfsz	wreg,f,c
  9044  001E60  D7F9               	goto	u8435
  9045  001E62  5173               	movf	??_f_lseek& (0+255),w,b
  9046  001E64  2788               	addwf	f_lseek@nsect& (0+255),f,b
  9047  001E66  5174               	movf	(??_f_lseek+1)& (0+255),w,b
  9048  001E68  2389               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
  9049  001E6A  5175               	movf	(??_f_lseek+2)& (0+255),w,b
  9050  001E6C  238A               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
  9051  001E6E  5176               	movf	(??_f_lseek+3)& (0+255),w,b
  9052  001E70  238B               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
  9053  001E72                     l6253:
  9054                           
  9055                           ; BSR set to: 0
  9056                           ;ff.c: 3159:   if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
  9057  001E72  EE20 F006          	lfsr	2,6
  9058  001E76  516D               	movf	f_lseek@fp& (0+255),w,b
  9059  001E78  26D9               	addwf	fsr2l,f,c
  9060  001E7A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9061  001E7C  22DA               	addwfc	fsr2h,f,c
  9062  001E7E  0EFF               	movlw	255
  9063  001E80  14DE               	andwf	postinc2,w,c
  9064  001E82  6F73               	movwf	??_f_lseek& (0+255),b
  9065  001E84  0E01               	movlw	1
  9066  001E86  14DE               	andwf	postinc2,w,c
  9067  001E88  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  9068  001E8A  0E00               	movlw	0
  9069  001E8C  14DE               	andwf	postinc2,w,c
  9070  001E8E  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  9071  001E90  0E00               	movlw	0
  9072  001E92  14DE               	andwf	postinc2,w,c
  9073  001E94  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  9074  001E96  5173               	movf	??_f_lseek& (0+255),w,b
  9075  001E98  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
  9076  001E9A  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
  9077  001E9C  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
  9078  001E9E  B4D8               	btfsc	status,2,c
  9079  001EA0  D021               	goto	l6259
  9080                           
  9081                           ; BSR set to: 0
  9082  001EA2  EE20 F016          	lfsr	2,22
  9083  001EA6  516D               	movf	f_lseek@fp& (0+255),w,b
  9084  001EA8  26D9               	addwf	fsr2l,f,c
  9085  001EAA  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9086  001EAC  22DA               	addwfc	fsr2h,f,c
  9087  001EAE  5188               	movf	f_lseek@nsect& (0+255),w,b
  9088  001EB0  18DE               	xorwf	postinc2,w,c
  9089  001EB2  E10A               	bnz	u8450
  9090  001EB4  5189               	movf	(f_lseek@nsect+1)& (0+255),w,b
  9091  001EB6  18DE               	xorwf	postinc2,w,c
  9092  001EB8  E107               	bnz	u8450
  9093  001EBA  518A               	movf	(f_lseek@nsect+2)& (0+255),w,b
  9094  001EBC  18DE               	xorwf	postinc2,w,c
  9095  001EBE  E104               	bnz	u8450
  9096  001EC0  518B               	movf	(f_lseek@nsect+3)& (0+255),w,b
  9097  001EC2  18DE               	xorwf	postinc2,w,c
  9098  001EC4  B4D8               	btfsc	status,2,c
  9099  001EC6  D00E               	goto	l6259
  9100  001EC8                     u8450:
  9101                           
  9102                           ; BSR set to: 0
  9103                           ;ff.c: 3171:    fp->dsect = nsect;
  9104  001EC8  EE20 F016          	lfsr	2,22
  9105  001ECC  516D               	movf	f_lseek@fp& (0+255),w,b
  9106  001ECE  26D9               	addwf	fsr2l,f,c
  9107  001ED0  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9108  001ED2  22DA               	addwfc	fsr2h,f,c
  9109  001ED4  C088  FFDE         	movff	f_lseek@nsect,postinc2
  9110  001ED8  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  9111  001EDC  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  9112  001EE0  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  9113  001EE4                     l6259:
  9114                           
  9115                           ; BSR set to: 0
  9116                           ;ff.c: 3174:   if (fp->fptr > fp->fsize) {
  9117  001EE4  EE20 F006          	lfsr	2,6
  9118  001EE8  516D               	movf	f_lseek@fp& (0+255),w,b
  9119  001EEA  26D9               	addwf	fsr2l,f,c
  9120  001EEC  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9121  001EEE  22DA               	addwfc	fsr2h,f,c
  9122  001EF0  EE10 F00A          	lfsr	1,10
  9123  001EF4  516D               	movf	f_lseek@fp& (0+255),w,b
  9124  001EF6  26E1               	addwf	fsr1l,f,c
  9125  001EF8  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9126  001EFA  22E2               	addwfc	fsr1h,f,c
  9127  001EFC  50DE               	movf	postinc2,w,c
  9128  001EFE  5CE6               	subwf	postinc1,w,c
  9129  001F00  50DE               	movf	postinc2,w,c
  9130  001F02  58E6               	subwfb	postinc1,w,c
  9131  001F04  50DE               	movf	postinc2,w,c
  9132  001F06  58E6               	subwfb	postinc1,w,c
  9133  001F08  50DE               	movf	postinc2,w,c
  9134  001F0A  58E6               	subwfb	postinc1,w,c
  9135  001F0C  B0D8               	btfsc	status,0,c
  9136  001F0E  D521               	goto	u8230
  9137                           
  9138                           ; BSR set to: 0
  9139                           ;ff.c: 3175:    fp->fsize = fp->fptr;
  9140  001F10  EE20 F006          	lfsr	2,6
  9141  001F14  516D               	movf	f_lseek@fp& (0+255),w,b
  9142  001F16  26D9               	addwf	fsr2l,f,c
  9143  001F18  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9144  001F1A  22DA               	addwfc	fsr2h,f,c
  9145  001F1C  EE10 F00A          	lfsr	1,10
  9146  001F20  516D               	movf	f_lseek@fp& (0+255),w,b
  9147  001F22  26E1               	addwf	fsr1l,f,c
  9148  001F24  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9149  001F26  22E2               	addwfc	fsr1h,f,c
  9150  001F28  CFDE FFE6          	movff	postinc2,postinc1
  9151  001F2C  CFDE FFE6          	movff	postinc2,postinc1
  9152  001F30  CFDE FFE6          	movff	postinc2,postinc1
  9153  001F34  CFDE FFE6          	movff	postinc2,postinc1
  9154                           
  9155                           ; BSR set to: 0
  9156                           ;ff.c: 3176:    fp->flag |= 0x20;
  9157  001F38  EE20 F004          	lfsr	2,4
  9158  001F3C  516D               	movf	f_lseek@fp& (0+255),w,b
  9159  001F3E  26D9               	addwf	fsr2l,f,c
  9160  001F40  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9161  001F42  22DA               	addwfc	fsr2h,f,c
  9162  001F44  0E00               	movlw	0
  9163  001F46  8ADB               	bsf	plusw2,5,c
  9164  001F48  D504               	goto	u8230
  9165  001F4A                     __end_of_f_lseek:
  9166                           	opt callstack 0
  9167                           
  9168 ;; *************** function _create_chain *****************
  9169 ;; Defined at:
  9170 ;;		line 990 in file "ff.c"
  9171 ;; Parameters:    Size  Location     Type
  9172 ;;  fs              2   85[COMRAM] PTR struct .
  9173 ;;		 -> FatFs(558), NULL(0), 
  9174 ;;  clst            4   87[COMRAM] unsigned long 
  9175 ;; Auto vars:     Size  Location     Type
  9176 ;;  cs              4    9[BANK0 ] unsigned long 
  9177 ;;  ncl             4    5[BANK0 ] unsigned long 
  9178 ;;  scl             4    1[BANK0 ] unsigned long 
  9179 ;;  res             1    0[BANK0 ] enum E93
  9180 ;; Return value:  Size  Location     Type
  9181 ;;                  4   85[COMRAM] unsigned long 
  9182 ;; Registers used:
  9183 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9184 ;; Tracked objects:
  9185 ;;		On entry : 0/0
  9186 ;;		On exit  : 0/0
  9187 ;;		Unchanged: 0/0
  9188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9189 ;;      Params:         6       0       0       0       0       0       0       0       0
  9190 ;;      Locals:         0      13       0       0       0       0       0       0       0
  9191 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9192 ;;      Totals:        10      13       0       0       0       0       0       0       0
  9193 ;;Total ram usage:       23 bytes
  9194 ;; Hardware stack levels used:    1
  9195 ;; Hardware stack levels required when called:    9
  9196 ;; This function calls:
  9197 ;;		_get_fat
  9198 ;;		_put_fat
  9199 ;; This function is called by:
  9200 ;;		_dir_next
  9201 ;;		_f_write
  9202 ;;		_f_lseek
  9203 ;; This function uses a non-reentrant model
  9204 ;;
  9205                           
  9206                           	psect	text24
  9207  003350                     __ptext24:
  9208                           	opt callstack 0
  9209  003350                     _create_chain:
  9210                           	opt callstack 19
  9211                           
  9212                           ;ff.c: 991:  FATFS* fs,;ff.c: 992:  DWORD clst;ff.c: 994: {;ff.c: 995:  DWORD cs, ncl, s
      +                          cl;;ff.c: 996:  FRESULT res;;ff.c: 999:  if (clst == 0) {
  9213                           
  9214                           ; BSR set to: 0
  9215                           ;incstack = 0
  9216  003350  5058               	movf	create_chain@clst,w,c
  9217  003352  1059               	iorwf	create_chain@clst+1,w,c
  9218  003354  105A               	iorwf	create_chain@clst+2,w,c
  9219  003356  105B               	iorwf	create_chain@clst+3,w,c
  9220  003358  A4D8               	btfss	status,2,c
  9221  00335A  D02E               	goto	l4555
  9222                           
  9223                           ;ff.c: 1000:   scl = fs->last_clust;
  9224  00335C  EE20 F00A          	lfsr	2,10
  9225  003360  5056               	movf	create_chain@fs,w,c
  9226  003362  26D9               	addwf	fsr2l,f,c
  9227  003364  5057               	movf	create_chain@fs+1,w,c
  9228  003366  22DA               	addwfc	fsr2h,f,c
  9229  003368  CFDE F061          	movff	postinc2,create_chain@scl
  9230  00336C  CFDE F062          	movff	postinc2,create_chain@scl+1
  9231  003370  CFDE F063          	movff	postinc2,create_chain@scl+2
  9232  003374  CFDE F064          	movff	postinc2,create_chain@scl+3
  9233                           
  9234                           ;ff.c: 1001:   if (!scl || scl >= fs->n_fatent) scl = 1;
  9235  003378  0100               	movlb	0	; () banked
  9236  00337A  5161               	movf	create_chain@scl& (0+255),w,b
  9237  00337C  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  9238  00337E  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  9239  003380  1164               	iorwf	(create_chain@scl+3)& (0+255),w,b
  9240  003382  B4D8               	btfsc	status,2,c
  9241  003384  D010               	goto	u5300
  9242                           
  9243                           ; BSR set to: 0
  9244  003386  EE20 F012          	lfsr	2,18
  9245  00338A  5056               	movf	create_chain@fs,w,c
  9246  00338C  26D9               	addwf	fsr2l,f,c
  9247  00338E  5057               	movf	create_chain@fs+1,w,c
  9248  003390  22DA               	addwfc	fsr2h,f,c
  9249  003392  50DE               	movf	postinc2,w,c
  9250  003394  5D61               	subwf	create_chain@scl& (0+255),w,b
  9251  003396  50DE               	movf	postinc2,w,c
  9252  003398  5962               	subwfb	(create_chain@scl+1)& (0+255),w,b
  9253  00339A  50DE               	movf	postinc2,w,c
  9254  00339C  5963               	subwfb	(create_chain@scl+2)& (0+255),w,b
  9255  00339E  50DE               	movf	postinc2,w,c
  9256  0033A0  5964               	subwfb	(create_chain@scl+3)& (0+255),w,b
  9257  0033A2  A0D8               	btfss	status,0,c
  9258  0033A4  D05B               	goto	l317
  9259  0033A6                     u5300:
  9260                           
  9261                           ; BSR set to: 0
  9262  0033A6  0E01               	movlw	1
  9263  0033A8  6F61               	movwf	create_chain@scl& (0+255),b
  9264  0033AA  0E00               	movlw	0
  9265  0033AC  6F62               	movwf	(create_chain@scl+1)& (0+255),b
  9266  0033AE  0E00               	movlw	0
  9267  0033B0  6F63               	movwf	(create_chain@scl+2)& (0+255),b
  9268  0033B2  0E00               	movlw	0
  9269  0033B4  6F64               	movwf	(create_chain@scl+3)& (0+255),b
  9270  0033B6  D052               	goto	l317
  9271  0033B8                     l4555:
  9272                           
  9273                           ;ff.c: 1004:   cs = get_fat(fs, clst);
  9274  0033B8  C056  F03B         	movff	create_chain@fs,get_fat@fs
  9275  0033BC  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  9276  0033C0  C058  F03D         	movff	create_chain@clst,get_fat@clst
  9277  0033C4  C059  F03E         	movff	create_chain@clst+1,get_fat@clst+1
  9278  0033C8  C05A  F03F         	movff	create_chain@clst+2,get_fat@clst+2
  9279  0033CC  C05B  F040         	movff	create_chain@clst+3,get_fat@clst+3
  9280  0033D0  EC0C  F016         	call	_get_fat	;wreg free
  9281  0033D4  C03B  F069         	movff	?_get_fat,create_chain@cs
  9282  0033D8  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  9283  0033DC  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  9284  0033E0  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  9285                           
  9286                           ;ff.c: 1005:   if (cs < 2) return 1;
  9287  0033E4  0100               	movlb	0	; () banked
  9288  0033E6  516C               	movf	(create_chain@cs+3)& (0+255),w,b
  9289  0033E8  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9290  0033EA  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9291  0033EC  E10D               	bnz	l4563
  9292  0033EE  0E02               	movlw	2
  9293  0033F0  5D69               	subwf	create_chain@cs& (0+255),w,b
  9294  0033F2  B0D8               	btfsc	status,0,c
  9295  0033F4  D009               	goto	l4563
  9296                           
  9297                           ; BSR set to: 0
  9298  0033F6  0E01               	movlw	1
  9299  0033F8  6E56               	movwf	?_create_chain,c
  9300  0033FA  0E00               	movlw	0
  9301  0033FC  6E57               	movwf	?_create_chain+1,c
  9302  0033FE  0E00               	movlw	0
  9303  003400  6E58               	movwf	?_create_chain+2,c
  9304  003402  0E00               	movlw	0
  9305  003404  6E59               	movwf	?_create_chain+3,c
  9306  003406  0012               	return	
  9307  003408                     l4563:
  9308                           
  9309                           ; BSR set to: 0
  9310                           ;ff.c: 1006:   if (cs == 0xFFFFFFFF) return cs;
  9311  003408  2969               	incf	create_chain@cs& (0+255),w,b
  9312  00340A  E110               	bnz	l4567
  9313  00340C  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  9314  00340E  E10E               	bnz	l4567
  9315  003410  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  9316  003412  E10C               	bnz	l4567
  9317  003414  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  9318  003416  A4D8               	btfss	status,2,c
  9319  003418  D009               	goto	l4567
  9320  00341A                     u5320:
  9321                           
  9322                           ; BSR set to: 0
  9323  00341A  C069  F056         	movff	create_chain@cs,?_create_chain
  9324  00341E  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
  9325  003422  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
  9326  003426  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
  9327  00342A  0012               	return	
  9328  00342C                     l4567:
  9329                           
  9330                           ; BSR set to: 0
  9331                           ;ff.c: 1007:   if (cs < fs->n_fatent) return cs;
  9332  00342C  EE20 F012          	lfsr	2,18
  9333  003430  5056               	movf	create_chain@fs,w,c
  9334  003432  26D9               	addwf	fsr2l,f,c
  9335  003434  5057               	movf	create_chain@fs+1,w,c
  9336  003436  22DA               	addwfc	fsr2h,f,c
  9337  003438  50DE               	movf	postinc2,w,c
  9338  00343A  5D69               	subwf	create_chain@cs& (0+255),w,b
  9339  00343C  50DE               	movf	postinc2,w,c
  9340  00343E  596A               	subwfb	(create_chain@cs+1)& (0+255),w,b
  9341  003440  50DE               	movf	postinc2,w,c
  9342  003442  596B               	subwfb	(create_chain@cs+2)& (0+255),w,b
  9343  003444  50DE               	movf	postinc2,w,c
  9344  003446  596C               	subwfb	(create_chain@cs+3)& (0+255),w,b
  9345  003448  A0D8               	btfss	status,0,c
  9346  00344A  D7E7               	goto	u5320
  9347                           
  9348                           ; BSR set to: 0
  9349                           ;ff.c: 1008:   scl = clst;
  9350  00344C  C058  F061         	movff	create_chain@clst,create_chain@scl
  9351  003450  C059  F062         	movff	create_chain@clst+1,create_chain@scl+1
  9352  003454  C05A  F063         	movff	create_chain@clst+2,create_chain@scl+2
  9353  003458  C05B  F064         	movff	create_chain@clst+3,create_chain@scl+3
  9354  00345C                     l317:
  9355                           
  9356                           ; BSR set to: 0
  9357                           ;ff.c: 1011:  ncl = scl;
  9358  00345C  C061  F065         	movff	create_chain@scl,create_chain@ncl
  9359  003460  C062  F066         	movff	create_chain@scl+1,create_chain@ncl+1
  9360  003464  C063  F067         	movff	create_chain@scl+2,create_chain@ncl+2
  9361  003468  C064  F068         	movff	create_chain@scl+3,create_chain@ncl+3
  9362  00346C                     l4571:
  9363                           
  9364                           ; BSR set to: 0
  9365                           ;ff.c: 1013:   ncl++;
  9366  00346C  0E01               	movlw	1
  9367  00346E  2765               	addwf	create_chain@ncl& (0+255),f,b
  9368  003470  0E00               	movlw	0
  9369  003472  2366               	addwfc	(create_chain@ncl+1)& (0+255),f,b
  9370  003474  2367               	addwfc	(create_chain@ncl+2)& (0+255),f,b
  9371  003476  2368               	addwfc	(create_chain@ncl+3)& (0+255),f,b
  9372                           
  9373                           ; BSR set to: 0
  9374                           ;ff.c: 1014:   if (ncl >= fs->n_fatent) {
  9375  003478  EE20 F012          	lfsr	2,18
  9376  00347C  5056               	movf	create_chain@fs,w,c
  9377  00347E  26D9               	addwf	fsr2l,f,c
  9378  003480  5057               	movf	create_chain@fs+1,w,c
  9379  003482  22DA               	addwfc	fsr2h,f,c
  9380  003484  50DE               	movf	postinc2,w,c
  9381  003486  5D65               	subwf	create_chain@ncl& (0+255),w,b
  9382  003488  50DE               	movf	postinc2,w,c
  9383  00348A  5966               	subwfb	(create_chain@ncl+1)& (0+255),w,b
  9384  00348C  50DE               	movf	postinc2,w,c
  9385  00348E  5967               	subwfb	(create_chain@ncl+2)& (0+255),w,b
  9386  003490  50DE               	movf	postinc2,w,c
  9387  003492  5968               	subwfb	(create_chain@ncl+3)& (0+255),w,b
  9388  003494  A0D8               	btfss	status,0,c
  9389  003496  D019               	goto	l4583
  9390                           
  9391                           ; BSR set to: 0
  9392                           ;ff.c: 1015:    ncl = 2;
  9393  003498  0E02               	movlw	2
  9394  00349A  6F65               	movwf	create_chain@ncl& (0+255),b
  9395  00349C  0E00               	movlw	0
  9396  00349E  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  9397  0034A0  0E00               	movlw	0
  9398  0034A2  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  9399  0034A4  0E00               	movlw	0
  9400  0034A6  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  9401                           
  9402                           ; BSR set to: 0
  9403                           ;ff.c: 1016:    if (ncl > scl) return 0;
  9404  0034A8  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  9405  0034AA  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  9406  0034AC  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  9407  0034AE  E10D               	bnz	l4583
  9408  0034B0  0E02               	movlw	2
  9409  0034B2  5D61               	subwf	create_chain@scl& (0+255),w,b
  9410  0034B4  B0D8               	btfsc	status,0,c
  9411  0034B6  D009               	goto	l4583
  9412  0034B8                     u5350:
  9413                           
  9414                           ; BSR set to: 0
  9415  0034B8  0E00               	movlw	0
  9416  0034BA  6E56               	movwf	?_create_chain,c
  9417  0034BC  0E00               	movlw	0
  9418  0034BE  6E57               	movwf	?_create_chain+1,c
  9419  0034C0  0E00               	movlw	0
  9420  0034C2  6E58               	movwf	?_create_chain+2,c
  9421  0034C4  0E00               	movlw	0
  9422  0034C6  6E59               	movwf	?_create_chain+3,c
  9423  0034C8  0012               	return	
  9424  0034CA                     l4583:
  9425                           
  9426                           ; BSR set to: 0
  9427                           ;ff.c: 1018:   cs = get_fat(fs, ncl);
  9428  0034CA  C056  F03B         	movff	create_chain@fs,get_fat@fs
  9429  0034CE  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  9430  0034D2  C065  F03D         	movff	create_chain@ncl,get_fat@clst
  9431  0034D6  C066  F03E         	movff	create_chain@ncl+1,get_fat@clst+1
  9432  0034DA  C067  F03F         	movff	create_chain@ncl+2,get_fat@clst+2
  9433  0034DE  C068  F040         	movff	create_chain@ncl+3,get_fat@clst+3
  9434  0034E2  EC0C  F016         	call	_get_fat	;wreg free
  9435  0034E6  C03B  F069         	movff	?_get_fat,create_chain@cs
  9436  0034EA  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  9437  0034EE  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  9438  0034F2  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  9439                           
  9440                           ;ff.c: 1019:   if (cs == 0) break;
  9441  0034F6  0100               	movlb	0	; () banked
  9442  0034F8  5169               	movf	create_chain@cs& (0+255),w,b
  9443  0034FA  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9444  0034FC  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9445  0034FE  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  9446  003500  B4D8               	btfsc	status,2,c
  9447  003502  D01D               	goto	l4599
  9448                           
  9449                           ; BSR set to: 0
  9450                           ;ff.c: 1020:   if (cs == 0xFFFFFFFF || cs == 1)
  9451  003504  2969               	incf	create_chain@cs& (0+255),w,b
  9452  003506  E107               	bnz	u5370
  9453  003508  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  9454  00350A  E105               	bnz	u5370
  9455  00350C  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  9456  00350E  E103               	bnz	u5370
  9457  003510  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  9458  003512  B4D8               	btfsc	status,2,c
  9459  003514  D782               	goto	u5320
  9460  003516                     u5370:
  9461                           
  9462                           ; BSR set to: 0
  9463  003516  0569               	decf	create_chain@cs& (0+255),w,b
  9464  003518  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9465  00351A  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9466  00351C  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  9467  00351E  B4D8               	btfsc	status,2,c
  9468  003520  D77C               	goto	u5320
  9469                           
  9470                           ; BSR set to: 0
  9471                           ;ff.c: 1022:   if (ncl == scl) return 0;
  9472  003522  5161               	movf	create_chain@scl& (0+255),w,b
  9473  003524  1965               	xorwf	create_chain@ncl& (0+255),w,b
  9474  003526  E1A2               	bnz	l4571
  9475  003528  5162               	movf	(create_chain@scl+1)& (0+255),w,b
  9476  00352A  1966               	xorwf	(create_chain@ncl+1)& (0+255),w,b
  9477  00352C  E19F               	bnz	l4571
  9478  00352E  5163               	movf	(create_chain@scl+2)& (0+255),w,b
  9479  003530  1967               	xorwf	(create_chain@ncl+2)& (0+255),w,b
  9480  003532  E19C               	bnz	l4571
  9481  003534  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  9482  003536  1968               	xorwf	(create_chain@ncl+3)& (0+255),w,b
  9483  003538  B4D8               	btfsc	status,2,c
  9484  00353A  D7BE               	goto	u5350
  9485  00353C  D797               	goto	l4571
  9486  00353E                     l4599:
  9487                           
  9488                           ; BSR set to: 0
  9489                           ;ff.c: 1025:  res = put_fat(fs, ncl, 0x0FFFFFFF);
  9490  00353E  C056  F03B         	movff	create_chain@fs,put_fat@fs
  9491  003542  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  9492  003546  C065  F03D         	movff	create_chain@ncl,put_fat@clst
  9493  00354A  C066  F03E         	movff	create_chain@ncl+1,put_fat@clst+1
  9494  00354E  C067  F03F         	movff	create_chain@ncl+2,put_fat@clst+2
  9495  003552  C068  F040         	movff	create_chain@ncl+3,put_fat@clst+3
  9496  003556  0EFF               	movlw	255
  9497  003558  6E41               	movwf	put_fat@val,c
  9498  00355A  0EFF               	movlw	255
  9499  00355C  6E42               	movwf	put_fat@val+1,c
  9500  00355E  0EFF               	movlw	255
  9501  003560  6E43               	movwf	put_fat@val+2,c
  9502  003562  0E0F               	movlw	15
  9503  003564  6E44               	movwf	put_fat@val+3,c
  9504  003566  ECF4  F011         	call	_put_fat	;wreg free
  9505  00356A  0100               	movlb	0	; () banked
  9506  00356C  6F60               	movwf	create_chain@res& (0+255),b
  9507                           
  9508                           ; BSR set to: 0
  9509                           ;ff.c: 1026:  if (res == FR_OK && clst != 0) {
  9510  00356E  5160               	movf	create_chain@res& (0+255),w,b
  9511  003570  A4D8               	btfss	status,2,c
  9512  003572  D01E               	goto	l4607
  9513                           
  9514                           ; BSR set to: 0
  9515  003574  5058               	movf	create_chain@clst,w,c
  9516  003576  1059               	iorwf	create_chain@clst+1,w,c
  9517  003578  105A               	iorwf	create_chain@clst+2,w,c
  9518  00357A  105B               	iorwf	create_chain@clst+3,w,c
  9519  00357C  B4D8               	btfsc	status,2,c
  9520  00357E  D018               	goto	l4607
  9521                           
  9522                           ; BSR set to: 0
  9523                           ;ff.c: 1027:   res = put_fat(fs, clst, ncl);
  9524  003580  C056  F03B         	movff	create_chain@fs,put_fat@fs
  9525  003584  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  9526  003588  C058  F03D         	movff	create_chain@clst,put_fat@clst
  9527  00358C  C059  F03E         	movff	create_chain@clst+1,put_fat@clst+1
  9528  003590  C05A  F03F         	movff	create_chain@clst+2,put_fat@clst+2
  9529  003594  C05B  F040         	movff	create_chain@clst+3,put_fat@clst+3
  9530  003598  C065  F041         	movff	create_chain@ncl,put_fat@val
  9531  00359C  C066  F042         	movff	create_chain@ncl+1,put_fat@val+1
  9532  0035A0  C067  F043         	movff	create_chain@ncl+2,put_fat@val+2
  9533  0035A4  C068  F044         	movff	create_chain@ncl+3,put_fat@val+3
  9534  0035A8  ECF4  F011         	call	_put_fat	;wreg free
  9535  0035AC  0100               	movlb	0	; () banked
  9536  0035AE  6F60               	movwf	create_chain@res& (0+255),b
  9537  0035B0                     l4607:
  9538                           
  9539                           ; BSR set to: 0
  9540                           ;ff.c: 1029:  if (res == FR_OK) {
  9541  0035B0  5160               	movf	create_chain@res& (0+255),w,b
  9542  0035B2  A4D8               	btfss	status,2,c
  9543  0035B4  D031               	goto	l4613
  9544                           
  9545                           ; BSR set to: 0
  9546                           ;ff.c: 1030:   fs->last_clust = ncl;
  9547  0035B6  EE20 F00A          	lfsr	2,10
  9548  0035BA  5056               	movf	create_chain@fs,w,c
  9549  0035BC  26D9               	addwf	fsr2l,f,c
  9550  0035BE  5057               	movf	create_chain@fs+1,w,c
  9551  0035C0  22DA               	addwfc	fsr2h,f,c
  9552  0035C2  C065  FFDE         	movff	create_chain@ncl,postinc2
  9553  0035C6  C066  FFDE         	movff	create_chain@ncl+1,postinc2
  9554  0035CA  C067  FFDE         	movff	create_chain@ncl+2,postinc2
  9555  0035CE  C068  FFDE         	movff	create_chain@ncl+3,postinc2
  9556                           
  9557                           ;ff.c: 1031:   if (fs->free_clust != 0xFFFFFFFF) {
  9558  0035D2  EE20 F00E          	lfsr	2,14
  9559  0035D6  5056               	movf	create_chain@fs,w,c
  9560  0035D8  26D9               	addwf	fsr2l,f,c
  9561  0035DA  5057               	movf	create_chain@fs+1,w,c
  9562  0035DC  22DA               	addwfc	fsr2h,f,c
  9563  0035DE  28DE               	incf	postinc2,w,c
  9564  0035E0  E107               	bnz	u5430
  9565  0035E2  28DE               	incf	postinc2,w,c
  9566  0035E4  E105               	bnz	u5430
  9567  0035E6  28DE               	incf	postinc2,w,c
  9568  0035E8  E103               	bnz	u5430
  9569  0035EA  28DE               	incf	postinc2,w,c
  9570  0035EC  B4D8               	btfsc	status,2,c
  9571  0035EE  D024               	goto	l334
  9572  0035F0                     u5430:
  9573                           
  9574                           ; BSR set to: 0
  9575                           ;ff.c: 1032:    fs->free_clust--;
  9576  0035F0  EE20 F00E          	lfsr	2,14
  9577  0035F4  5056               	movf	create_chain@fs,w,c
  9578  0035F6  26D9               	addwf	fsr2l,f,c
  9579  0035F8  5057               	movf	create_chain@fs+1,w,c
  9580  0035FA  22DA               	addwfc	fsr2h,f,c
  9581  0035FC  06DE               	decf	postinc2,f,c
  9582  0035FE  0E00               	movlw	0
  9583  003600  5ADE               	subwfb	postinc2,f,c
  9584  003602  5ADE               	subwfb	postinc2,f,c
  9585  003604  5ADE               	subwfb	postinc2,f,c
  9586                           
  9587                           ;ff.c: 1033:    fs->fsi_flag |= 1;
  9588  003606  EE20 F005          	lfsr	2,5
  9589  00360A  5056               	movf	create_chain@fs,w,c
  9590  00360C  26D9               	addwf	fsr2l,f,c
  9591  00360E  5057               	movf	create_chain@fs+1,w,c
  9592  003610  22DA               	addwfc	fsr2h,f,c
  9593  003612  0E00               	movlw	0
  9594  003614  80DB               	bsf	plusw2,0,c
  9595  003616  D010               	goto	l334
  9596  003618                     l4613:
  9597                           
  9598                           ; BSR set to: 0
  9599                           ;ff.c: 1036:   ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  9600  003618  0560               	decf	create_chain@res& (0+255),w,b
  9601  00361A  B4D8               	btfsc	status,2,c
  9602  00361C  D009               	goto	l336
  9603                           
  9604                           ; BSR set to: 0
  9605  00361E  0E01               	movlw	1
  9606  003620  6F65               	movwf	create_chain@ncl& (0+255),b
  9607  003622  0E00               	movlw	0
  9608  003624  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  9609  003626  0E00               	movlw	0
  9610  003628  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  9611  00362A  0E00               	movlw	0
  9612  00362C  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  9613  00362E  D004               	goto	l334
  9614  003630                     l336:
  9615                           
  9616                           ; BSR set to: 0
  9617  003630  6965               	setf	create_chain@ncl& (0+255),b
  9618  003632  6966               	setf	(create_chain@ncl+1)& (0+255),b
  9619  003634  6967               	setf	(create_chain@ncl+2)& (0+255),b
  9620  003636  6968               	setf	(create_chain@ncl+3)& (0+255),b
  9621  003638                     l334:
  9622                           
  9623                           ; BSR set to: 0
  9624                           ;ff.c: 1039:  return ncl;
  9625  003638  C065  F056         	movff	create_chain@ncl,?_create_chain
  9626  00363C  C066  F057         	movff	create_chain@ncl+1,?_create_chain+1
  9627  003640  C067  F058         	movff	create_chain@ncl+2,?_create_chain+2
  9628  003644  C068  F059         	movff	create_chain@ncl+3,?_create_chain+3
  9629                           
  9630                           ; BSR set to: 0
  9631  003648  0012               	return		;funcret
  9632  00364A                     __end_of_create_chain:
  9633                           	opt callstack 0
  9634                           
  9635 ;; *************** function _put_fat *****************
  9636 ;; Defined at:
  9637 ;;		line 873 in file "ff.c"
  9638 ;; Parameters:    Size  Location     Type
  9639 ;;  fs              2   58[COMRAM] PTR struct .
  9640 ;;		 -> FatFs(558), NULL(0), 
  9641 ;;  clst            4   60[COMRAM] unsigned long 
  9642 ;;  val             4   64[COMRAM] unsigned long 
  9643 ;; Auto vars:     Size  Location     Type
  9644 ;;  p               2   83[COMRAM] PTR unsigned char 
  9645 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
  9646 ;;  bc              2   80[COMRAM] unsigned short 
  9647 ;;  res             1   82[COMRAM] enum E93
  9648 ;; Return value:  Size  Location     Type
  9649 ;;                  1    wreg      enum E93
  9650 ;; Registers used:
  9651 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9652 ;; Tracked objects:
  9653 ;;		On entry : 0/0
  9654 ;;		On exit  : 0/0
  9655 ;;		Unchanged: 0/0
  9656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9657 ;;      Params:        10       0       0       0       0       0       0       0       0
  9658 ;;      Locals:         9       0       0       0       0       0       0       0       0
  9659 ;;      Temps:          8       0       0       0       0       0       0       0       0
  9660 ;;      Totals:        27       0       0       0       0       0       0       0       0
  9661 ;;Total ram usage:       27 bytes
  9662 ;; Hardware stack levels used:    1
  9663 ;; Hardware stack levels required when called:    8
  9664 ;; This function calls:
  9665 ;;		_move_window
  9666 ;; This function is called by:
  9667 ;;		_remove_chain
  9668 ;;		_create_chain
  9669 ;; This function uses a non-reentrant model
  9670 ;;
  9671                           
  9672                           	psect	text25
  9673  0023E8                     __ptext25:
  9674                           	opt callstack 0
  9675  0023E8                     _put_fat:
  9676                           	opt callstack 19
  9677                           
  9678                           ;ff.c: 874:  FATFS* fs,;ff.c: 875:  DWORD clst,;ff.c: 876:  DWORD val;ff.c: 878: {;ff.c:
      +                           879:  UINT bc;;ff.c: 880:  BYTE *p;;ff.c: 881:  FRESULT res;;ff.c: 884:  if (clst < 2 |
      +                          | clst >= fs->n_fatent) {
  9679                           
  9680                           ; BSR set to: 0
  9681                           ;incstack = 0
  9682  0023E8  5040               	movf	put_fat@clst+3,w,c
  9683  0023EA  103F               	iorwf	put_fat@clst+2,w,c
  9684  0023EC  103E               	iorwf	put_fat@clst+1,w,c
  9685  0023EE  E104               	bnz	u5120
  9686  0023F0  0E02               	movlw	2
  9687  0023F2  5C3D               	subwf	put_fat@clst,w,c
  9688  0023F4  A0D8               	btfss	status,0,c
  9689  0023F6  D010               	goto	u5130
  9690  0023F8                     u5120:
  9691  0023F8  EE20 F012          	lfsr	2,18
  9692  0023FC  503B               	movf	put_fat@fs,w,c
  9693  0023FE  26D9               	addwf	fsr2l,f,c
  9694  002400  503C               	movf	put_fat@fs+1,w,c
  9695  002402  22DA               	addwfc	fsr2h,f,c
  9696  002404  50DE               	movf	postinc2,w,c
  9697  002406  5C3D               	subwf	put_fat@clst,w,c
  9698  002408  50DE               	movf	postinc2,w,c
  9699  00240A  583E               	subwfb	put_fat@clst+1,w,c
  9700  00240C  50DE               	movf	postinc2,w,c
  9701  00240E  583F               	subwfb	put_fat@clst+2,w,c
  9702  002410  50DE               	movf	postinc2,w,c
  9703  002412  5840               	subwfb	put_fat@clst+3,w,c
  9704  002414  A0D8               	btfss	status,0,c
  9705  002416  D1E5               	goto	l4505
  9706  002418                     u5130:
  9707                           
  9708                           ;ff.c: 885:   res = FR_INT_ERR;
  9709  002418  0E02               	movlw	2
  9710  00241A  6E53               	movwf	put_fat@res,c
  9711                           
  9712                           ;ff.c: 887:  } else {
  9713  00241C  D1F8               	goto	l4507
  9714  00241E                     l278:
  9715                           
  9716                           ;ff.c: 890:    bc = (UINT)clst; bc += bc / 2;
  9717  00241E  C03D  F051         	movff	put_fat@clst,put_fat@bc
  9718  002422  C03E  F052         	movff	put_fat@clst+1,put_fat@bc+1
  9719  002426  90D8               	bcf	status,0,c
  9720  002428  3052               	rrcf	put_fat@bc+1,w,c
  9721  00242A  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9722  00242C  3051               	rrcf	put_fat@bc,w,c
  9723  00242E  6E45               	movwf	??_put_fat& (0+255),c
  9724  002430  5045               	movf	??_put_fat,w,c
  9725  002432  2651               	addwf	put_fat@bc,f,c
  9726  002434  5046               	movf	??_put_fat+1,w,c
  9727  002436  2252               	addwfc	put_fat@bc+1,f,c
  9728                           
  9729                           ;ff.c: 891:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  9730  002438  C03B  F030         	movff	put_fat@fs,move_window@fs
  9731  00243C  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9732  002440  EE20 F01E          	lfsr	2,30
  9733  002444  503B               	movf	put_fat@fs,w,c
  9734  002446  26D9               	addwf	fsr2l,f,c
  9735  002448  503C               	movf	put_fat@fs+1,w,c
  9736  00244A  22DA               	addwfc	fsr2h,f,c
  9737  00244C  CFDE F045          	movff	postinc2,??_put_fat
  9738  002450  CFDE F046          	movff	postinc2,??_put_fat+1
  9739  002454  CFDE F047          	movff	postinc2,??_put_fat+2
  9740  002458  CFDE F048          	movff	postinc2,??_put_fat+3
  9741  00245C  C051  F049         	movff	put_fat@bc,??_put_fat+4
  9742  002460  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  9743  002464  0E09               	movlw	9
  9744  002466  6E4B               	movwf	(??_put_fat+6)& (0+255),c
  9745  002468                     u5145:
  9746  002468  90D8               	bcf	status,0,c
  9747  00246A  324A               	rrcf	??_put_fat+5,f,c
  9748  00246C  3249               	rrcf	??_put_fat+4,f,c
  9749  00246E  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
  9750  002470  D7FB               	goto	u5145
  9751  002472  5049               	movf	??_put_fat+4,w,c
  9752  002474  2445               	addwf	??_put_fat,w,c
  9753  002476  6E32               	movwf	move_window@sector,c
  9754  002478  504A               	movf	??_put_fat+5,w,c
  9755  00247A  2046               	addwfc	??_put_fat+1,w,c
  9756  00247C  6E33               	movwf	move_window@sector+1,c
  9757  00247E  0E00               	movlw	0
  9758  002480  2047               	addwfc	??_put_fat+2,w,c
  9759  002482  6E34               	movwf	move_window@sector+2,c
  9760  002484  0E00               	movlw	0
  9761  002486  2048               	addwfc	??_put_fat+3,w,c
  9762  002488  6E35               	movwf	move_window@sector+3,c
  9763  00248A  EC27  F027         	call	_move_window	;wreg free
  9764  00248E  6E53               	movwf	put_fat@res,c
  9765                           
  9766                           ;ff.c: 892:    if (res != FR_OK) break;
  9767  002490  5053               	movf	put_fat@res,w,c
  9768  002492  A4D8               	btfss	status,2,c
  9769  002494  D1BC               	goto	l4507
  9770                           
  9771                           ;ff.c: 893:    p = &fs->win[bc++ % ((UINT)512)];
  9772  002496  0EFF               	movlw	255
  9773  002498  6E45               	movwf	??_put_fat& (0+255),c
  9774  00249A  0E01               	movlw	1
  9775  00249C  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9776  00249E  C051  F047         	movff	put_fat@bc,??_put_fat+2
  9777  0024A2  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
  9778  0024A6  5045               	movf	??_put_fat,w,c
  9779  0024A8  1647               	andwf	??_put_fat+2,f,c
  9780  0024AA  5046               	movf	??_put_fat+1,w,c
  9781  0024AC  1648               	andwf	??_put_fat+3,f,c
  9782  0024AE  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9783  0024B2  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9784  0024B6  5047               	movf	??_put_fat+2,w,c
  9785  0024B8  2649               	addwf	??_put_fat+4,f,c
  9786  0024BA  5048               	movf	??_put_fat+3,w,c
  9787  0024BC  224A               	addwfc	??_put_fat+5,f,c
  9788  0024BE  0E2E               	movlw	46
  9789  0024C0  2449               	addwf	??_put_fat+4,w,c
  9790  0024C2  6E54               	movwf	put_fat@p,c
  9791  0024C4  0E00               	movlw	0
  9792  0024C6  204A               	addwfc	??_put_fat+5,w,c
  9793  0024C8  6E55               	movwf	put_fat@p+1,c
  9794  0024CA  4A51               	infsnz	put_fat@bc,f,c
  9795  0024CC  2A52               	incf	put_fat@bc+1,f,c
  9796                           
  9797                           ;ff.c: 894:    *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  9798  0024CE  B03D               	btfsc	put_fat@clst,0,c
  9799  0024D0  D004               	goto	l4459
  9800  0024D2  C041  F04D         	movff	put_fat@val,_put_fat$400
  9801  0024D6  6A4E               	clrf	_put_fat$400+1,c
  9802  0024D8  D01A               	goto	l4461
  9803  0024DA                     l4459:
  9804  0024DA  5041               	movf	put_fat@val,w,c
  9805  0024DC  6E45               	movwf	??_put_fat& (0+255),c
  9806  0024DE  6A46               	clrf	(??_put_fat+1)& (0+255),c
  9807  0024E0  3A45               	swapf	??_put_fat,f,c
  9808  0024E2  3A46               	swapf	??_put_fat+1,f,c
  9809  0024E4  0EF0               	movlw	240
  9810  0024E6  1646               	andwf	??_put_fat+1,f,c
  9811  0024E8  5045               	movf	??_put_fat,w,c
  9812  0024EA  0B0F               	andlw	15
  9813  0024EC  1246               	iorwf	??_put_fat+1,f,c
  9814  0024EE  0EF0               	movlw	240
  9815  0024F0  1645               	andwf	??_put_fat,f,c
  9816  0024F2  C054  FFD9         	movff	put_fat@p,fsr2l
  9817  0024F6  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9818  0024FA  50DF               	movf	indf2,w,c
  9819  0024FC  0B0F               	andlw	15
  9820  0024FE  6E47               	movwf	(??_put_fat+2)& (0+255),c
  9821  002500  6A48               	clrf	(??_put_fat+3)& (0+255),c
  9822  002502  5045               	movf	??_put_fat,w,c
  9823  002504  1047               	iorwf	??_put_fat+2,w,c
  9824  002506  6E4D               	movwf	_put_fat$400,c
  9825  002508  5046               	movf	??_put_fat+1,w,c
  9826  00250A  1048               	iorwf	??_put_fat+3,w,c
  9827  00250C  6E4E               	movwf	_put_fat$400+1,c
  9828  00250E                     l4461:
  9829  00250E  C054  FFD9         	movff	put_fat@p,fsr2l
  9830  002512  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9831  002516  C04D  FFDF         	movff	_put_fat$400,indf2
  9832                           
  9833                           ;ff.c: 895:    fs->wflag = 1;
  9834  00251A  EE20 F004          	lfsr	2,4
  9835  00251E  503B               	movf	put_fat@fs,w,c
  9836  002520  26D9               	addwf	fsr2l,f,c
  9837  002522  503C               	movf	put_fat@fs+1,w,c
  9838  002524  22DA               	addwfc	fsr2h,f,c
  9839  002526  0E01               	movlw	1
  9840  002528  6EDF               	movwf	indf2,c
  9841                           
  9842                           ;ff.c: 896:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  9843  00252A  C03B  F030         	movff	put_fat@fs,move_window@fs
  9844  00252E  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9845  002532  EE20 F01E          	lfsr	2,30
  9846  002536  503B               	movf	put_fat@fs,w,c
  9847  002538  26D9               	addwf	fsr2l,f,c
  9848  00253A  503C               	movf	put_fat@fs+1,w,c
  9849  00253C  22DA               	addwfc	fsr2h,f,c
  9850  00253E  CFDE F045          	movff	postinc2,??_put_fat
  9851  002542  CFDE F046          	movff	postinc2,??_put_fat+1
  9852  002546  CFDE F047          	movff	postinc2,??_put_fat+2
  9853  00254A  CFDE F048          	movff	postinc2,??_put_fat+3
  9854  00254E  C051  F049         	movff	put_fat@bc,??_put_fat+4
  9855  002552  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  9856  002556  0E09               	movlw	9
  9857  002558  6E4B               	movwf	(??_put_fat+6)& (0+255),c
  9858  00255A                     u5175:
  9859  00255A  90D8               	bcf	status,0,c
  9860  00255C  324A               	rrcf	??_put_fat+5,f,c
  9861  00255E  3249               	rrcf	??_put_fat+4,f,c
  9862  002560  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
  9863  002562  D7FB               	goto	u5175
  9864  002564  5049               	movf	??_put_fat+4,w,c
  9865  002566  2445               	addwf	??_put_fat,w,c
  9866  002568  6E32               	movwf	move_window@sector,c
  9867  00256A  504A               	movf	??_put_fat+5,w,c
  9868  00256C  2046               	addwfc	??_put_fat+1,w,c
  9869  00256E  6E33               	movwf	move_window@sector+1,c
  9870  002570  0E00               	movlw	0
  9871  002572  2047               	addwfc	??_put_fat+2,w,c
  9872  002574  6E34               	movwf	move_window@sector+2,c
  9873  002576  0E00               	movlw	0
  9874  002578  2048               	addwfc	??_put_fat+3,w,c
  9875  00257A  6E35               	movwf	move_window@sector+3,c
  9876  00257C  EC27  F027         	call	_move_window	;wreg free
  9877  002580  6E53               	movwf	put_fat@res,c
  9878                           
  9879                           ;ff.c: 897:    if (res != FR_OK) break;
  9880  002582  5053               	movf	put_fat@res,w,c
  9881  002584  A4D8               	btfss	status,2,c
  9882  002586  D143               	goto	l4507
  9883                           
  9884                           ;ff.c: 898:    p = &fs->win[bc % ((UINT)512)];
  9885  002588  0EFF               	movlw	255
  9886  00258A  6E45               	movwf	??_put_fat& (0+255),c
  9887  00258C  0E01               	movlw	1
  9888  00258E  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9889  002590  C051  F047         	movff	put_fat@bc,??_put_fat+2
  9890  002594  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
  9891  002598  5045               	movf	??_put_fat,w,c
  9892  00259A  1647               	andwf	??_put_fat+2,f,c
  9893  00259C  5046               	movf	??_put_fat+1,w,c
  9894  00259E  1648               	andwf	??_put_fat+3,f,c
  9895  0025A0  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9896  0025A4  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9897  0025A8  5047               	movf	??_put_fat+2,w,c
  9898  0025AA  2649               	addwf	??_put_fat+4,f,c
  9899  0025AC  5048               	movf	??_put_fat+3,w,c
  9900  0025AE  224A               	addwfc	??_put_fat+5,f,c
  9901  0025B0  0E2E               	movlw	46
  9902  0025B2  2449               	addwf	??_put_fat+4,w,c
  9903  0025B4  6E54               	movwf	put_fat@p,c
  9904  0025B6  0E00               	movlw	0
  9905  0025B8  204A               	addwfc	??_put_fat+5,w,c
  9906  0025BA  6E55               	movwf	put_fat@p+1,c
  9907                           
  9908                           ;ff.c: 899:    *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0
      +                          x0F));
  9909  0025BC  B03D               	btfsc	put_fat@clst,0,c
  9910  0025BE  D01B               	goto	l4477
  9911  0025C0  C041  F045         	movff	put_fat@val,??_put_fat
  9912  0025C4  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  9913  0025C8  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  9914  0025CC  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  9915  0025D0  C046  F045         	movff	??_put_fat+1,??_put_fat
  9916  0025D4  C047  F046         	movff	??_put_fat+2,??_put_fat+1
  9917  0025D8  C048  F047         	movff	??_put_fat+3,??_put_fat+2
  9918  0025DC  6A48               	clrf	??_put_fat+3,c
  9919  0025DE  0E0F               	movlw	15
  9920  0025E0  1645               	andwf	??_put_fat,f,c
  9921  0025E2  C054  FFD9         	movff	put_fat@p,fsr2l
  9922  0025E6  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9923  0025EA  50DF               	movf	indf2,w,c
  9924  0025EC  0BF0               	andlw	240
  9925  0025EE  1045               	iorwf	??_put_fat,w,c
  9926  0025F0  6E49               	movwf	(??_put_fat+4)& (0+255),c
  9927  0025F2  5049               	movf	??_put_fat+4,w,c
  9928  0025F4  D012               	goto	L9
  9929  0025F6                     l4477:
  9930  0025F6  C041  F045         	movff	put_fat@val,??_put_fat
  9931  0025FA  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  9932  0025FE  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  9933  002602  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  9934  002606  0E05               	movlw	5
  9935  002608  D005               	goto	u5200
  9936  00260A                     u5205:
  9937  00260A  90D8               	bcf	status,0,c
  9938  00260C  3248               	rrcf	??_put_fat+3,f,c
  9939  00260E  3247               	rrcf	??_put_fat+2,f,c
  9940  002610  3246               	rrcf	??_put_fat+1,f,c
  9941  002612  3245               	rrcf	??_put_fat,f,c
  9942  002614                     u5200:
  9943  002614  2EE8               	decfsz	wreg,f,c
  9944  002616  D7F9               	goto	u5205
  9945  002618  5045               	movf	??_put_fat,w,c
  9946  00261A                     L9:
  9947  00261A  6E4F               	movwf	_put_fat$401,c
  9948  00261C  6A50               	clrf	_put_fat$401+1,c
  9949  00261E  C054  FFD9         	movff	put_fat@p,fsr2l
  9950  002622  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9951  002626  C04F  FFDF         	movff	_put_fat$401,indf2
  9952  00262A  D0D2               	goto	l4501
  9953  00262C                     l4481:
  9954                           
  9955                           ;ff.c: 904:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
  9956  00262C  C03B  F030         	movff	put_fat@fs,move_window@fs
  9957  002630  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9958  002634  EE20 F01E          	lfsr	2,30
  9959  002638  503B               	movf	put_fat@fs,w,c
  9960  00263A  26D9               	addwf	fsr2l,f,c
  9961  00263C  503C               	movf	put_fat@fs+1,w,c
  9962  00263E  22DA               	addwfc	fsr2h,f,c
  9963  002640  CFDE F045          	movff	postinc2,??_put_fat
  9964  002644  CFDE F046          	movff	postinc2,??_put_fat+1
  9965  002648  CFDE F047          	movff	postinc2,??_put_fat+2
  9966  00264C  CFDE F048          	movff	postinc2,??_put_fat+3
  9967  002650  C03D  F049         	movff	put_fat@clst,??_put_fat+4
  9968  002654  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
  9969  002658  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
  9970  00265C  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
  9971  002660  C04A  F049         	movff	??_put_fat+5,??_put_fat+4
  9972  002664  C04B  F04A         	movff	??_put_fat+6,??_put_fat+5
  9973  002668  C04C  F04B         	movff	??_put_fat+7,??_put_fat+6
  9974  00266C  6A4C               	clrf	??_put_fat+7,c
  9975  00266E  5045               	movf	??_put_fat,w,c
  9976  002670  2449               	addwf	??_put_fat+4,w,c
  9977  002672  6E32               	movwf	move_window@sector,c
  9978  002674  5046               	movf	??_put_fat+1,w,c
  9979  002676  204A               	addwfc	??_put_fat+5,w,c
  9980  002678  6E33               	movwf	move_window@sector+1,c
  9981  00267A  5047               	movf	??_put_fat+2,w,c
  9982  00267C  204B               	addwfc	??_put_fat+6,w,c
  9983  00267E  6E34               	movwf	move_window@sector+2,c
  9984  002680  5048               	movf	??_put_fat+3,w,c
  9985  002682  204C               	addwfc	??_put_fat+7,w,c
  9986  002684  6E35               	movwf	move_window@sector+3,c
  9987  002686  EC27  F027         	call	_move_window	;wreg free
  9988  00268A  6E53               	movwf	put_fat@res,c
  9989                           
  9990                           ;ff.c: 905:    if (res != FR_OK) break;
  9991  00268C  5053               	movf	put_fat@res,w,c
  9992  00268E  A4D8               	btfss	status,2,c
  9993  002690  D0BE               	goto	l4507
  9994                           
  9995                           ;ff.c: 906:    p = &fs->win[clst * 2 % ((UINT)512)];
  9996  002692  0EFF               	movlw	255
  9997  002694  6E45               	movwf	??_put_fat& (0+255),c
  9998  002696  0E01               	movlw	1
  9999  002698  6E46               	movwf	(??_put_fat+1)& (0+255),c
 10000  00269A  C03D  F047         	movff	put_fat@clst,??_put_fat+2
 10001  00269E  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
 10002  0026A2  90D8               	bcf	status,0,c
 10003  0026A4  3647               	rlcf	??_put_fat+2,f,c
 10004  0026A6  3648               	rlcf	??_put_fat+3,f,c
 10005  0026A8  5045               	movf	??_put_fat,w,c
 10006  0026AA  1647               	andwf	??_put_fat+2,f,c
 10007  0026AC  5046               	movf	??_put_fat+1,w,c
 10008  0026AE  1648               	andwf	??_put_fat+3,f,c
 10009  0026B0  C03B  F049         	movff	put_fat@fs,??_put_fat+4
 10010  0026B4  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
 10011  0026B8  5047               	movf	??_put_fat+2,w,c
 10012  0026BA  2649               	addwf	??_put_fat+4,f,c
 10013  0026BC  5048               	movf	??_put_fat+3,w,c
 10014  0026BE  224A               	addwfc	??_put_fat+5,f,c
 10015  0026C0  0E2E               	movlw	46
 10016  0026C2  2449               	addwf	??_put_fat+4,w,c
 10017  0026C4  6E54               	movwf	put_fat@p,c
 10018  0026C6  0E00               	movlw	0
 10019  0026C8  204A               	addwfc	??_put_fat+5,w,c
 10020  0026CA  6E55               	movwf	put_fat@p+1,c
 10021                           
 10022                           ;ff.c: 907:    *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
 10023  0026CC  C054  FFD9         	movff	put_fat@p,fsr2l
 10024  0026D0  C055  FFDA         	movff	put_fat@p+1,fsr2h
 10025  0026D4  C041  FFDE         	movff	put_fat@val,postinc2
 10026  0026D8  C042  FFDD         	movff	put_fat@val+1,postdec2
 10027  0026DC  D079               	goto	l4501
 10028  0026DE                     l4491:
 10029                           
 10030                           ;ff.c: 912:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
 10031  0026DE  C03B  F030         	movff	put_fat@fs,move_window@fs
 10032  0026E2  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 10033  0026E6  EE20 F01E          	lfsr	2,30
 10034  0026EA  503B               	movf	put_fat@fs,w,c
 10035  0026EC  26D9               	addwf	fsr2l,f,c
 10036  0026EE  503C               	movf	put_fat@fs+1,w,c
 10037  0026F0  22DA               	addwfc	fsr2h,f,c
 10038  0026F2  CFDE F045          	movff	postinc2,??_put_fat
 10039  0026F6  CFDE F046          	movff	postinc2,??_put_fat+1
 10040  0026FA  CFDE F047          	movff	postinc2,??_put_fat+2
 10041  0026FE  CFDE F048          	movff	postinc2,??_put_fat+3
 10042  002702  C03D  F049         	movff	put_fat@clst,??_put_fat+4
 10043  002706  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
 10044  00270A  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
 10045  00270E  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
 10046  002712  0E08               	movlw	8
 10047  002714  D005               	goto	u5220
 10048  002716                     u5225:
 10049  002716  90D8               	bcf	status,0,c
 10050  002718  324C               	rrcf	??_put_fat+7,f,c
 10051  00271A  324B               	rrcf	??_put_fat+6,f,c
 10052  00271C  324A               	rrcf	??_put_fat+5,f,c
 10053  00271E  3249               	rrcf	??_put_fat+4,f,c
 10054  002720                     u5220:
 10055  002720  2EE8               	decfsz	wreg,f,c
 10056  002722  D7F9               	goto	u5225
 10057  002724  5045               	movf	??_put_fat,w,c
 10058  002726  2449               	addwf	??_put_fat+4,w,c
 10059  002728  6E32               	movwf	move_window@sector,c
 10060  00272A  5046               	movf	??_put_fat+1,w,c
 10061  00272C  204A               	addwfc	??_put_fat+5,w,c
 10062  00272E  6E33               	movwf	move_window@sector+1,c
 10063  002730  5047               	movf	??_put_fat+2,w,c
 10064  002732  204B               	addwfc	??_put_fat+6,w,c
 10065  002734  6E34               	movwf	move_window@sector+2,c
 10066  002736  5048               	movf	??_put_fat+3,w,c
 10067  002738  204C               	addwfc	??_put_fat+7,w,c
 10068  00273A  6E35               	movwf	move_window@sector+3,c
 10069  00273C  EC27  F027         	call	_move_window	;wreg free
 10070  002740  6E53               	movwf	put_fat@res,c
 10071                           
 10072                           ;ff.c: 913:    if (res != FR_OK) break;
 10073  002742  5053               	movf	put_fat@res,w,c
 10074  002744  A4D8               	btfss	status,2,c
 10075  002746  D063               	goto	l4507
 10076                           
 10077                           ;ff.c: 914:    p = &fs->win[clst * 4 % ((UINT)512)];
 10078  002748  0EFF               	movlw	255
 10079  00274A  6E45               	movwf	??_put_fat& (0+255),c
 10080  00274C  0E01               	movlw	1
 10081  00274E  6E46               	movwf	(??_put_fat+1)& (0+255),c
 10082  002750  C03D  F047         	movff	put_fat@clst,??_put_fat+2
 10083  002754  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
 10084  002758  90D8               	bcf	status,0,c
 10085  00275A  3647               	rlcf	??_put_fat+2,f,c
 10086  00275C  3648               	rlcf	??_put_fat+3,f,c
 10087  00275E  90D8               	bcf	status,0,c
 10088  002760  3647               	rlcf	??_put_fat+2,f,c
 10089  002762  3648               	rlcf	??_put_fat+3,f,c
 10090  002764  5045               	movf	??_put_fat,w,c
 10091  002766  1647               	andwf	??_put_fat+2,f,c
 10092  002768  5046               	movf	??_put_fat+1,w,c
 10093  00276A  1648               	andwf	??_put_fat+3,f,c
 10094  00276C  C03B  F049         	movff	put_fat@fs,??_put_fat+4
 10095  002770  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
 10096  002774  5047               	movf	??_put_fat+2,w,c
 10097  002776  2649               	addwf	??_put_fat+4,f,c
 10098  002778  5048               	movf	??_put_fat+3,w,c
 10099  00277A  224A               	addwfc	??_put_fat+5,f,c
 10100  00277C  0E2E               	movlw	46
 10101  00277E  2449               	addwf	??_put_fat+4,w,c
 10102  002780  6E54               	movwf	put_fat@p,c
 10103  002782  0E00               	movlw	0
 10104  002784  204A               	addwfc	??_put_fat+5,w,c
 10105  002786  6E55               	movwf	put_fat@p+1,c
 10106                           
 10107                           ;ff.c: 915:    val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
 10108  002788  C054  FFD9         	movff	put_fat@p,fsr2l
 10109  00278C  C055  FFDA         	movff	put_fat@p+1,fsr2h
 10110  002790  0E00               	movlw	0
 10111  002792  14DE               	andwf	postinc2,w,c
 10112  002794  6E45               	movwf	??_put_fat& (0+255),c
 10113  002796  0E00               	movlw	0
 10114  002798  14DE               	andwf	postinc2,w,c
 10115  00279A  6E46               	movwf	(??_put_fat+1)& (0+255),c
 10116  00279C  0E00               	movlw	0
 10117  00279E  14DE               	andwf	postinc2,w,c
 10118  0027A0  6E47               	movwf	(??_put_fat+2)& (0+255),c
 10119  0027A2  0EF0               	movlw	240
 10120  0027A4  14DE               	andwf	postinc2,w,c
 10121  0027A6  6E48               	movwf	(??_put_fat+3)& (0+255),c
 10122  0027A8  5045               	movf	??_put_fat,w,c
 10123  0027AA  1241               	iorwf	put_fat@val,f,c
 10124  0027AC  5046               	movf	??_put_fat+1,w,c
 10125  0027AE  1242               	iorwf	put_fat@val+1,f,c
 10126  0027B0  5047               	movf	??_put_fat+2,w,c
 10127  0027B2  1243               	iorwf	put_fat@val+2,f,c
 10128  0027B4  5048               	movf	??_put_fat+3,w,c
 10129  0027B6  1244               	iorwf	put_fat@val+3,f,c
 10130                           
 10131                           ;ff.c: 916:    *(DWORD*)(BYTE*)(p)=(DWORD)(val);
 10132  0027B8  C054  FFD9         	movff	put_fat@p,fsr2l
 10133  0027BC  C055  FFDA         	movff	put_fat@p+1,fsr2h
 10134  0027C0  C041  FFDE         	movff	put_fat@val,postinc2
 10135  0027C4  C042  FFDE         	movff	put_fat@val+1,postinc2
 10136  0027C8  C043  FFDE         	movff	put_fat@val+2,postinc2
 10137  0027CC  C044  FFDE         	movff	put_fat@val+3,postinc2
 10138  0027D0                     l4501:
 10139                           
 10140                           ;ff.c: 917:    fs->wflag = 1;
 10141  0027D0  EE20 F004          	lfsr	2,4
 10142  0027D4  503B               	movf	put_fat@fs,w,c
 10143  0027D6  26D9               	addwf	fsr2l,f,c
 10144  0027D8  503C               	movf	put_fat@fs+1,w,c
 10145  0027DA  22DA               	addwfc	fsr2h,f,c
 10146  0027DC  0E01               	movlw	1
 10147  0027DE  6EDF               	movwf	indf2,c
 10148                           
 10149                           ;ff.c: 918:    break;
 10150  0027E0  D016               	goto	l4507
 10151  0027E2                     l4505:
 10152  0027E2  C03B  FFD9         	movff	put_fat@fs,fsr2l
 10153  0027E6  C03C  FFDA         	movff	put_fat@fs+1,fsr2h
 10154  0027EA  50DF               	movf	indf2,w,c
 10155  0027EC  6E45               	movwf	??_put_fat& (0+255),c
 10156  0027EE  6A46               	clrf	(??_put_fat+1)& (0+255),c
 10157                           
 10158                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10159                           ; Switch size 1, requested type "simple"
 10160                           ; Number of cases is 1, Range of values is 0 to 0
 10161                           ; switch strategies available:
 10162                           ; Name         Instructions Cycles
 10163                           ; simple_byte            4     3 (average)
 10164                           ;	Chosen strategy is simple_byte
 10165  0027F0  5046               	movf	??_put_fat+1,w,c
 10166  0027F2  0A00               	xorlw	0	; case 0
 10167  0027F4  A4D8               	btfss	status,2,c
 10168  0027F6  D610               	goto	u5130
 10169                           
 10170                           ; Switch size 1, requested type "simple"
 10171                           ; Number of cases is 3, Range of values is 1 to 3
 10172                           ; switch strategies available:
 10173                           ; Name         Instructions Cycles
 10174                           ; simple_byte           10     6 (average)
 10175                           ;	Chosen strategy is simple_byte
 10176  0027F8  5045               	movf	??_put_fat,w,c
 10177  0027FA  0A01               	xorlw	1	; case 1
 10178  0027FC  B4D8               	btfsc	status,2,c
 10179  0027FE  D60F               	goto	l278
 10180  002800  0A03               	xorlw	3	; case 2
 10181  002802  B4D8               	btfsc	status,2,c
 10182  002804  D713               	goto	l4481
 10183  002806  0A01               	xorlw	1	; case 3
 10184  002808  B4D8               	btfsc	status,2,c
 10185  00280A  D769               	goto	l4491
 10186  00280C  D605               	goto	u5130
 10187  00280E                     l4507:
 10188                           
 10189                           ;ff.c: 925:  return res;
 10190  00280E  5053               	movf	put_fat@res,w,c
 10191  002810  0012               	return		;funcret
 10192  002812                     __end_of_put_fat:
 10193                           	opt callstack 0
 10194                           
 10195 ;; *************** function _get_fat *****************
 10196 ;; Defined at:
 10197 ;;		line 818 in file "ff.c"
 10198 ;; Parameters:    Size  Location     Type
 10199 ;;  fs              2   58[COMRAM] PTR struct .
 10200 ;;		 -> FatFs(558), NULL(0), 
 10201 ;;  clst            4   60[COMRAM] unsigned long 
 10202 ;; Auto vars:     Size  Location     Type
 10203 ;;  val             4   75[COMRAM] unsigned long 
 10204 ;;  bc              2   83[COMRAM] unsigned short 
 10205 ;;  p               2   81[COMRAM] PTR unsigned char 
 10206 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
 10207 ;;  wc              2   79[COMRAM] unsigned short 
 10208 ;; Return value:  Size  Location     Type
 10209 ;;                  4   58[COMRAM] unsigned long 
 10210 ;; Registers used:
 10211 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10212 ;; Tracked objects:
 10213 ;;		On entry : 0/0
 10214 ;;		On exit  : 0/0
 10215 ;;		Unchanged: 0/0
 10216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10217 ;;      Params:         6       0       0       0       0       0       0       0       0
 10218 ;;      Locals:        12       0       0       0       0       0       0       0       0
 10219 ;;      Temps:          9       0       0       0       0       0       0       0       0
 10220 ;;      Totals:        27       0       0       0       0       0       0       0       0
 10221 ;;Total ram usage:       27 bytes
 10222 ;; Hardware stack levels used:    1
 10223 ;; Hardware stack levels required when called:    8
 10224 ;; This function calls:
 10225 ;;		_move_window
 10226 ;; This function is called by:
 10227 ;;		_remove_chain
 10228 ;;		_create_chain
 10229 ;;		_dir_sdi
 10230 ;;		_dir_next
 10231 ;;		_f_lseek
 10232 ;;		_f_read
 10233 ;; This function uses a non-reentrant model
 10234 ;;
 10235                           
 10236                           	psect	text26
 10237  002C18                     __ptext26:
 10238                           	opt callstack 0
 10239  002C18                     _get_fat:
 10240                           	opt callstack 19
 10241                           
 10242                           ;ff.c: 819:  FATFS* fs,;ff.c: 820:  DWORD clst;ff.c: 822: {;ff.c: 823:  UINT wc, bc;;ff.
      +                          c: 824:  BYTE *p;;ff.c: 825:  DWORD val;;ff.c: 828:  if (clst < 2 || clst >= fs->n_faten
      +                          t) {
 10243                           
 10244                           ;incstack = 0
 10245  002C18  5040               	movf	get_fat@clst+3,w,c
 10246  002C1A  103F               	iorwf	get_fat@clst+2,w,c
 10247  002C1C  103E               	iorwf	get_fat@clst+1,w,c
 10248  002C1E  E104               	bnz	u5010
 10249  002C20  0E02               	movlw	2
 10250  002C22  5C3D               	subwf	get_fat@clst,w,c
 10251  002C24  A0D8               	btfss	status,0,c
 10252  002C26  D010               	goto	u5020
 10253  002C28                     u5010:
 10254  002C28  EE20 F012          	lfsr	2,18
 10255  002C2C  503B               	movf	get_fat@fs,w,c
 10256  002C2E  26D9               	addwf	fsr2l,f,c
 10257  002C30  503C               	movf	get_fat@fs+1,w,c
 10258  002C32  22DA               	addwfc	fsr2h,f,c
 10259  002C34  50DE               	movf	postinc2,w,c
 10260  002C36  5C3D               	subwf	get_fat@clst,w,c
 10261  002C38  50DE               	movf	postinc2,w,c
 10262  002C3A  583E               	subwfb	get_fat@clst+1,w,c
 10263  002C3C  50DE               	movf	postinc2,w,c
 10264  002C3E  583F               	subwfb	get_fat@clst+2,w,c
 10265  002C40  50DE               	movf	postinc2,w,c
 10266  002C42  5840               	subwfb	get_fat@clst+3,w,c
 10267  002C44  A0D8               	btfss	status,0,c
 10268  002C46  D008               	goto	l252
 10269  002C48                     u5020:
 10270                           
 10271                           ;ff.c: 829:   val = 1;
 10272  002C48  0E01               	movlw	1
 10273  002C4A  6E4C               	movwf	get_fat@val,c
 10274  002C4C  0E00               	movlw	0
 10275  002C4E  6E4D               	movwf	get_fat@val+1,c
 10276  002C50  0E00               	movlw	0
 10277  002C52  6E4E               	movwf	get_fat@val+2,c
 10278  002C54  0E00               	movlw	0
 10279  002C56  D190               	goto	L11
 10280  002C58                     l252:
 10281                           
 10282                           ;ff.c: 832:   val = 0xFFFFFFFF;
 10283  002C58  684C               	setf	get_fat@val,c
 10284  002C5A  684D               	setf	get_fat@val+1,c
 10285  002C5C  684E               	setf	get_fat@val+2,c
 10286  002C5E  684F               	setf	get_fat@val+3,c
 10287                           
 10288                           ;ff.c: 834:   switch (fs->fs_type) {
 10289  002C60  D18D               	goto	l4431
 10290  002C62                     l257:
 10291                           
 10292                           ;ff.c: 836:    bc = (UINT)clst; bc += bc / 2;
 10293  002C62  C03D  F054         	movff	get_fat@clst,get_fat@bc
 10294  002C66  C03E  F055         	movff	get_fat@clst+1,get_fat@bc+1
 10295  002C6A  90D8               	bcf	status,0,c
 10296  002C6C  3055               	rrcf	get_fat@bc+1,w,c
 10297  002C6E  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10298  002C70  3054               	rrcf	get_fat@bc,w,c
 10299  002C72  6E41               	movwf	??_get_fat& (0+255),c
 10300  002C74  5041               	movf	??_get_fat,w,c
 10301  002C76  2654               	addwf	get_fat@bc,f,c
 10302  002C78  5042               	movf	??_get_fat+1,w,c
 10303  002C7A  2255               	addwfc	get_fat@bc+1,f,c
 10304                           
 10305                           ;ff.c: 837:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 10306  002C7C  C03B  F030         	movff	get_fat@fs,move_window@fs
 10307  002C80  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10308  002C84  EE20 F01E          	lfsr	2,30
 10309  002C88  503B               	movf	get_fat@fs,w,c
 10310  002C8A  26D9               	addwf	fsr2l,f,c
 10311  002C8C  503C               	movf	get_fat@fs+1,w,c
 10312  002C8E  22DA               	addwfc	fsr2h,f,c
 10313  002C90  CFDE F041          	movff	postinc2,??_get_fat
 10314  002C94  CFDE F042          	movff	postinc2,??_get_fat+1
 10315  002C98  CFDE F043          	movff	postinc2,??_get_fat+2
 10316  002C9C  CFDE F044          	movff	postinc2,??_get_fat+3
 10317  002CA0  C054  F045         	movff	get_fat@bc,??_get_fat+4
 10318  002CA4  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 10319  002CA8  0E09               	movlw	9
 10320  002CAA  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10321  002CAC                     u5035:
 10322  002CAC  90D8               	bcf	status,0,c
 10323  002CAE  3246               	rrcf	??_get_fat+5,f,c
 10324  002CB0  3245               	rrcf	??_get_fat+4,f,c
 10325  002CB2  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 10326  002CB4  D7FB               	goto	u5035
 10327  002CB6  5045               	movf	??_get_fat+4,w,c
 10328  002CB8  2441               	addwf	??_get_fat,w,c
 10329  002CBA  6E32               	movwf	move_window@sector,c
 10330  002CBC  5046               	movf	??_get_fat+5,w,c
 10331  002CBE  2042               	addwfc	??_get_fat+1,w,c
 10332  002CC0  6E33               	movwf	move_window@sector+1,c
 10333  002CC2  0E00               	movlw	0
 10334  002CC4  2043               	addwfc	??_get_fat+2,w,c
 10335  002CC6  6E34               	movwf	move_window@sector+2,c
 10336  002CC8  0E00               	movlw	0
 10337  002CCA  2044               	addwfc	??_get_fat+3,w,c
 10338  002CCC  6E35               	movwf	move_window@sector+3,c
 10339  002CCE  EC27  F027         	call	_move_window	;wreg free
 10340  002CD2  0900               	iorlw	0
 10341  002CD4  A4D8               	btfss	status,2,c
 10342  002CD6  D168               	goto	l255
 10343                           
 10344                           ;ff.c: 838:    wc = fs->win[bc++ % ((UINT)512)];
 10345  002CD8  0EFF               	movlw	255
 10346  002CDA  6E41               	movwf	??_get_fat& (0+255),c
 10347  002CDC  0E01               	movlw	1
 10348  002CDE  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10349  002CE0  C054  F043         	movff	get_fat@bc,??_get_fat+2
 10350  002CE4  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 10351  002CE8  5041               	movf	??_get_fat,w,c
 10352  002CEA  1643               	andwf	??_get_fat+2,f,c
 10353  002CEC  5042               	movf	??_get_fat+1,w,c
 10354  002CEE  1644               	andwf	??_get_fat+3,f,c
 10355  002CF0  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10356  002CF4  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10357  002CF8  5043               	movf	??_get_fat+2,w,c
 10358  002CFA  2645               	addwf	??_get_fat+4,f,c
 10359  002CFC  5044               	movf	??_get_fat+3,w,c
 10360  002CFE  2246               	addwfc	??_get_fat+5,f,c
 10361  002D00  0E2E               	movlw	46
 10362  002D02  2445               	addwf	??_get_fat+4,w,c
 10363  002D04  6ED9               	movwf	fsr2l,c
 10364  002D06  0E00               	movlw	0
 10365  002D08  2046               	addwfc	??_get_fat+5,w,c
 10366  002D0A  6EDA               	movwf	fsr2h,c
 10367  002D0C  50DF               	movf	indf2,w,c
 10368  002D0E  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10369  002D10  5047               	movf	??_get_fat+6,w,c
 10370  002D12  6E50               	movwf	get_fat@wc,c
 10371  002D14  6A51               	clrf	get_fat@wc+1,c
 10372  002D16  4A54               	infsnz	get_fat@bc,f,c
 10373  002D18  2A55               	incf	get_fat@bc+1,f,c
 10374                           
 10375                           ;ff.c: 839:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 10376  002D1A  C03B  F030         	movff	get_fat@fs,move_window@fs
 10377  002D1E  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10378  002D22  EE20 F01E          	lfsr	2,30
 10379  002D26  503B               	movf	get_fat@fs,w,c
 10380  002D28  26D9               	addwf	fsr2l,f,c
 10381  002D2A  503C               	movf	get_fat@fs+1,w,c
 10382  002D2C  22DA               	addwfc	fsr2h,f,c
 10383  002D2E  CFDE F041          	movff	postinc2,??_get_fat
 10384  002D32  CFDE F042          	movff	postinc2,??_get_fat+1
 10385  002D36  CFDE F043          	movff	postinc2,??_get_fat+2
 10386  002D3A  CFDE F044          	movff	postinc2,??_get_fat+3
 10387  002D3E  C054  F045         	movff	get_fat@bc,??_get_fat+4
 10388  002D42  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 10389  002D46  0E09               	movlw	9
 10390  002D48  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10391  002D4A                     u5055:
 10392  002D4A  90D8               	bcf	status,0,c
 10393  002D4C  3246               	rrcf	??_get_fat+5,f,c
 10394  002D4E  3245               	rrcf	??_get_fat+4,f,c
 10395  002D50  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 10396  002D52  D7FB               	goto	u5055
 10397  002D54  5045               	movf	??_get_fat+4,w,c
 10398  002D56  2441               	addwf	??_get_fat,w,c
 10399  002D58  6E32               	movwf	move_window@sector,c
 10400  002D5A  5046               	movf	??_get_fat+5,w,c
 10401  002D5C  2042               	addwfc	??_get_fat+1,w,c
 10402  002D5E  6E33               	movwf	move_window@sector+1,c
 10403  002D60  0E00               	movlw	0
 10404  002D62  2043               	addwfc	??_get_fat+2,w,c
 10405  002D64  6E34               	movwf	move_window@sector+2,c
 10406  002D66  0E00               	movlw	0
 10407  002D68  2044               	addwfc	??_get_fat+3,w,c
 10408  002D6A  6E35               	movwf	move_window@sector+3,c
 10409  002D6C  EC27  F027         	call	_move_window	;wreg free
 10410  002D70  0900               	iorlw	0
 10411  002D72  A4D8               	btfss	status,2,c
 10412  002D74  D119               	goto	l255
 10413                           
 10414                           ;ff.c: 840:    wc |= fs->win[bc % ((UINT)512)] << 8;
 10415  002D76  0EFF               	movlw	255
 10416  002D78  6E41               	movwf	??_get_fat& (0+255),c
 10417  002D7A  0E01               	movlw	1
 10418  002D7C  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10419  002D7E  C054  F043         	movff	get_fat@bc,??_get_fat+2
 10420  002D82  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 10421  002D86  5041               	movf	??_get_fat,w,c
 10422  002D88  1643               	andwf	??_get_fat+2,f,c
 10423  002D8A  5042               	movf	??_get_fat+1,w,c
 10424  002D8C  1644               	andwf	??_get_fat+3,f,c
 10425  002D8E  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10426  002D92  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10427  002D96  5043               	movf	??_get_fat+2,w,c
 10428  002D98  2645               	addwf	??_get_fat+4,f,c
 10429  002D9A  5044               	movf	??_get_fat+3,w,c
 10430  002D9C  2246               	addwfc	??_get_fat+5,f,c
 10431  002D9E  0E2E               	movlw	46
 10432  002DA0  2445               	addwf	??_get_fat+4,w,c
 10433  002DA2  6ED9               	movwf	fsr2l,c
 10434  002DA4  0E00               	movlw	0
 10435  002DA6  2046               	addwfc	??_get_fat+5,w,c
 10436  002DA8  6EDA               	movwf	fsr2h,c
 10437  002DAA  50DF               	movf	indf2,w,c
 10438  002DAC  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10439  002DAE  5047               	movf	??_get_fat+6,w,c
 10440  002DB0  6E49               	movwf	(??_get_fat+8)& (0+255),c
 10441  002DB2  6A48               	clrf	(??_get_fat+7)& (0+255),c
 10442  002DB4  5048               	movf	??_get_fat+7,w,c
 10443  002DB6  1250               	iorwf	get_fat@wc,f,c
 10444  002DB8  5049               	movf	??_get_fat+8,w,c
 10445  002DBA  1251               	iorwf	get_fat@wc+1,f,c
 10446                           
 10447                           ;ff.c: 841:    val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 10448  002DBC  B03D               	btfsc	get_fat@clst,0,c
 10449  002DBE  D007               	goto	l4409
 10450  002DC0  0EFF               	movlw	255
 10451  002DC2  1450               	andwf	get_fat@wc,w,c
 10452  002DC4  6E4A               	movwf	_get_fat$374,c
 10453  002DC6  0E0F               	movlw	15
 10454  002DC8  1451               	andwf	get_fat@wc+1,w,c
 10455  002DCA  6E4B               	movwf	_get_fat$374+1,c
 10456  002DCC  D00F               	goto	l4411
 10457  002DCE                     l4409:
 10458  002DCE  C050  F041         	movff	get_fat@wc,??_get_fat
 10459  002DD2  C051  F042         	movff	get_fat@wc+1,??_get_fat+1
 10460  002DD6  0E04               	movlw	4
 10461  002DD8  6E43               	movwf	(??_get_fat+2)& (0+255),c
 10462  002DDA                     u5085:
 10463  002DDA  90D8               	bcf	status,0,c
 10464  002DDC  3242               	rrcf	??_get_fat+1,f,c
 10465  002DDE  3241               	rrcf	??_get_fat,f,c
 10466  002DE0  2E43               	decfsz	(??_get_fat+2)& (0+255),f,c
 10467  002DE2  D7FB               	goto	u5085
 10468  002DE4  C041  F04A         	movff	??_get_fat,_get_fat$374
 10469  002DE8  C042  F04B         	movff	??_get_fat+1,_get_fat$374+1
 10470  002DEC                     l4411:
 10471  002DEC  C04A  F04C         	movff	_get_fat$374,get_fat@val
 10472  002DF0  C04B  F04D         	movff	_get_fat$374+1,get_fat@val+1
 10473  002DF4  D05B               	goto	L12
 10474  002DF6                     l4413:
 10475                           
 10476                           ;ff.c: 845:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) b
      +                          reak;
 10477  002DF6  C03B  F030         	movff	get_fat@fs,move_window@fs
 10478  002DFA  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10479  002DFE  EE20 F01E          	lfsr	2,30
 10480  002E02  503B               	movf	get_fat@fs,w,c
 10481  002E04  26D9               	addwf	fsr2l,f,c
 10482  002E06  503C               	movf	get_fat@fs+1,w,c
 10483  002E08  22DA               	addwfc	fsr2h,f,c
 10484  002E0A  CFDE F041          	movff	postinc2,??_get_fat
 10485  002E0E  CFDE F042          	movff	postinc2,??_get_fat+1
 10486  002E12  CFDE F043          	movff	postinc2,??_get_fat+2
 10487  002E16  CFDE F044          	movff	postinc2,??_get_fat+3
 10488  002E1A  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 10489  002E1E  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 10490  002E22  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 10491  002E26  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 10492  002E2A  C046  F045         	movff	??_get_fat+5,??_get_fat+4
 10493  002E2E  C047  F046         	movff	??_get_fat+6,??_get_fat+5
 10494  002E32  C048  F047         	movff	??_get_fat+7,??_get_fat+6
 10495  002E36  6A48               	clrf	??_get_fat+7,c
 10496  002E38  5041               	movf	??_get_fat,w,c
 10497  002E3A  2445               	addwf	??_get_fat+4,w,c
 10498  002E3C  6E32               	movwf	move_window@sector,c
 10499  002E3E  5042               	movf	??_get_fat+1,w,c
 10500  002E40  2046               	addwfc	??_get_fat+5,w,c
 10501  002E42  6E33               	movwf	move_window@sector+1,c
 10502  002E44  5043               	movf	??_get_fat+2,w,c
 10503  002E46  2047               	addwfc	??_get_fat+6,w,c
 10504  002E48  6E34               	movwf	move_window@sector+2,c
 10505  002E4A  5044               	movf	??_get_fat+3,w,c
 10506  002E4C  2048               	addwfc	??_get_fat+7,w,c
 10507  002E4E  6E35               	movwf	move_window@sector+3,c
 10508  002E50  EC27  F027         	call	_move_window	;wreg free
 10509  002E54  0900               	iorlw	0
 10510  002E56  A4D8               	btfss	status,2,c
 10511  002E58  D0A7               	goto	l255
 10512                           
 10513                           ;ff.c: 846:    p = &fs->win[clst * 2 % ((UINT)512)];
 10514  002E5A  0EFF               	movlw	255
 10515  002E5C  6E41               	movwf	??_get_fat& (0+255),c
 10516  002E5E  0E01               	movlw	1
 10517  002E60  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10518  002E62  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 10519  002E66  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 10520  002E6A  90D8               	bcf	status,0,c
 10521  002E6C  3643               	rlcf	??_get_fat+2,f,c
 10522  002E6E  3644               	rlcf	??_get_fat+3,f,c
 10523  002E70  5041               	movf	??_get_fat,w,c
 10524  002E72  1643               	andwf	??_get_fat+2,f,c
 10525  002E74  5042               	movf	??_get_fat+1,w,c
 10526  002E76  1644               	andwf	??_get_fat+3,f,c
 10527  002E78  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10528  002E7C  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10529  002E80  5043               	movf	??_get_fat+2,w,c
 10530  002E82  2645               	addwf	??_get_fat+4,f,c
 10531  002E84  5044               	movf	??_get_fat+3,w,c
 10532  002E86  2246               	addwfc	??_get_fat+5,f,c
 10533  002E88  0E2E               	movlw	46
 10534  002E8A  2445               	addwf	??_get_fat+4,w,c
 10535  002E8C  6E52               	movwf	get_fat@p,c
 10536  002E8E  0E00               	movlw	0
 10537  002E90  2046               	addwfc	??_get_fat+5,w,c
 10538  002E92  6E53               	movwf	get_fat@p+1,c
 10539                           
 10540                           ;ff.c: 847:    val = (WORD)(*(WORD*)(BYTE*)(p));
 10541  002E94  C052  FFD9         	movff	get_fat@p,fsr2l
 10542  002E98  C053  FFDA         	movff	get_fat@p+1,fsr2h
 10543  002E9C  CFDE F041          	movff	postinc2,??_get_fat
 10544  002EA0  CFDD F042          	movff	postdec2,??_get_fat+1
 10545  002EA4  C041  F04C         	movff	??_get_fat,get_fat@val
 10546  002EA8  C042  F04D         	movff	??_get_fat+1,get_fat@val+1
 10547  002EAC                     L12:
 10548  002EAC  6A4E               	clrf	get_fat@val+2,c
 10549  002EAE  6A4F               	clrf	get_fat@val+3,c
 10550                           
 10551                           ;ff.c: 848:    break;
 10552  002EB0  D07B               	goto	l255
 10553  002EB2                     l4421:
 10554                           
 10555                           ;ff.c: 851:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) b
      +                          reak;
 10556  002EB2  C03B  F030         	movff	get_fat@fs,move_window@fs
 10557  002EB6  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10558  002EBA  EE20 F01E          	lfsr	2,30
 10559  002EBE  503B               	movf	get_fat@fs,w,c
 10560  002EC0  26D9               	addwf	fsr2l,f,c
 10561  002EC2  503C               	movf	get_fat@fs+1,w,c
 10562  002EC4  22DA               	addwfc	fsr2h,f,c
 10563  002EC6  CFDE F041          	movff	postinc2,??_get_fat
 10564  002ECA  CFDE F042          	movff	postinc2,??_get_fat+1
 10565  002ECE  CFDE F043          	movff	postinc2,??_get_fat+2
 10566  002ED2  CFDE F044          	movff	postinc2,??_get_fat+3
 10567  002ED6  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 10568  002EDA  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 10569  002EDE  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 10570  002EE2  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 10571  002EE6  0E08               	movlw	8
 10572  002EE8  D005               	goto	u5100
 10573  002EEA                     u5105:
 10574  002EEA  90D8               	bcf	status,0,c
 10575  002EEC  3248               	rrcf	??_get_fat+7,f,c
 10576  002EEE  3247               	rrcf	??_get_fat+6,f,c
 10577  002EF0  3246               	rrcf	??_get_fat+5,f,c
 10578  002EF2  3245               	rrcf	??_get_fat+4,f,c
 10579  002EF4                     u5100:
 10580  002EF4  2EE8               	decfsz	wreg,f,c
 10581  002EF6  D7F9               	goto	u5105
 10582  002EF8  5041               	movf	??_get_fat,w,c
 10583  002EFA  2445               	addwf	??_get_fat+4,w,c
 10584  002EFC  6E32               	movwf	move_window@sector,c
 10585  002EFE  5042               	movf	??_get_fat+1,w,c
 10586  002F00  2046               	addwfc	??_get_fat+5,w,c
 10587  002F02  6E33               	movwf	move_window@sector+1,c
 10588  002F04  5043               	movf	??_get_fat+2,w,c
 10589  002F06  2047               	addwfc	??_get_fat+6,w,c
 10590  002F08  6E34               	movwf	move_window@sector+2,c
 10591  002F0A  5044               	movf	??_get_fat+3,w,c
 10592  002F0C  2048               	addwfc	??_get_fat+7,w,c
 10593  002F0E  6E35               	movwf	move_window@sector+3,c
 10594  002F10  EC27  F027         	call	_move_window	;wreg free
 10595  002F14  0900               	iorlw	0
 10596  002F16  A4D8               	btfss	status,2,c
 10597  002F18  D047               	goto	l255
 10598                           
 10599                           ;ff.c: 852:    p = &fs->win[clst * 4 % ((UINT)512)];
 10600  002F1A  0EFF               	movlw	255
 10601  002F1C  6E41               	movwf	??_get_fat& (0+255),c
 10602  002F1E  0E01               	movlw	1
 10603  002F20  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10604  002F22  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 10605  002F26  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 10606  002F2A  90D8               	bcf	status,0,c
 10607  002F2C  3643               	rlcf	??_get_fat+2,f,c
 10608  002F2E  3644               	rlcf	??_get_fat+3,f,c
 10609  002F30  90D8               	bcf	status,0,c
 10610  002F32  3643               	rlcf	??_get_fat+2,f,c
 10611  002F34  3644               	rlcf	??_get_fat+3,f,c
 10612  002F36  5041               	movf	??_get_fat,w,c
 10613  002F38  1643               	andwf	??_get_fat+2,f,c
 10614  002F3A  5042               	movf	??_get_fat+1,w,c
 10615  002F3C  1644               	andwf	??_get_fat+3,f,c
 10616  002F3E  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10617  002F42  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10618  002F46  5043               	movf	??_get_fat+2,w,c
 10619  002F48  2645               	addwf	??_get_fat+4,f,c
 10620  002F4A  5044               	movf	??_get_fat+3,w,c
 10621  002F4C  2246               	addwfc	??_get_fat+5,f,c
 10622  002F4E  0E2E               	movlw	46
 10623  002F50  2445               	addwf	??_get_fat+4,w,c
 10624  002F52  6E52               	movwf	get_fat@p,c
 10625  002F54  0E00               	movlw	0
 10626  002F56  2046               	addwfc	??_get_fat+5,w,c
 10627  002F58  6E53               	movwf	get_fat@p+1,c
 10628                           
 10629                           ;ff.c: 853:    val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 10630  002F5A  C052  FFD9         	movff	get_fat@p,fsr2l
 10631  002F5E  C053  FFDA         	movff	get_fat@p+1,fsr2h
 10632  002F62  0EFF               	movlw	255
 10633  002F64  14DE               	andwf	postinc2,w,c
 10634  002F66  6E4C               	movwf	get_fat@val,c
 10635  002F68  0EFF               	movlw	255
 10636  002F6A  14DE               	andwf	postinc2,w,c
 10637  002F6C  6E4D               	movwf	get_fat@val+1,c
 10638  002F6E  0EFF               	movlw	255
 10639  002F70  14DE               	andwf	postinc2,w,c
 10640  002F72  6E4E               	movwf	get_fat@val+2,c
 10641  002F74  0E0F               	movlw	15
 10642  002F76  14DE               	andwf	postinc2,w,c
 10643  002F78                     L11:
 10644  002F78  6E4F               	movwf	get_fat@val+3,c
 10645                           
 10646                           ;ff.c: 854:    break;
 10647  002F7A  D016               	goto	l255
 10648  002F7C                     l4431:
 10649  002F7C  C03B  FFD9         	movff	get_fat@fs,fsr2l
 10650  002F80  C03C  FFDA         	movff	get_fat@fs+1,fsr2h
 10651  002F84  50DF               	movf	indf2,w,c
 10652  002F86  6E41               	movwf	??_get_fat& (0+255),c
 10653  002F88  6A42               	clrf	(??_get_fat+1)& (0+255),c
 10654                           
 10655                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10656                           ; Switch size 1, requested type "simple"
 10657                           ; Number of cases is 1, Range of values is 0 to 0
 10658                           ; switch strategies available:
 10659                           ; Name         Instructions Cycles
 10660                           ; simple_byte            4     3 (average)
 10661                           ;	Chosen strategy is simple_byte
 10662  002F8A  5042               	movf	??_get_fat+1,w,c
 10663  002F8C  0A00               	xorlw	0	; case 0
 10664  002F8E  A4D8               	btfss	status,2,c
 10665  002F90  D65B               	goto	u5020
 10666                           
 10667                           ; Switch size 1, requested type "simple"
 10668                           ; Number of cases is 3, Range of values is 1 to 3
 10669                           ; switch strategies available:
 10670                           ; Name         Instructions Cycles
 10671                           ; simple_byte           10     6 (average)
 10672                           ;	Chosen strategy is simple_byte
 10673  002F92  5041               	movf	??_get_fat,w,c
 10674  002F94  0A01               	xorlw	1	; case 1
 10675  002F96  B4D8               	btfsc	status,2,c
 10676  002F98  D664               	goto	l257
 10677  002F9A  0A03               	xorlw	3	; case 2
 10678  002F9C  B4D8               	btfsc	status,2,c
 10679  002F9E  D72B               	goto	l4413
 10680  002FA0  0A01               	xorlw	1	; case 3
 10681  002FA2  B4D8               	btfsc	status,2,c
 10682  002FA4  D786               	goto	l4421
 10683  002FA6  D650               	goto	u5020
 10684  002FA8                     l255:
 10685                           
 10686                           ;ff.c: 861:  return val;
 10687  002FA8  C04C  F03B         	movff	get_fat@val,?_get_fat
 10688  002FAC  C04D  F03C         	movff	get_fat@val+1,?_get_fat+1
 10689  002FB0  C04E  F03D         	movff	get_fat@val+2,?_get_fat+2
 10690  002FB4  C04F  F03E         	movff	get_fat@val+3,?_get_fat+3
 10691  002FB8  0012               	return		;funcret
 10692  002FBA                     __end_of_get_fat:
 10693                           	opt callstack 0
 10694                           
 10695 ;; *************** function _clust2sect *****************
 10696 ;; Defined at:
 10697 ;;		line 800 in file "ff.c"
 10698 ;; Parameters:    Size  Location     Type
 10699 ;;  fs              2   12[COMRAM] PTR struct .
 10700 ;;		 -> FatFs(558), NULL(0), 
 10701 ;;  clst            4   14[COMRAM] unsigned long 
 10702 ;; Auto vars:     Size  Location     Type
 10703 ;;		None
 10704 ;; Return value:  Size  Location     Type
 10705 ;;                  4   12[COMRAM] unsigned long 
 10706 ;; Registers used:
 10707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10708 ;; Tracked objects:
 10709 ;;		On entry : 0/0
 10710 ;;		On exit  : 0/0
 10711 ;;		Unchanged: 0/0
 10712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10713 ;;      Params:         6       0       0       0       0       0       0       0       0
 10714 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10715 ;;      Temps:          5       0       0       0       0       0       0       0       0
 10716 ;;      Totals:        11       0       0       0       0       0       0       0       0
 10717 ;;Total ram usage:       11 bytes
 10718 ;; Hardware stack levels used:    1
 10719 ;; Hardware stack levels required when called:    1
 10720 ;; This function calls:
 10721 ;;		___lmul
 10722 ;; This function is called by:
 10723 ;;		_dir_sdi
 10724 ;;		_dir_next
 10725 ;;		_f_write
 10726 ;;		_f_lseek
 10727 ;;		_f_read
 10728 ;; This function uses a non-reentrant model
 10729 ;;
 10730                           
 10731                           	psect	text27
 10732  004CE4                     __ptext27:
 10733                           	opt callstack 0
 10734  004CE4                     _clust2sect:
 10735                           	opt callstack 27
 10736                           
 10737                           ;ff.c: 801:  FATFS* fs,;ff.c: 802:  DWORD clst;ff.c: 804: {;ff.c: 805:  clst -= 2;
 10738                           
 10739                           ;incstack = 0
 10740  004CE4  0E02               	movlw	2
 10741  004CE6  5E0F               	subwf	clust2sect@clst,f,c
 10742  004CE8  0E00               	movlw	0
 10743  004CEA  5A10               	subwfb	clust2sect@clst+1,f,c
 10744  004CEC  5A11               	subwfb	clust2sect@clst+2,f,c
 10745  004CEE  5A12               	subwfb	clust2sect@clst+3,f,c
 10746                           
 10747                           ;ff.c: 806:  if (clst >= fs->n_fatent - 2) return 0;
 10748  004CF0  EE20 F012          	lfsr	2,18
 10749  004CF4  500D               	movf	clust2sect@fs,w,c
 10750  004CF6  26D9               	addwf	fsr2l,f,c
 10751  004CF8  500E               	movf	clust2sect@fs+1,w,c
 10752  004CFA  22DA               	addwfc	fsr2h,f,c
 10753  004CFC  0EFE               	movlw	254
 10754  004CFE  24DE               	addwf	postinc2,w,c
 10755  004D00  6E13               	movwf	??_clust2sect& (0+255),c
 10756  004D02  0EFF               	movlw	255
 10757  004D04  20DE               	addwfc	postinc2,w,c
 10758  004D06  6E14               	movwf	(??_clust2sect+1)& (0+255),c
 10759  004D08  0EFF               	movlw	255
 10760  004D0A  20DE               	addwfc	postinc2,w,c
 10761  004D0C  6E15               	movwf	(??_clust2sect+2)& (0+255),c
 10762  004D0E  0EFF               	movlw	255
 10763  004D10  20DE               	addwfc	postinc2,w,c
 10764  004D12  6E16               	movwf	(??_clust2sect+3)& (0+255),c
 10765  004D14  5013               	movf	??_clust2sect,w,c
 10766  004D16  5C0F               	subwf	clust2sect@clst,w,c
 10767  004D18  5014               	movf	??_clust2sect+1,w,c
 10768  004D1A  5810               	subwfb	clust2sect@clst+1,w,c
 10769  004D1C  5015               	movf	??_clust2sect+2,w,c
 10770  004D1E  5811               	subwfb	clust2sect@clst+2,w,c
 10771  004D20  5016               	movf	??_clust2sect+3,w,c
 10772  004D22  5812               	subwfb	clust2sect@clst+3,w,c
 10773  004D24  A0D8               	btfss	status,0,c
 10774  004D26  D009               	goto	l4541
 10775  004D28  0E00               	movlw	0
 10776  004D2A  6E0D               	movwf	?_clust2sect,c
 10777  004D2C  0E00               	movlw	0
 10778  004D2E  6E0E               	movwf	?_clust2sect+1,c
 10779  004D30  0E00               	movlw	0
 10780  004D32  6E0F               	movwf	?_clust2sect+2,c
 10781  004D34  0E00               	movlw	0
 10782  004D36  6E10               	movwf	?_clust2sect+3,c
 10783  004D38  0012               	return	
 10784  004D3A                     l4541:
 10785                           
 10786                           ;ff.c: 807:  return clst * fs->csize + fs->database;
 10787  004D3A  EE20 F026          	lfsr	2,38
 10788  004D3E  500D               	movf	clust2sect@fs,w,c
 10789  004D40  26D9               	addwf	fsr2l,f,c
 10790  004D42  500E               	movf	clust2sect@fs+1,w,c
 10791  004D44  22DA               	addwfc	fsr2h,f,c
 10792  004D46  CFDE F013          	movff	postinc2,??_clust2sect
 10793  004D4A  CFDE F014          	movff	postinc2,??_clust2sect+1
 10794  004D4E  CFDE F015          	movff	postinc2,??_clust2sect+2
 10795  004D52  CFDE F016          	movff	postinc2,??_clust2sect+3
 10796  004D56  EE20 F002          	lfsr	2,2
 10797  004D5A  500D               	movf	clust2sect@fs,w,c
 10798  004D5C  26D9               	addwf	fsr2l,f,c
 10799  004D5E  500E               	movf	clust2sect@fs+1,w,c
 10800  004D60  22DA               	addwfc	fsr2h,f,c
 10801  004D62  50DF               	movf	indf2,w,c
 10802  004D64  6E17               	movwf	(??_clust2sect+4)& (0+255),c
 10803  004D66  5017               	movf	??_clust2sect+4,w,c
 10804  004D68  6E01               	movwf	___lmul@multiplier,c
 10805  004D6A  6A02               	clrf	___lmul@multiplier+1,c
 10806  004D6C  6A03               	clrf	___lmul@multiplier+2,c
 10807  004D6E  6A04               	clrf	___lmul@multiplier+3,c
 10808  004D70  C00F  F005         	movff	clust2sect@clst,___lmul@multiplicand
 10809  004D74  C010  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 10810  004D78  C011  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 10811  004D7C  C012  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 10812  004D80  ECC8  F029         	call	___lmul	;wreg free
 10813  004D84  5013               	movf	??_clust2sect,w,c
 10814  004D86  2401               	addwf	?___lmul,w,c
 10815  004D88  6E0D               	movwf	?_clust2sect,c
 10816  004D8A  5014               	movf	??_clust2sect+1,w,c
 10817  004D8C  2002               	addwfc	?___lmul+1,w,c
 10818  004D8E  6E0E               	movwf	?_clust2sect+1,c
 10819  004D90  5015               	movf	??_clust2sect+2,w,c
 10820  004D92  2003               	addwfc	?___lmul+2,w,c
 10821  004D94  6E0F               	movwf	?_clust2sect+2,c
 10822  004D96  5016               	movf	??_clust2sect+3,w,c
 10823  004D98  2004               	addwfc	?___lmul+3,w,c
 10824  004D9A  6E10               	movwf	?_clust2sect+3,c
 10825  004D9C  0012               	return		;funcret
 10826  004D9E                     __end_of_clust2sect:
 10827                           	opt callstack 0
 10828                           
 10829 ;; *************** function ___lmul *****************
 10830 ;; Defined at:
 10831 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul32.c"
 10832 ;; Parameters:    Size  Location     Type
 10833 ;;  multiplier      4    0[COMRAM] unsigned long 
 10834 ;;  multiplicand    4    4[COMRAM] unsigned long 
 10835 ;; Auto vars:     Size  Location     Type
 10836 ;;  product         4    8[COMRAM] unsigned long 
 10837 ;; Return value:  Size  Location     Type
 10838 ;;                  4    0[COMRAM] unsigned long 
 10839 ;; Registers used:
 10840 ;;		wreg, status,2, status,0
 10841 ;; Tracked objects:
 10842 ;;		On entry : 0/0
 10843 ;;		On exit  : 0/0
 10844 ;;		Unchanged: 0/0
 10845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10846 ;;      Params:         8       0       0       0       0       0       0       0       0
 10847 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10848 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10849 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10850 ;;Total ram usage:       12 bytes
 10851 ;; Hardware stack levels used:    1
 10852 ;; This function calls:
 10853 ;;		Nothing
 10854 ;; This function is called by:
 10855 ;;		_clust2sect
 10856 ;;		_find_volume
 10857 ;; This function uses a non-reentrant model
 10858 ;;
 10859                           
 10860                           	psect	text28
 10861  005390                     __ptext28:
 10862                           	opt callstack 0
 10863  005390                     ___lmul:
 10864                           	opt callstack 27
 10865                           
 10866                           ;incstack = 0
 10867  005390  0E00               	movlw	0
 10868  005392  6E09               	movwf	___lmul@product,c
 10869  005394  0E00               	movlw	0
 10870  005396  6E0A               	movwf	___lmul@product+1,c
 10871  005398  0E00               	movlw	0
 10872  00539A  6E0B               	movwf	___lmul@product+2,c
 10873  00539C  0E00               	movlw	0
 10874  00539E  6E0C               	movwf	___lmul@product+3,c
 10875  0053A0                     l4517:
 10876  0053A0  A001               	btfss	___lmul@multiplier,0,c
 10877  0053A2  D008               	goto	l4521
 10878  0053A4  5005               	movf	___lmul@multiplicand,w,c
 10879  0053A6  2609               	addwf	___lmul@product,f,c
 10880  0053A8  5006               	movf	___lmul@multiplicand+1,w,c
 10881  0053AA  220A               	addwfc	___lmul@product+1,f,c
 10882  0053AC  5007               	movf	___lmul@multiplicand+2,w,c
 10883  0053AE  220B               	addwfc	___lmul@product+2,f,c
 10884  0053B0  5008               	movf	___lmul@multiplicand+3,w,c
 10885  0053B2  220C               	addwfc	___lmul@product+3,f,c
 10886  0053B4                     l4521:
 10887  0053B4  90D8               	bcf	status,0,c
 10888  0053B6  3605               	rlcf	___lmul@multiplicand,f,c
 10889  0053B8  3606               	rlcf	___lmul@multiplicand+1,f,c
 10890  0053BA  3607               	rlcf	___lmul@multiplicand+2,f,c
 10891  0053BC  3608               	rlcf	___lmul@multiplicand+3,f,c
 10892  0053BE  90D8               	bcf	status,0,c
 10893  0053C0  3204               	rrcf	___lmul@multiplier+3,f,c
 10894  0053C2  3203               	rrcf	___lmul@multiplier+2,f,c
 10895  0053C4  3202               	rrcf	___lmul@multiplier+1,f,c
 10896  0053C6  3201               	rrcf	___lmul@multiplier,f,c
 10897  0053C8  5001               	movf	___lmul@multiplier,w,c
 10898  0053CA  1002               	iorwf	___lmul@multiplier+1,w,c
 10899  0053CC  1003               	iorwf	___lmul@multiplier+2,w,c
 10900  0053CE  1004               	iorwf	___lmul@multiplier+3,w,c
 10901  0053D0  A4D8               	btfss	status,2,c
 10902  0053D2  D7E6               	goto	l4517
 10903  0053D4  C009  F001         	movff	___lmul@product,?___lmul
 10904  0053D8  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 10905  0053DC  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 10906  0053E0  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 10907  0053E4  0012               	return		;funcret
 10908  0053E6                     __end_of___lmul:
 10909                           	opt callstack 0
 10910                           
 10911 ;; *************** function ___lldiv *****************
 10912 ;; Defined at:
 10913 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
 10914 ;; Parameters:    Size  Location     Type
 10915 ;;  dividend        4    0[COMRAM] unsigned long 
 10916 ;;  divisor         4    4[COMRAM] unsigned long 
 10917 ;; Auto vars:     Size  Location     Type
 10918 ;;  quotient        4    8[COMRAM] unsigned long 
 10919 ;;  counter         1   12[COMRAM] unsigned char 
 10920 ;; Return value:  Size  Location     Type
 10921 ;;                  4    0[COMRAM] unsigned long 
 10922 ;; Registers used:
 10923 ;;		wreg, status,2, status,0
 10924 ;; Tracked objects:
 10925 ;;		On entry : 0/0
 10926 ;;		On exit  : 0/0
 10927 ;;		Unchanged: 0/0
 10928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10929 ;;      Params:         8       0       0       0       0       0       0       0       0
 10930 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10931 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10932 ;;      Totals:        13       0       0       0       0       0       0       0       0
 10933 ;;Total ram usage:       13 bytes
 10934 ;; Hardware stack levels used:    1
 10935 ;; This function calls:
 10936 ;;		Nothing
 10937 ;; This function is called by:
 10938 ;;		_find_volume
 10939 ;;		_f_lseek
 10940 ;; This function uses a non-reentrant model
 10941 ;;
 10942                           
 10943                           	psect	text29
 10944  004F88                     __ptext29:
 10945                           	opt callstack 0
 10946  004F88                     ___lldiv:
 10947                           	opt callstack 27
 10948                           
 10949                           ;incstack = 0
 10950  004F88  0E00               	movlw	0
 10951  004F8A  6E09               	movwf	___lldiv@quotient,c
 10952  004F8C  0E00               	movlw	0
 10953  004F8E  6E0A               	movwf	___lldiv@quotient+1,c
 10954  004F90  0E00               	movlw	0
 10955  004F92  6E0B               	movwf	___lldiv@quotient+2,c
 10956  004F94  0E00               	movlw	0
 10957  004F96  6E0C               	movwf	___lldiv@quotient+3,c
 10958  004F98  5005               	movf	___lldiv@divisor,w,c
 10959  004F9A  1006               	iorwf	___lldiv@divisor+1,w,c
 10960  004F9C  1007               	iorwf	___lldiv@divisor+2,w,c
 10961  004F9E  1008               	iorwf	___lldiv@divisor+3,w,c
 10962  004FA0  B4D8               	btfsc	status,2,c
 10963  004FA2  D02A               	goto	l937
 10964  004FA4  0E01               	movlw	1
 10965  004FA6  6E0D               	movwf	___lldiv@counter,c
 10966  004FA8  D006               	goto	l5417
 10967  004FAA                     l5415:
 10968  004FAA  90D8               	bcf	status,0,c
 10969  004FAC  3605               	rlcf	___lldiv@divisor,f,c
 10970  004FAE  3606               	rlcf	___lldiv@divisor+1,f,c
 10971  004FB0  3607               	rlcf	___lldiv@divisor+2,f,c
 10972  004FB2  3608               	rlcf	___lldiv@divisor+3,f,c
 10973  004FB4  2A0D               	incf	___lldiv@counter,f,c
 10974  004FB6                     l5417:
 10975  004FB6  AE08               	btfss	___lldiv@divisor+3,7,c
 10976  004FB8  D7F8               	goto	l5415
 10977  004FBA                     u6980:
 10978  004FBA  90D8               	bcf	status,0,c
 10979  004FBC  3609               	rlcf	___lldiv@quotient,f,c
 10980  004FBE  360A               	rlcf	___lldiv@quotient+1,f,c
 10981  004FC0  360B               	rlcf	___lldiv@quotient+2,f,c
 10982  004FC2  360C               	rlcf	___lldiv@quotient+3,f,c
 10983  004FC4  5005               	movf	___lldiv@divisor,w,c
 10984  004FC6  5C01               	subwf	___lldiv@dividend,w,c
 10985  004FC8  5006               	movf	___lldiv@divisor+1,w,c
 10986  004FCA  5802               	subwfb	___lldiv@dividend+1,w,c
 10987  004FCC  5007               	movf	___lldiv@divisor+2,w,c
 10988  004FCE  5803               	subwfb	___lldiv@dividend+2,w,c
 10989  004FD0  5008               	movf	___lldiv@divisor+3,w,c
 10990  004FD2  5804               	subwfb	___lldiv@dividend+3,w,c
 10991  004FD4  A0D8               	btfss	status,0,c
 10992  004FD6  D009               	goto	l5427
 10993  004FD8  5005               	movf	___lldiv@divisor,w,c
 10994  004FDA  5E01               	subwf	___lldiv@dividend,f,c
 10995  004FDC  5006               	movf	___lldiv@divisor+1,w,c
 10996  004FDE  5A02               	subwfb	___lldiv@dividend+1,f,c
 10997  004FE0  5007               	movf	___lldiv@divisor+2,w,c
 10998  004FE2  5A03               	subwfb	___lldiv@dividend+2,f,c
 10999  004FE4  5008               	movf	___lldiv@divisor+3,w,c
 11000  004FE6  5A04               	subwfb	___lldiv@dividend+3,f,c
 11001  004FE8  8009               	bsf	___lldiv@quotient,0,c
 11002  004FEA                     l5427:
 11003  004FEA  90D8               	bcf	status,0,c
 11004  004FEC  3208               	rrcf	___lldiv@divisor+3,f,c
 11005  004FEE  3207               	rrcf	___lldiv@divisor+2,f,c
 11006  004FF0  3206               	rrcf	___lldiv@divisor+1,f,c
 11007  004FF2  3205               	rrcf	___lldiv@divisor,f,c
 11008  004FF4  2E0D               	decfsz	___lldiv@counter,f,c
 11009  004FF6  D7E1               	goto	u6980
 11010  004FF8                     l937:
 11011  004FF8  C009  F001         	movff	___lldiv@quotient,?___lldiv
 11012  004FFC  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 11013  005000  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 11014  005004  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 11015  005008  0012               	return		;funcret
 11016  00500A                     __end_of___lldiv:
 11017                           	opt callstack 0
 11018                           
 11019 ;; *************** function _f_close *****************
 11020 ;; Defined at:
 11021 ;;		line 2861 in file "ff.c"
 11022 ;; Parameters:    Size  Location     Type
 11023 ;;  fp              2   77[COMRAM] PTR struct .
 11024 ;;		 -> Fil(32), 
 11025 ;; Auto vars:     Size  Location     Type
 11026 ;;  res             1   79[COMRAM] enum E93
 11027 ;; Return value:  Size  Location     Type
 11028 ;;                  1    wreg      enum E93
 11029 ;; Registers used:
 11030 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11031 ;; Tracked objects:
 11032 ;;		On entry : 0/0
 11033 ;;		On exit  : 0/0
 11034 ;;		Unchanged: 0/0
 11035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11036 ;;      Params:         2       0       0       0       0       0       0       0       0
 11037 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11038 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11039 ;;      Totals:         3       0       0       0       0       0       0       0       0
 11040 ;;Total ram usage:        3 bytes
 11041 ;; Hardware stack levels used:    1
 11042 ;; Hardware stack levels required when called:    9
 11043 ;; This function calls:
 11044 ;;		_f_sync
 11045 ;;		_validate
 11046 ;; This function is called by:
 11047 ;;		_guardar
 11048 ;; This function uses a non-reentrant model
 11049 ;;
 11050                           
 11051                           	psect	text30
 11052  0054AC                     __ptext30:
 11053                           	opt callstack 0
 11054  0054AC                     _f_close:
 11055                           	opt callstack 20
 11056                           
 11057                           ;ff.c: 2862:  FIL *fp;ff.c: 2864: {;ff.c: 2865:  FRESULT res;;ff.c: 2869:  res = f_sync(
      +                          fp);
 11058                           
 11059                           ;incstack = 0
 11060  0054AC  C04E  F045         	movff	f_close@fp,f_sync@fp
 11061  0054B0  C04F  F046         	movff	f_close@fp+1,f_sync@fp+1
 11062  0054B4  EC40  F022         	call	_f_sync	;wreg free
 11063  0054B8  6E50               	movwf	f_close@res,c
 11064                           
 11065                           ;ff.c: 2870:  if (res == FR_OK)
 11066  0054BA  5050               	movf	f_close@res,w,c
 11067  0054BC  A4D8               	btfss	status,2,c
 11068  0054BE  0012               	return	
 11069                           
 11070                           ;ff.c: 2872:  {;ff.c: 2873:   res = validate(fp);
 11071  0054C0  C04E  F002         	movff	f_close@fp,validate@obj
 11072  0054C4  C04F  F003         	movff	f_close@fp+1,validate@obj+1
 11073  0054C8  EC7A  F027         	call	_validate	;wreg free
 11074  0054CC  6E50               	movwf	f_close@res,c
 11075                           
 11076                           ;ff.c: 2874:   if (res == FR_OK) {
 11077  0054CE  5050               	movf	f_close@res,w,c
 11078  0054D0  A4D8               	btfss	status,2,c
 11079  0054D2  0012               	return	
 11080                           
 11081                           ;ff.c: 2882:     fp->fs = 0;
 11082  0054D4  C04E  FFD9         	movff	f_close@fp,fsr2l
 11083  0054D8  C04F  FFDA         	movff	f_close@fp+1,fsr2h
 11084  0054DC  0E00               	movlw	0
 11085  0054DE  6EDE               	movwf	postinc2,c
 11086  0054E0  0E00               	movlw	0
 11087  0054E2  6EDD               	movwf	postdec2,c
 11088  0054E4  0012               	return		;funcret
 11089  0054E6                     __end_of_f_close:
 11090                           	opt callstack 0
 11091                           
 11092 ;; *************** function _f_sync *****************
 11093 ;; Defined at:
 11094 ;;		line 2813 in file "ff.c"
 11095 ;; Parameters:    Size  Location     Type
 11096 ;;  fp              2   68[COMRAM] PTR struct .
 11097 ;;		 -> Fil(32), 
 11098 ;; Auto vars:     Size  Location     Type
 11099 ;;  tm              4    0        unsigned long 
 11100 ;;  dir             2   75[COMRAM] PTR unsigned char 
 11101 ;;		 -> FatFs(558), NULL(0), 
 11102 ;;  res             1   74[COMRAM] enum E93
 11103 ;; Return value:  Size  Location     Type
 11104 ;;                  1    wreg      enum E93
 11105 ;; Registers used:
 11106 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11107 ;; Tracked objects:
 11108 ;;		On entry : 0/0
 11109 ;;		On exit  : 0/0
 11110 ;;		Unchanged: 0/0
 11111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11112 ;;      Params:         2       0       0       0       0       0       0       0       0
 11113 ;;      Locals:         7       0       0       0       0       0       0       0       0
 11114 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11115 ;;      Totals:         9       0       0       0       0       0       0       0       0
 11116 ;;Total ram usage:        9 bytes
 11117 ;; Hardware stack levels used:    1
 11118 ;; Hardware stack levels required when called:    8
 11119 ;; This function calls:
 11120 ;;		_move_window
 11121 ;;		_st_clust
 11122 ;;		_sync_fs
 11123 ;;		_validate
 11124 ;; This function is called by:
 11125 ;;		_f_close
 11126 ;; This function uses a non-reentrant model
 11127 ;;
 11128                           
 11129                           	psect	text31
 11130  004480                     __ptext31:
 11131                           	opt callstack 0
 11132  004480                     _f_sync:
 11133                           	opt callstack 20
 11134                           
 11135                           ;ff.c: 2814:  FIL* fp;ff.c: 2816: {;ff.c: 2817:  FRESULT res;;ff.c: 2818:  DWORD tm;;ff.
      +                          c: 2819:  BYTE *dir;;ff.c: 2822:  res = validate(fp);
 11136                           
 11137                           ;incstack = 0
 11138  004480  C045  F002         	movff	f_sync@fp,validate@obj
 11139  004484  C046  F003         	movff	f_sync@fp+1,validate@obj+1
 11140  004488  EC7A  F027         	call	_validate	;wreg free
 11141  00448C  6E4B               	movwf	f_sync@res,c
 11142                           
 11143                           ;ff.c: 2823:  if (res == FR_OK) {
 11144  00448E  504B               	movf	f_sync@res,w,c
 11145  004490  A4D8               	btfss	status,2,c
 11146  004492  D095               	goto	l5831
 11147                           
 11148                           ;ff.c: 2824:   if (fp->flag & 0x20) {
 11149  004494  EE20 F004          	lfsr	2,4
 11150  004498  5045               	movf	f_sync@fp,w,c
 11151  00449A  26D9               	addwf	fsr2l,f,c
 11152  00449C  5046               	movf	f_sync@fp+1,w,c
 11153  00449E  22DA               	addwfc	fsr2h,f,c
 11154  0044A0  AADF               	btfss	indf2,5,c
 11155  0044A2  D08D               	goto	l5831
 11156                           
 11157                           ;ff.c: 2833:    res = move_window(fp->fs, fp->dir_sect);
 11158  0044A4  C045  FFD9         	movff	f_sync@fp,fsr2l
 11159  0044A8  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11160  0044AC  CFDE F030          	movff	postinc2,move_window@fs
 11161  0044B0  CFDD F031          	movff	postdec2,move_window@fs+1
 11162  0044B4  EE20 F01A          	lfsr	2,26
 11163  0044B8  5045               	movf	f_sync@fp,w,c
 11164  0044BA  26D9               	addwf	fsr2l,f,c
 11165  0044BC  5046               	movf	f_sync@fp+1,w,c
 11166  0044BE  22DA               	addwfc	fsr2h,f,c
 11167  0044C0  CFDE F032          	movff	postinc2,move_window@sector
 11168  0044C4  CFDE F033          	movff	postinc2,move_window@sector+1
 11169  0044C8  CFDE F034          	movff	postinc2,move_window@sector+2
 11170  0044CC  CFDE F035          	movff	postinc2,move_window@sector+3
 11171  0044D0  EC27  F027         	call	_move_window	;wreg free
 11172  0044D4  6E4B               	movwf	f_sync@res,c
 11173                           
 11174                           ;ff.c: 2834:    if (res == FR_OK) {
 11175  0044D6  504B               	movf	f_sync@res,w,c
 11176  0044D8  A4D8               	btfss	status,2,c
 11177  0044DA  D071               	goto	l5831
 11178                           
 11179                           ;ff.c: 2835:     dir = fp->dir_ptr;
 11180  0044DC  EE20 F01E          	lfsr	2,30
 11181  0044E0  5045               	movf	f_sync@fp,w,c
 11182  0044E2  26D9               	addwf	fsr2l,f,c
 11183  0044E4  5046               	movf	f_sync@fp+1,w,c
 11184  0044E6  22DA               	addwfc	fsr2h,f,c
 11185  0044E8  CFDE F04C          	movff	postinc2,f_sync@dir
 11186  0044EC  CFDD F04D          	movff	postdec2,f_sync@dir+1
 11187                           
 11188                           ;ff.c: 2836:     dir[11] |= 0x20;
 11189  0044F0  EE20 F00B          	lfsr	2,11
 11190  0044F4  504C               	movf	f_sync@dir,w,c
 11191  0044F6  26D9               	addwf	fsr2l,f,c
 11192  0044F8  504D               	movf	f_sync@dir+1,w,c
 11193  0044FA  22DA               	addwfc	fsr2h,f,c
 11194  0044FC  0E00               	movlw	0
 11195  0044FE  8ADB               	bsf	plusw2,5,c
 11196                           
 11197                           ;ff.c: 2837:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 11198  004500  EE20 F00A          	lfsr	2,10
 11199  004504  5045               	movf	f_sync@fp,w,c
 11200  004506  26D9               	addwf	fsr2l,f,c
 11201  004508  5046               	movf	f_sync@fp+1,w,c
 11202  00450A  22DA               	addwfc	fsr2h,f,c
 11203  00450C  EE10 F01C          	lfsr	1,28
 11204  004510  504C               	movf	f_sync@dir,w,c
 11205  004512  26E1               	addwf	fsr1l,f,c
 11206  004514  504D               	movf	f_sync@dir+1,w,c
 11207  004516  22E2               	addwfc	fsr1h,f,c
 11208  004518  CFDE FFE6          	movff	postinc2,postinc1
 11209  00451C  CFDE FFE6          	movff	postinc2,postinc1
 11210  004520  CFDE FFE6          	movff	postinc2,postinc1
 11211  004524  CFDE FFE6          	movff	postinc2,postinc1
 11212                           
 11213                           ;ff.c: 2838:     st_clust(dir, fp->sclust);
 11214  004528  C04C  F001         	movff	f_sync@dir,st_clust@dir
 11215  00452C  C04D  F002         	movff	f_sync@dir+1,st_clust@dir+1
 11216  004530  EE20 F00E          	lfsr	2,14
 11217  004534  5045               	movf	f_sync@fp,w,c
 11218  004536  26D9               	addwf	fsr2l,f,c
 11219  004538  5046               	movf	f_sync@fp+1,w,c
 11220  00453A  22DA               	addwfc	fsr2h,f,c
 11221  00453C  CFDE F003          	movff	postinc2,st_clust@cl
 11222  004540  CFDE F004          	movff	postinc2,st_clust@cl+1
 11223  004544  CFDE F005          	movff	postinc2,st_clust@cl+2
 11224  004548  CFDE F006          	movff	postinc2,st_clust@cl+3
 11225  00454C  ECA5  F02A         	call	_st_clust	;wreg free
 11226                           
 11227                           ;ff.c: 2840:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 11228  004550  EE20 F016          	lfsr	2,22
 11229  004554  504C               	movf	f_sync@dir,w,c
 11230  004556  26D9               	addwf	fsr2l,f,c
 11231  004558  504D               	movf	f_sync@dir+1,w,c
 11232  00455A  22DA               	addwfc	fsr2h,f,c
 11233  00455C  0E00               	movlw	0
 11234  00455E  6EDE               	movwf	postinc2,c
 11235  004560  0E00               	movlw	0
 11236  004562  6EDE               	movwf	postinc2,c
 11237  004564  0E21               	movlw	33
 11238  004566  6EDE               	movwf	postinc2,c
 11239  004568  0E46               	movlw	70
 11240  00456A  6EDD               	movwf	postdec2,c
 11241                           
 11242                           ;ff.c: 2841:     *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 11243  00456C  EE20 F012          	lfsr	2,18
 11244  004570  504C               	movf	f_sync@dir,w,c
 11245  004572  26D9               	addwf	fsr2l,f,c
 11246  004574  504D               	movf	f_sync@dir+1,w,c
 11247  004576  22DA               	addwfc	fsr2h,f,c
 11248  004578  0E00               	movlw	0
 11249  00457A  6EDE               	movwf	postinc2,c
 11250  00457C  0E00               	movlw	0
 11251  00457E  6EDD               	movwf	postdec2,c
 11252                           
 11253                           ;ff.c: 2842:     fp->flag &= ~0x20;
 11254  004580  EE20 F004          	lfsr	2,4
 11255  004584  5045               	movf	f_sync@fp,w,c
 11256  004586  26D9               	addwf	fsr2l,f,c
 11257  004588  5046               	movf	f_sync@fp+1,w,c
 11258  00458A  22DA               	addwfc	fsr2h,f,c
 11259  00458C  0EDF               	movlw	223
 11260  00458E  16DF               	andwf	indf2,f,c
 11261                           
 11262                           ;ff.c: 2843:     fp->fs->wflag = 1;
 11263  004590  C045  FFD9         	movff	f_sync@fp,fsr2l
 11264  004594  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11265  004598  EE10 F004          	lfsr	1,4
 11266  00459C  50DE               	movf	postinc2,w,c
 11267  00459E  26E1               	addwf	fsr1l,f,c
 11268  0045A0  50DD               	movf	postdec2,w,c
 11269  0045A2  22E2               	addwfc	fsr1h,f,c
 11270  0045A4  0E01               	movlw	1
 11271  0045A6  6EE7               	movwf	indf1,c
 11272                           
 11273                           ;ff.c: 2844:     res = sync_fs(fp->fs);
 11274  0045A8  C045  FFD9         	movff	f_sync@fp,fsr2l
 11275  0045AC  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11276  0045B0  CFDE F03A          	movff	postinc2,sync_fs@fs
 11277  0045B4  CFDD F03B          	movff	postdec2,sync_fs@fs+1
 11278  0045B8  ECBD  F01E         	call	_sync_fs	;wreg free
 11279  0045BC  6E4B               	movwf	f_sync@res,c
 11280  0045BE                     l5831:
 11281                           
 11282                           ;ff.c: 2849:  return res;
 11283  0045BE  504B               	movf	f_sync@res,w,c
 11284  0045C0  0012               	return		;funcret
 11285  0045C2                     __end_of_f_sync:
 11286                           	opt callstack 0
 11287                           
 11288 ;; *************** function _validate *****************
 11289 ;; Defined at:
 11290 ;;		line 2372 in file "ff.c"
 11291 ;; Parameters:    Size  Location     Type
 11292 ;;  obj             2    1[COMRAM] PTR void 
 11293 ;;		 -> Fil(32), 
 11294 ;; Auto vars:     Size  Location     Type
 11295 ;;  fil             2    7[COMRAM] PTR struct .
 11296 ;;		 -> Fil(32), 
 11297 ;; Return value:  Size  Location     Type
 11298 ;;                  1    wreg      enum E93
 11299 ;; Registers used:
 11300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11301 ;; Tracked objects:
 11302 ;;		On entry : 0/0
 11303 ;;		On exit  : 0/0
 11304 ;;		Unchanged: 0/0
 11305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11306 ;;      Params:         2       0       0       0       0       0       0       0       0
 11307 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11308 ;;      Temps:          4       0       0       0       0       0       0       0       0
 11309 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11310 ;;Total ram usage:        8 bytes
 11311 ;; Hardware stack levels used:    1
 11312 ;; Hardware stack levels required when called:    1
 11313 ;; This function calls:
 11314 ;;		_disk_status
 11315 ;; This function is called by:
 11316 ;;		_f_write
 11317 ;;		_f_sync
 11318 ;;		_f_close
 11319 ;;		_f_lseek
 11320 ;;		_f_read
 11321 ;; This function uses a non-reentrant model
 11322 ;;
 11323                           
 11324                           	psect	text32
 11325  004EF4                     __ptext32:
 11326                           	opt callstack 0
 11327  004EF4                     _validate:
 11328                           	opt callstack 27
 11329                           
 11330                           ;ff.c: 2373:  void* obj;ff.c: 2375: {;ff.c: 2376:  FIL *fil = (FIL*)obj;
 11331                           
 11332                           ;incstack = 0
 11333  004EF4  C002  F008         	movff	validate@obj,validate@fil
 11334  004EF8  C003  F009         	movff	validate@obj+1,validate@fil+1
 11335                           
 11336                           ;ff.c: 2379:  if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (di
      +                          sk_status(fil->fs->drv) & 0x01))
 11337  004EFC  5008               	movf	validate@fil,w,c
 11338  004EFE  1009               	iorwf	validate@fil+1,w,c
 11339  004F00  B4D8               	btfsc	status,2,c
 11340  004F02  D03E               	goto	u6960
 11341  004F04  C008  FFD9         	movff	validate@fil,fsr2l
 11342  004F08  C009  FFDA         	movff	validate@fil+1,fsr2h
 11343  004F0C  50DE               	movf	postinc2,w,c
 11344  004F0E  10DE               	iorwf	postinc2,w,c
 11345  004F10  B4D8               	btfsc	status,2,c
 11346  004F12  D036               	goto	u6960
 11347  004F14  C008  FFD9         	movff	validate@fil,fsr2l
 11348  004F18  C009  FFDA         	movff	validate@fil+1,fsr2h
 11349  004F1C  CFDE F004          	movff	postinc2,??_validate
 11350  004F20  CFDD F005          	movff	postdec2,??_validate+1
 11351  004F24  C004  FFD9         	movff	??_validate,fsr2l
 11352  004F28  C005  FFDA         	movff	??_validate+1,fsr2h
 11353  004F2C  50DF               	movf	indf2,w,c
 11354  004F2E  B4D8               	btfsc	status,2,c
 11355  004F30  D027               	goto	u6960
 11356  004F32  EE20 F002          	lfsr	2,2
 11357  004F36  5008               	movf	validate@fil,w,c
 11358  004F38  26D9               	addwf	fsr2l,f,c
 11359  004F3A  5009               	movf	validate@fil+1,w,c
 11360  004F3C  22DA               	addwfc	fsr2h,f,c
 11361  004F3E  C008  FFE1         	movff	validate@fil,fsr1l
 11362  004F42  C009  FFE2         	movff	validate@fil+1,fsr1h
 11363  004F46  EE00 F006          	lfsr	0,6
 11364  004F4A  50E6               	movf	postinc1,w,c
 11365  004F4C  26E9               	addwf	fsr0l,f,c
 11366  004F4E  50E5               	movf	postdec1,w,c
 11367  004F50  22EA               	addwfc	fsr0h,f,c
 11368  004F52  50DE               	movf	postinc2,w,c
 11369  004F54  18EE               	xorwf	postinc0,w,c
 11370  004F56  E114               	bnz	l5401
 11371  004F58  50DE               	movf	postinc2,w,c
 11372  004F5A  18EE               	xorwf	postinc0,w,c
 11373  004F5C  A4D8               	btfss	status,2,c
 11374  004F5E  D010               	goto	u6960
 11375  004F60  C008  FFD9         	movff	validate@fil,fsr2l
 11376  004F64  C009  FFDA         	movff	validate@fil+1,fsr2h
 11377  004F68  EE10 F001          	lfsr	1,1
 11378  004F6C  50DE               	movf	postinc2,w,c
 11379  004F6E  26E1               	addwf	fsr1l,f,c
 11380  004F70  50DD               	movf	postdec2,w,c
 11381  004F72  22E2               	addwfc	fsr1h,f,c
 11382  004F74  50E7               	movf	indf1,w,c
 11383  004F76  ECFF  F02A         	call	_disk_status
 11384  004F7A  6E04               	movwf	??_validate& (0+255),c
 11385  004F7C  A004               	btfss	??_validate,0,c
 11386  004F7E  D002               	goto	l5405
 11387  004F80                     u6960:
 11388  004F80                     l5401:
 11389                           
 11390                           ;ff.c: 2380:   return FR_INVALID_OBJECT;
 11391  004F80  0E09               	movlw	9
 11392  004F82  0012               	return	
 11393  004F84                     l5405:
 11394                           
 11395                           ;ff.c: 2384:  return FR_OK;
 11396  004F84  0E00               	movlw	0
 11397  004F86  0012               	return		;funcret
 11398  004F88                     __end_of_validate:
 11399                           	opt callstack 0
 11400                           
 11401 ;; *************** function _disk_status *****************
 11402 ;; Defined at:
 11403 ;;		line 356 in file "diskio.c"
 11404 ;; Parameters:    Size  Location     Type
 11405 ;;  pdrv            1    wreg     unsigned char 
 11406 ;; Auto vars:     Size  Location     Type
 11407 ;;  pdrv            1    0[COMRAM] unsigned char 
 11408 ;; Return value:  Size  Location     Type
 11409 ;;                  1    wreg      unsigned char 
 11410 ;; Registers used:
 11411 ;;		wreg, status,2
 11412 ;; Tracked objects:
 11413 ;;		On entry : 0/0
 11414 ;;		On exit  : 0/0
 11415 ;;		Unchanged: 0/0
 11416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11417 ;;      Params:         0       0       0       0       0       0       0       0       0
 11418 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11419 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11420 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11421 ;;Total ram usage:        1 bytes
 11422 ;; Hardware stack levels used:    1
 11423 ;; This function calls:
 11424 ;;		Nothing
 11425 ;; This function is called by:
 11426 ;;		_find_volume
 11427 ;;		_validate
 11428 ;; This function uses a non-reentrant model
 11429 ;;
 11430                           
 11431                           	psect	text33
 11432  0055FE                     __ptext33:
 11433                           	opt callstack 0
 11434  0055FE                     _disk_status:
 11435                           	opt callstack 27
 11436                           
 11437                           ;incstack = 0
 11438                           ;disk_status@pdrv stored from wreg
 11439  0055FE  6E01               	movwf	disk_status@pdrv,c
 11440                           
 11441                           ;diskio.c: 357:  BYTE pdrv;diskio.c: 359: {;diskio.c: 360:  if (pdrv) return 0x01;
 11442  005600  5001               	movf	disk_status@pdrv,w,c
 11443  005602  B4D8               	btfsc	status,2,c
 11444  005604  D002               	goto	l4633
 11445  005606  0E01               	movlw	1
 11446  005608  0012               	return	
 11447  00560A                     l4633:
 11448                           
 11449                           ;diskio.c: 361:  return Stat;
 11450  00560A  0100               	movlb	0	; () banked
 11451  00560C  51F6               	movf	_Stat& (0+255),w,b
 11452  00560E  0012               	return		;funcret
 11453  005610                     __end_of_disk_status:
 11454                           	opt callstack 0
 11455                           
 11456 ;; *************** function _sync_fs *****************
 11457 ;; Defined at:
 11458 ;;		line 760 in file "ff.c"
 11459 ;; Parameters:    Size  Location     Type
 11460 ;;  fs              2   57[COMRAM] PTR struct .
 11461 ;;		 -> FatFs(558), NULL(0), 
 11462 ;; Auto vars:     Size  Location     Type
 11463 ;;  res             1   67[COMRAM] enum E93
 11464 ;; Return value:  Size  Location     Type
 11465 ;;                  1    wreg      enum E93
 11466 ;; Registers used:
 11467 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11468 ;; Tracked objects:
 11469 ;;		On entry : 0/0
 11470 ;;		On exit  : 0/0
 11471 ;;		Unchanged: 0/0
 11472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11473 ;;      Params:         2       0       0       0       0       0       0       0       0
 11474 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11475 ;;      Temps:          8       0       0       0       0       0       0       0       0
 11476 ;;      Totals:        11       0       0       0       0       0       0       0       0
 11477 ;;Total ram usage:       11 bytes
 11478 ;; Hardware stack levels used:    1
 11479 ;; Hardware stack levels required when called:    7
 11480 ;; This function calls:
 11481 ;;		_disk_ioctl
 11482 ;;		_disk_write
 11483 ;;		_mem_set
 11484 ;;		_sync_window
 11485 ;; This function is called by:
 11486 ;;		_f_sync
 11487 ;; This function uses a non-reentrant model
 11488 ;;
 11489                           
 11490                           	psect	text34
 11491  003D7A                     __ptext34:
 11492                           	opt callstack 0
 11493  003D7A                     _sync_fs:
 11494                           	opt callstack 20
 11495                           
 11496                           ;ff.c: 761:  FATFS* fs;ff.c: 763: {;ff.c: 764:  FRESULT res;;ff.c: 767:  res = sync_wind
      +                          ow(fs);
 11497                           
 11498                           ;incstack = 0
 11499  003D7A  C03A  F01B         	movff	sync_fs@fs,sync_window@fs
 11500  003D7E  C03B  F01C         	movff	sync_fs@fs+1,sync_window@fs+1
 11501  003D82  EC4C  F020         	call	_sync_window	;wreg free
 11502  003D86  6E44               	movwf	sync_fs@res,c
 11503                           
 11504                           ;ff.c: 768:  if (res == FR_OK) {
 11505  003D88  5044               	movf	sync_fs@res,w,c
 11506  003D8A  A4D8               	btfss	status,2,c
 11507  003D8C  D0D4               	goto	l242
 11508                           
 11509                           ;ff.c: 770:   if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 11510  003D8E  C03A  FFD9         	movff	sync_fs@fs,fsr2l
 11511  003D92  C03B  FFDA         	movff	sync_fs@fs+1,fsr2h
 11512  003D96  0E03               	movlw	3
 11513  003D98  18DE               	xorwf	postinc2,w,c
 11514  003D9A  A4D8               	btfss	status,2,c
 11515  003D9C  D0B8               	goto	l5097
 11516  003D9E  EE20 F005          	lfsr	2,5
 11517  003DA2  503A               	movf	sync_fs@fs,w,c
 11518  003DA4  26D9               	addwf	fsr2l,f,c
 11519  003DA6  503B               	movf	sync_fs@fs+1,w,c
 11520  003DA8  22DA               	addwfc	fsr2h,f,c
 11521  003DAA  04DE               	decf	postinc2,w,c
 11522  003DAC  A4D8               	btfss	status,2,c
 11523  003DAE  D0AF               	goto	l5097
 11524                           
 11525                           ;ff.c: 772:    mem_set(fs->win, 0, ((UINT)512));
 11526  003DB0  0E2E               	movlw	46
 11527  003DB2  243A               	addwf	sync_fs@fs,w,c
 11528  003DB4  6E01               	movwf	mem_set@dst,c
 11529  003DB6  0E00               	movlw	0
 11530  003DB8  203B               	addwfc	sync_fs@fs+1,w,c
 11531  003DBA  6E02               	movwf	mem_set@dst+1,c
 11532  003DBC  0E00               	movlw	0
 11533  003DBE  6E04               	movwf	mem_set@val+1,c
 11534  003DC0  0E00               	movlw	0
 11535  003DC2  6E03               	movwf	mem_set@val,c
 11536  003DC4  0E02               	movlw	2
 11537  003DC6  6E06               	movwf	mem_set@cnt+1,c
 11538  003DC8  0E00               	movlw	0
 11539  003DCA  6E05               	movwf	mem_set@cnt,c
 11540  003DCC  EC8F  F02A         	call	_mem_set	;wreg free
 11541                           
 11542                           ;ff.c: 773:    *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 11543  003DD0  EE22 F02C          	lfsr	2,556
 11544  003DD4  503A               	movf	sync_fs@fs,w,c
 11545  003DD6  26D9               	addwf	fsr2l,f,c
 11546  003DD8  503B               	movf	sync_fs@fs+1,w,c
 11547  003DDA  22DA               	addwfc	fsr2h,f,c
 11548  003DDC  0E55               	movlw	85
 11549  003DDE  6EDE               	movwf	postinc2,c
 11550  003DE0  0EAA               	movlw	170
 11551  003DE2  6EDD               	movwf	postdec2,c
 11552                           
 11553                           ;ff.c: 774:    *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 11554  003DE4  EE20 F02E          	lfsr	2,46
 11555  003DE8  503A               	movf	sync_fs@fs,w,c
 11556  003DEA  26D9               	addwf	fsr2l,f,c
 11557  003DEC  503B               	movf	sync_fs@fs+1,w,c
 11558  003DEE  22DA               	addwfc	fsr2h,f,c
 11559  003DF0  0E52               	movlw	82
 11560  003DF2  6EDE               	movwf	postinc2,c
 11561  003DF4  0E52               	movlw	82
 11562  003DF6  6EDE               	movwf	postinc2,c
 11563  003DF8  0E61               	movlw	97
 11564  003DFA  6EDE               	movwf	postinc2,c
 11565  003DFC  0E41               	movlw	65
 11566  003DFE  6EDD               	movwf	postdec2,c
 11567                           
 11568                           ;ff.c: 775:    *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 11569  003E00  EE22 F012          	lfsr	2,530
 11570  003E04  503A               	movf	sync_fs@fs,w,c
 11571  003E06  26D9               	addwf	fsr2l,f,c
 11572  003E08  503B               	movf	sync_fs@fs+1,w,c
 11573  003E0A  22DA               	addwfc	fsr2h,f,c
 11574  003E0C  0E72               	movlw	114
 11575  003E0E  6EDE               	movwf	postinc2,c
 11576  003E10  0E72               	movlw	114
 11577  003E12  6EDE               	movwf	postinc2,c
 11578  003E14  0E41               	movlw	65
 11579  003E16  6EDE               	movwf	postinc2,c
 11580  003E18  0E61               	movlw	97
 11581  003E1A  6EDD               	movwf	postdec2,c
 11582                           
 11583                           ;ff.c: 776:    *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 11584  003E1C  EE20 F00E          	lfsr	2,14
 11585  003E20  503A               	movf	sync_fs@fs,w,c
 11586  003E22  26D9               	addwf	fsr2l,f,c
 11587  003E24  503B               	movf	sync_fs@fs+1,w,c
 11588  003E26  22DA               	addwfc	fsr2h,f,c
 11589  003E28  EE12 F016          	lfsr	1,534
 11590  003E2C  503A               	movf	sync_fs@fs,w,c
 11591  003E2E  26E1               	addwf	fsr1l,f,c
 11592  003E30  503B               	movf	sync_fs@fs+1,w,c
 11593  003E32  22E2               	addwfc	fsr1h,f,c
 11594  003E34  CFDE FFE6          	movff	postinc2,postinc1
 11595  003E38  CFDE FFE6          	movff	postinc2,postinc1
 11596  003E3C  CFDE FFE6          	movff	postinc2,postinc1
 11597  003E40  CFDE FFE6          	movff	postinc2,postinc1
 11598                           
 11599                           ;ff.c: 777:    *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 11600  003E44  EE20 F00A          	lfsr	2,10
 11601  003E48  503A               	movf	sync_fs@fs,w,c
 11602  003E4A  26D9               	addwf	fsr2l,f,c
 11603  003E4C  503B               	movf	sync_fs@fs+1,w,c
 11604  003E4E  22DA               	addwfc	fsr2h,f,c
 11605  003E50  EE12 F01A          	lfsr	1,538
 11606  003E54  503A               	movf	sync_fs@fs,w,c
 11607  003E56  26E1               	addwf	fsr1l,f,c
 11608  003E58  503B               	movf	sync_fs@fs+1,w,c
 11609  003E5A  22E2               	addwfc	fsr1h,f,c
 11610  003E5C  CFDE FFE6          	movff	postinc2,postinc1
 11611  003E60  CFDE FFE6          	movff	postinc2,postinc1
 11612  003E64  CFDE FFE6          	movff	postinc2,postinc1
 11613  003E68  CFDE FFE6          	movff	postinc2,postinc1
 11614                           
 11615                           ;ff.c: 779:    fs->winsect = fs->volbase + 1;
 11616  003E6C  EE20 F01A          	lfsr	2,26
 11617  003E70  503A               	movf	sync_fs@fs,w,c
 11618  003E72  26D9               	addwf	fsr2l,f,c
 11619  003E74  503B               	movf	sync_fs@fs+1,w,c
 11620  003E76  22DA               	addwfc	fsr2h,f,c
 11621  003E78  CFDE F03C          	movff	postinc2,??_sync_fs
 11622  003E7C  CFDE F03D          	movff	postinc2,??_sync_fs+1
 11623  003E80  CFDE F03E          	movff	postinc2,??_sync_fs+2
 11624  003E84  CFDE F03F          	movff	postinc2,??_sync_fs+3
 11625  003E88  0E01               	movlw	1
 11626  003E8A  243C               	addwf	??_sync_fs,w,c
 11627  003E8C  6E40               	movwf	(??_sync_fs+4)& (0+255),c
 11628  003E8E  0E00               	movlw	0
 11629  003E90  203D               	addwfc	??_sync_fs+1,w,c
 11630  003E92  6E41               	movwf	(??_sync_fs+5)& (0+255),c
 11631  003E94  0E00               	movlw	0
 11632  003E96  203E               	addwfc	??_sync_fs+2,w,c
 11633  003E98  6E42               	movwf	(??_sync_fs+6)& (0+255),c
 11634  003E9A  0E00               	movlw	0
 11635  003E9C  203F               	addwfc	??_sync_fs+3,w,c
 11636  003E9E  6E43               	movwf	(??_sync_fs+7)& (0+255),c
 11637  003EA0  EE20 F02A          	lfsr	2,42
 11638  003EA4  503A               	movf	sync_fs@fs,w,c
 11639  003EA6  26D9               	addwf	fsr2l,f,c
 11640  003EA8  503B               	movf	sync_fs@fs+1,w,c
 11641  003EAA  22DA               	addwfc	fsr2h,f,c
 11642  003EAC  C040  FFDE         	movff	??_sync_fs+4,postinc2
 11643  003EB0  C041  FFDE         	movff	??_sync_fs+5,postinc2
 11644  003EB4  C042  FFDE         	movff	??_sync_fs+6,postinc2
 11645  003EB8  C043  FFDE         	movff	??_sync_fs+7,postinc2
 11646                           
 11647                           ;ff.c: 780:    disk_write(fs->drv, fs->win, fs->winsect, 1);
 11648  003EBC  0E2E               	movlw	46
 11649  003EBE  243A               	addwf	sync_fs@fs,w,c
 11650  003EC0  6E11               	movwf	disk_write@buff,c
 11651  003EC2  0E00               	movlw	0
 11652  003EC4  203B               	addwfc	sync_fs@fs+1,w,c
 11653  003EC6  6E12               	movwf	disk_write@buff+1,c
 11654  003EC8  EE20 F02A          	lfsr	2,42
 11655  003ECC  503A               	movf	sync_fs@fs,w,c
 11656  003ECE  26D9               	addwf	fsr2l,f,c
 11657  003ED0  503B               	movf	sync_fs@fs+1,w,c
 11658  003ED2  22DA               	addwfc	fsr2h,f,c
 11659  003ED4  CFDE F013          	movff	postinc2,disk_write@sector
 11660  003ED8  CFDE F014          	movff	postinc2,disk_write@sector+1
 11661  003EDC  CFDE F015          	movff	postinc2,disk_write@sector+2
 11662  003EE0  CFDE F016          	movff	postinc2,disk_write@sector+3
 11663  003EE4  0E00               	movlw	0
 11664  003EE6  6E18               	movwf	disk_write@count+1,c
 11665  003EE8  0E01               	movlw	1
 11666  003EEA  6E17               	movwf	disk_write@count,c
 11667  003EEC  EE20 F001          	lfsr	2,1
 11668  003EF0  503A               	movf	sync_fs@fs,w,c
 11669  003EF2  26D9               	addwf	fsr2l,f,c
 11670  003EF4  503B               	movf	sync_fs@fs+1,w,c
 11671  003EF6  22DA               	addwfc	fsr2h,f,c
 11672  003EF8  50DF               	movf	indf2,w,c
 11673  003EFA  ECE1  F022         	call	_disk_write
 11674                           
 11675                           ;ff.c: 781:    fs->fsi_flag = 0;
 11676  003EFE  EE20 F005          	lfsr	2,5
 11677  003F02  503A               	movf	sync_fs@fs,w,c
 11678  003F04  26D9               	addwf	fsr2l,f,c
 11679  003F06  503B               	movf	sync_fs@fs+1,w,c
 11680  003F08  22DA               	addwfc	fsr2h,f,c
 11681  003F0A  0E00               	movlw	0
 11682  003F0C  6EDF               	movwf	indf2,c
 11683  003F0E                     l5097:
 11684                           
 11685                           ;ff.c: 784:   if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 11686  003F0E  0E00               	movlw	0
 11687  003F10  6E11               	movwf	disk_ioctl@cmd,c
 11688  003F12  0E00               	movlw	0
 11689  003F14  6E12               	movwf	disk_ioctl@buff,c
 11690  003F16  0E00               	movlw	0
 11691  003F18  6E13               	movwf	disk_ioctl@buff+1,c
 11692  003F1A  EE20 F001          	lfsr	2,1
 11693  003F1E  503A               	movf	sync_fs@fs,w,c
 11694  003F20  26D9               	addwf	fsr2l,f,c
 11695  003F22  503B               	movf	sync_fs@fs+1,w,c
 11696  003F24  22DA               	addwfc	fsr2h,f,c
 11697  003F26  50DF               	movf	indf2,w,c
 11698  003F28  ECA5  F00F         	call	_disk_ioctl
 11699  003F2C  0900               	iorlw	0
 11700  003F2E  B4D8               	btfsc	status,2,c
 11701  003F30  D002               	goto	l242
 11702                           
 11703                           ;ff.c: 785:    res = FR_DISK_ERR;
 11704  003F32  0E01               	movlw	1
 11705  003F34  6E44               	movwf	sync_fs@res,c
 11706  003F36                     l242:
 11707                           
 11708                           ;ff.c: 788:  return res;
 11709  003F36  5044               	movf	sync_fs@res,w,c
 11710  003F38  0012               	return		;funcret
 11711  003F3A                     __end_of_sync_fs:
 11712                           	opt callstack 0
 11713                           
 11714 ;; *************** function _mem_set *****************
 11715 ;; Defined at:
 11716 ;;		line 524 in file "ff.c"
 11717 ;; Parameters:    Size  Location     Type
 11718 ;;  dst             2    0[COMRAM] PTR void 
 11719 ;;		 -> FatFs(558), f_open@sfn(12), NULL(0), 
 11720 ;;  val             2    2[COMRAM] int 
 11721 ;;  cnt             2    4[COMRAM] unsigned short 
 11722 ;; Auto vars:     Size  Location     Type
 11723 ;;  d               2    6[COMRAM] PTR unsigned char 
 11724 ;;		 -> FatFs(558), f_open@sfn(12), NULL(0), 
 11725 ;; Return value:  Size  Location     Type
 11726 ;;                  1    wreg      void 
 11727 ;; Registers used:
 11728 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11729 ;; Tracked objects:
 11730 ;;		On entry : 0/0
 11731 ;;		On exit  : 0/0
 11732 ;;		Unchanged: 0/0
 11733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11734 ;;      Params:         6       0       0       0       0       0       0       0       0
 11735 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11736 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11737 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11738 ;;Total ram usage:        8 bytes
 11739 ;; Hardware stack levels used:    1
 11740 ;; This function calls:
 11741 ;;		Nothing
 11742 ;; This function is called by:
 11743 ;;		_sync_fs
 11744 ;;		_dir_next
 11745 ;;		_dir_register
 11746 ;;		_create_name
 11747 ;; This function uses a non-reentrant model
 11748 ;;
 11749                           
 11750                           	psect	text35
 11751  00551E                     __ptext35:
 11752                           	opt callstack 0
 11753  00551E                     _mem_set:
 11754                           	opt callstack 25
 11755                           
 11756                           ;ff.c: 525:  BYTE *d = (BYTE*)dst;
 11757                           
 11758                           ;incstack = 0
 11759  00551E  C001  F007         	movff	mem_set@dst,mem_set@d
 11760  005522  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
 11761                           
 11762                           ;ff.c: 527:  while (cnt--)
 11763  005526  D008               	goto	l4531
 11764  005528                     l4527:
 11765                           
 11766                           ;ff.c: 528:   *d++ = (BYTE)val;
 11767  005528  C007  FFD9         	movff	mem_set@d,fsr2l
 11768  00552C  C008  FFDA         	movff	mem_set@d+1,fsr2h
 11769  005530  C003  FFDF         	movff	mem_set@val,indf2
 11770  005534  4A07               	infsnz	mem_set@d,f,c
 11771  005536  2A08               	incf	mem_set@d+1,f,c
 11772  005538                     l4531:
 11773                           
 11774                           ;ff.c: 527:  while (cnt--)
 11775  005538  0605               	decf	mem_set@cnt,f,c
 11776  00553A  A0D8               	btfss	status,0,c
 11777  00553C  0606               	decf	mem_set@cnt+1,f,c
 11778  00553E  2805               	incf	mem_set@cnt,w,c
 11779  005540  E1F3               	bnz	l4527
 11780  005542  2806               	incf	mem_set@cnt+1,w,c
 11781  005544  B4D8               	btfsc	status,2,c
 11782  005546  0012               	return	
 11783  005548  D7EF               	goto	l4527
 11784  00554A                     __end_of_mem_set:
 11785                           	opt callstack 0
 11786                           
 11787 ;; *************** function _disk_ioctl *****************
 11788 ;; Defined at:
 11789 ;;		line 446 in file "diskio.c"
 11790 ;; Parameters:    Size  Location     Type
 11791 ;;  pdrv            1    wreg     unsigned char 
 11792 ;;  cmd             1   16[COMRAM] unsigned char 
 11793 ;;  buff            2   17[COMRAM] PTR void 
 11794 ;;		 -> NULL(0), 
 11795 ;; Auto vars:     Size  Location     Type
 11796 ;;  pdrv            1   48[COMRAM] unsigned char 
 11797 ;;  csd            16   32[COMRAM] unsigned char [16]
 11798 ;;  csize           4   49[COMRAM] unsigned long 
 11799 ;;  ptr             2   55[COMRAM] PTR unsigned char 
 11800 ;;		 -> NULL(0), 
 11801 ;;  n               1   54[COMRAM] unsigned char 
 11802 ;;  res             1   53[COMRAM] enum E43
 11803 ;; Return value:  Size  Location     Type
 11804 ;;                  1    wreg      enum E43
 11805 ;; Registers used:
 11806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11807 ;; Tracked objects:
 11808 ;;		On entry : 0/0
 11809 ;;		On exit  : 0/0
 11810 ;;		Unchanged: 0/0
 11811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11812 ;;      Params:         3       0       0       0       0       0       0       0       0
 11813 ;;      Locals:        25       0       0       0       0       0       0       0       0
 11814 ;;      Temps:         13       0       0       0       0       0       0       0       0
 11815 ;;      Totals:        41       0       0       0       0       0       0       0       0
 11816 ;;Total ram usage:       41 bytes
 11817 ;; Hardware stack levels used:    1
 11818 ;; Hardware stack levels required when called:    5
 11819 ;; This function calls:
 11820 ;;		_SPI1_Exchange8bit
 11821 ;;		___wmul
 11822 ;;		_deselect
 11823 ;;		_rcvr_datablock
 11824 ;;		_select
 11825 ;;		_send_cmd
 11826 ;; This function is called by:
 11827 ;;		_sync_fs
 11828 ;; This function uses a non-reentrant model
 11829 ;;
 11830                           
 11831                           	psect	text36
 11832  001F4A                     __ptext36:
 11833                           	opt callstack 0
 11834  001F4A                     _disk_ioctl:
 11835                           	opt callstack 21
 11836                           
 11837                           ;incstack = 0
 11838                           ;disk_ioctl@pdrv stored from wreg
 11839  001F4A  6E31               	movwf	disk_ioctl@pdrv,c
 11840                           
 11841                           ;diskio.c: 447:  BYTE pdrv,;diskio.c: 448:  BYTE cmd,;diskio.c: 449:  void *buff;diskio.
      +                          c: 451: {;diskio.c: 452:  DRESULT res;;diskio.c: 453:  BYTE n, csd[16], *ptr = buff;
 11842  001F4C  C012  F038         	movff	disk_ioctl@buff,disk_ioctl@ptr
 11843  001F50  C013  F039         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 11844                           
 11845                           ;diskio.c: 454:  DWORD csize;;diskio.c: 457:  if (pdrv) return RES_PARERR;
 11846  001F54  5031               	movf	disk_ioctl@pdrv,w,c
 11847  001F56  B4D8               	btfsc	status,2,c
 11848  001F58  D002               	goto	l4645
 11849  001F5A  0E04               	movlw	4
 11850  001F5C  0012               	return	
 11851  001F5E                     l4645:
 11852                           
 11853                           ;diskio.c: 459:  res = RES_ERROR;
 11854  001F5E  0E01               	movlw	1
 11855  001F60  6E36               	movwf	disk_ioctl@res,c
 11856                           
 11857                           ;diskio.c: 461:  if (Stat & 0x01) return RES_NOTRDY;
 11858  001F62  0100               	movlb	0	; () banked
 11859  001F64  A1F6               	btfss	_Stat& (0+255),0,b
 11860  001F66  D21B               	goto	l4745
 11861                           
 11862                           ; BSR set to: 0
 11863  001F68  0E03               	movlw	3
 11864  001F6A  0012               	return	
 11865  001F6C                     l4653:
 11866                           
 11867                           ; BSR set to: 0
 11868                           ;diskio.c: 465:   if (select()) res = RES_OK;
 11869  001F6C  ECF0  F02A         	call	_select	;wreg free
 11870  001F70  0900               	iorlw	0
 11871  001F72  B4D8               	btfsc	status,2,c
 11872  001F74  D235               	goto	l4747
 11873  001F76                     u5480:
 11874  001F76  0E00               	movlw	0
 11875  001F78  D210               	goto	L13
 11876  001F7A                     l4657:
 11877                           
 11878                           ; BSR set to: 0
 11879                           ;diskio.c: 469:   if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 11880  001F7A  0E00               	movlw	0
 11881  001F7C  6E0B               	movwf	send_cmd@arg,c
 11882  001F7E  0E00               	movlw	0
 11883  001F80  6E0C               	movwf	send_cmd@arg+1,c
 11884  001F82  0E00               	movlw	0
 11885  001F84  6E0D               	movwf	send_cmd@arg+2,c
 11886  001F86  0E00               	movlw	0
 11887  001F88  6E0E               	movwf	send_cmd@arg+3,c
 11888  001F8A  0E09               	movlw	9
 11889  001F8C  EC17  F02A         	call	_send_cmd
 11890  001F90  0900               	iorlw	0
 11891  001F92  A4D8               	btfss	status,2,c
 11892  001F94  D225               	goto	l4747
 11893  001F96  0E21               	movlw	low disk_ioctl@csd
 11894  001F98  6E02               	movwf	rcvr_datablock@buff,c
 11895  001F9A  0E00               	movlw	high disk_ioctl@csd
 11896  001F9C  6E03               	movwf	rcvr_datablock@buff+1,c
 11897  001F9E  0E00               	movlw	0
 11898  001FA0  6E05               	movwf	rcvr_datablock@btr+1,c
 11899  001FA2  0E10               	movlw	16
 11900  001FA4  6E04               	movwf	rcvr_datablock@btr,c
 11901  001FA6  EC01  F029         	call	_rcvr_datablock	;wreg free
 11902  001FAA  0900               	iorlw	0
 11903  001FAC  B4D8               	btfsc	status,2,c
 11904  001FAE  D218               	goto	l4747
 11905                           
 11906                           ;diskio.c: 470:    if ((csd[0] >> 6) == 1) {
 11907  001FB0  4421               	rlncf	disk_ioctl@csd,w,c
 11908  001FB2  46E8               	rlncf	wreg,f,c
 11909  001FB4  0B03               	andlw	3
 11910  001FB6  06E8               	decf	wreg,f,c
 11911  001FB8  A4D8               	btfss	status,2,c
 11912  001FBA  D04E               	goto	l4667
 11913                           
 11914                           ;diskio.c: 471:     csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) 
      +                          + 1;
 11915  001FBC  C028  F014         	movff	disk_ioctl@csd+7,??_disk_ioctl
 11916  001FC0  0E3F               	movlw	63
 11917  001FC2  1614               	andwf	??_disk_ioctl,f,c
 11918  001FC4  C014  F015         	movff	??_disk_ioctl,??_disk_ioctl+1
 11919  001FC8  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 11920  001FCA  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11921  001FCC  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 11922  001FCE  C016  F018         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 11923  001FD2  C015  F017         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 11924  001FD6  6A16               	clrf	??_disk_ioctl+2,c
 11925  001FD8  6A15               	clrf	??_disk_ioctl+1,c
 11926  001FDA  5029               	movf	disk_ioctl@csd+8,w,c
 11927  001FDC  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 11928  001FDE  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 11929  001FE0  502A               	movf	disk_ioctl@csd+9,w,c
 11930  001FE2  6E1B               	movwf	(??_disk_ioctl+7)& (0+255),c
 11931  001FE4  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 11932  001FE6  5019               	movf	??_disk_ioctl+5,w,c
 11933  001FE8  261B               	addwf	??_disk_ioctl+7,f,c
 11934  001FEA  501A               	movf	??_disk_ioctl+6,w,c
 11935  001FEC  221C               	addwfc	??_disk_ioctl+8,f,c
 11936  001FEE  501B               	movf	??_disk_ioctl+7,w,c
 11937  001FF0  2415               	addwf	??_disk_ioctl+1,w,c
 11938  001FF2  6E1D               	movwf	(??_disk_ioctl+9)& (0+255),c
 11939  001FF4  501C               	movf	??_disk_ioctl+8,w,c
 11940  001FF6  2016               	addwfc	??_disk_ioctl+2,w,c
 11941  001FF8  6E1E               	movwf	(??_disk_ioctl+10)& (0+255),c
 11942  001FFA  0E00               	movlw	0
 11943  001FFC  2017               	addwfc	??_disk_ioctl+3,w,c
 11944  001FFE  6E1F               	movwf	(??_disk_ioctl+11)& (0+255),c
 11945  002000  0E00               	movlw	0
 11946  002002  2018               	addwfc	??_disk_ioctl+4,w,c
 11947  002004  6E20               	movwf	(??_disk_ioctl+12)& (0+255),c
 11948  002006  0E01               	movlw	1
 11949  002008  241D               	addwf	??_disk_ioctl+9,w,c
 11950  00200A  6E32               	movwf	disk_ioctl@csize,c
 11951  00200C  0E00               	movlw	0
 11952  00200E  201E               	addwfc	??_disk_ioctl+10,w,c
 11953  002010  6E33               	movwf	disk_ioctl@csize+1,c
 11954  002012  0E00               	movlw	0
 11955  002014  201F               	addwfc	??_disk_ioctl+11,w,c
 11956  002016  6E34               	movwf	disk_ioctl@csize+2,c
 11957  002018  0E00               	movlw	0
 11958  00201A  2020               	addwfc	??_disk_ioctl+12,w,c
 11959  00201C  6E35               	movwf	disk_ioctl@csize+3,c
 11960                           
 11961                           ;diskio.c: 472:     *(DWORD*)buff = csize << 10;
 11962  00201E  C032  F014         	movff	disk_ioctl@csize,??_disk_ioctl
 11963  002022  C033  F015         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 11964  002026  C034  F016         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 11965  00202A  C035  F017         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 11966  00202E  0E0A               	movlw	10
 11967  002030                     u5525:
 11968  002030  90D8               	bcf	status,0,c
 11969  002032  3614               	rlcf	??_disk_ioctl,f,c
 11970  002034  3615               	rlcf	??_disk_ioctl+1,f,c
 11971  002036  3616               	rlcf	??_disk_ioctl+2,f,c
 11972  002038  3617               	rlcf	??_disk_ioctl+3,f,c
 11973  00203A  2EE8               	decfsz	wreg,f,c
 11974  00203C  D7F9               	goto	u5525
 11975  00203E  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 11976  002042  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 11977  002046  C014  FFDE         	movff	??_disk_ioctl,postinc2
 11978  00204A  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 11979  00204E  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 11980  002052  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 11981                           
 11982                           ;diskio.c: 473:    } else {
 11983  002056  D78F               	goto	u5480
 11984  002058                     l4667:
 11985                           
 11986                           ;diskio.c: 474:     n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2
      +                          ;
 11987  002058  6A14               	clrf	??_disk_ioctl& (0+255),c
 11988  00205A  AE2B               	btfss	disk_ioctl@csd+10,7,c
 11989  00205C  D001               	bra	u5535
 11990  00205E  2A14               	incf	??_disk_ioctl& (0+255),f,c
 11991  002060                     u5535:
 11992  002060  0E01               	movlw	1
 11993  002062  1614               	andwf	??_disk_ioctl,f,c
 11994  002064  C026  F015         	movff	disk_ioctl@csd+5,??_disk_ioctl+1
 11995  002068  0E0F               	movlw	15
 11996  00206A  1615               	andwf	??_disk_ioctl+1,f,c
 11997  00206C  502A               	movf	disk_ioctl@csd+9,w,c
 11998  00206E  0B03               	andlw	3
 11999  002070  0D02               	mullw	2
 12000  002072  50F3               	movf	prodl,w,c
 12001  002074  2415               	addwf	??_disk_ioctl+1,w,c
 12002  002076  2414               	addwf	??_disk_ioctl,w,c
 12003  002078  0F02               	addlw	2
 12004  00207A  6E37               	movwf	disk_ioctl@n,c
 12005                           
 12006                           ;diskio.c: 475:     csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) <<
      +                           10) + 1;
 12007  00207C  5027               	movf	disk_ioctl@csd+6,w,c
 12008  00207E  0B03               	andlw	3
 12009  002080  6E14               	movwf	??_disk_ioctl& (0+255),c
 12010  002082  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 12011  002084  0E0A               	movlw	10
 12012  002086                     u5545:
 12013  002086  90D8               	bcf	status,0,c
 12014  002088  3614               	rlcf	??_disk_ioctl,f,c
 12015  00208A  3615               	rlcf	??_disk_ioctl+1,f,c
 12016  00208C  2EE8               	decfsz	wreg,f,c
 12017  00208E  D7FB               	goto	u5545
 12018  002090  5028               	movf	disk_ioctl@csd+7,w,c
 12019  002092  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 12020  002094  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 12021  002096  90D8               	bcf	status,0,c
 12022  002098  3616               	rlcf	??_disk_ioctl+2,f,c
 12023  00209A  3617               	rlcf	??_disk_ioctl+3,f,c
 12024  00209C  90D8               	bcf	status,0,c
 12025  00209E  3616               	rlcf	??_disk_ioctl+2,f,c
 12026  0020A0  3617               	rlcf	??_disk_ioctl+3,f,c
 12027  0020A2  4429               	rlncf	disk_ioctl@csd+8,w,c
 12028  0020A4  46E8               	rlncf	wreg,f,c
 12029  0020A6  0B03               	andlw	3
 12030  0020A8  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 12031  0020AA  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 12032  0020AC  5016               	movf	??_disk_ioctl+2,w,c
 12033  0020AE  2618               	addwf	??_disk_ioctl+4,f,c
 12034  0020B0  5017               	movf	??_disk_ioctl+3,w,c
 12035  0020B2  2219               	addwfc	??_disk_ioctl+5,f,c
 12036  0020B4  5014               	movf	??_disk_ioctl,w,c
 12037  0020B6  2618               	addwf	??_disk_ioctl+4,f,c
 12038  0020B8  5015               	movf	??_disk_ioctl+1,w,c
 12039  0020BA  2219               	addwfc	??_disk_ioctl+5,f,c
 12040  0020BC  0E01               	movlw	1
 12041  0020BE  2618               	addwf	??_disk_ioctl+4,f,c
 12042  0020C0  0E00               	movlw	0
 12043  0020C2  2219               	addwfc	??_disk_ioctl+5,f,c
 12044  0020C4  C018  F032         	movff	??_disk_ioctl+4,disk_ioctl@csize
 12045  0020C8  C019  F033         	movff	??_disk_ioctl+5,disk_ioctl@csize+1
 12046  0020CC  6A34               	clrf	disk_ioctl@csize+2,c
 12047  0020CE  6A35               	clrf	disk_ioctl@csize+3,c
 12048                           
 12049                           ;diskio.c: 476:     *(DWORD*)buff = csize << (n - 9);
 12050  0020D0  C037  F014         	movff	disk_ioctl@n,??_disk_ioctl
 12051  0020D4  0EF7               	movlw	-9
 12052  0020D6  2614               	addwf	??_disk_ioctl,f,c
 12053  0020D8  C032  F015         	movff	disk_ioctl@csize,??_disk_ioctl+1
 12054  0020DC  C033  F016         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 12055  0020E0  C034  F017         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 12056  0020E4  C035  F018         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 12057  0020E8  2A14               	incf	??_disk_ioctl,f,c
 12058  0020EA  D005               	goto	u5550
 12059  0020EC                     u5555:
 12060  0020EC  90D8               	bcf	status,0,c
 12061  0020EE  3615               	rlcf	??_disk_ioctl+1,f,c
 12062  0020F0  3616               	rlcf	??_disk_ioctl+2,f,c
 12063  0020F2  3617               	rlcf	??_disk_ioctl+3,f,c
 12064  0020F4  3618               	rlcf	??_disk_ioctl+4,f,c
 12065  0020F6                     u5550:
 12066  0020F6  2E14               	decfsz	??_disk_ioctl,f,c
 12067  0020F8  D7F9               	goto	u5555
 12068  0020FA  D03D               	goto	L15
 12069  0020FC                     l155:
 12070                           
 12071                           ; BSR set to: 0
 12072                           ;diskio.c: 483:   if (CardType & 0x04) {
 12073  0020FC  A5EB               	btfss	_CardType& (0+255),2,b
 12074  0020FE  D048               	goto	l4693
 12075                           
 12076                           ; BSR set to: 0
 12077                           ;diskio.c: 484:    if (send_cmd((0x80+13), 0) == 0) {
 12078  002100  0E00               	movlw	0
 12079  002102  6E0B               	movwf	send_cmd@arg,c
 12080  002104  0E00               	movlw	0
 12081  002106  6E0C               	movwf	send_cmd@arg+1,c
 12082  002108  0E00               	movlw	0
 12083  00210A  6E0D               	movwf	send_cmd@arg+2,c
 12084  00210C  0E00               	movlw	0
 12085  00210E  6E0E               	movwf	send_cmd@arg+3,c
 12086  002110  0E8D               	movlw	141
 12087  002112  EC17  F02A         	call	_send_cmd
 12088  002116  0900               	iorlw	0
 12089  002118  A4D8               	btfss	status,2,c
 12090  00211A  D162               	goto	l4747
 12091                           
 12092                           ;diskio.c: 485:     SPI1_Exchange8bit(0xFF);
 12093  00211C  0EFF               	movlw	255
 12094  00211E  EC11  F02B         	call	_SPI1_Exchange8bit
 12095                           
 12096                           ;diskio.c: 486:     if (rcvr_datablock(csd, 16)) {
 12097  002122  0E21               	movlw	low disk_ioctl@csd
 12098  002124  6E02               	movwf	rcvr_datablock@buff,c
 12099  002126  0E00               	movlw	high disk_ioctl@csd
 12100  002128  6E03               	movwf	rcvr_datablock@buff+1,c
 12101  00212A  0E00               	movlw	0
 12102  00212C  6E05               	movwf	rcvr_datablock@btr+1,c
 12103  00212E  0E10               	movlw	16
 12104  002130  6E04               	movwf	rcvr_datablock@btr,c
 12105  002132  EC01  F029         	call	_rcvr_datablock	;wreg free
 12106  002136  0900               	iorlw	0
 12107  002138  B4D8               	btfsc	status,2,c
 12108  00213A  D152               	goto	l4747
 12109                           
 12110                           ;diskio.c: 487:      for (n = 64 - 16; n; n--) SPI1_Exchange8bit(0xFF);
 12111  00213C  0E30               	movlw	48
 12112  00213E  6E37               	movwf	disk_ioctl@n,c
 12113  002140  D004               	goto	l4687
 12114  002142                     l4683:
 12115  002142  0EFF               	movlw	255
 12116  002144  EC11  F02B         	call	_SPI1_Exchange8bit
 12117  002148  0637               	decf	disk_ioctl@n,f,c
 12118  00214A                     l4687:
 12119  00214A  5037               	movf	disk_ioctl@n,w,c
 12120  00214C  A4D8               	btfss	status,2,c
 12121  00214E  D7F9               	goto	l4683
 12122                           
 12123                           ;diskio.c: 488:      *(DWORD*)buff = 16UL << (csd[10] >> 4);
 12124  002150  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 12125  002154  3A14               	swapf	??_disk_ioctl,f,c
 12126  002156  0E0F               	movlw	15
 12127  002158  1614               	andwf	??_disk_ioctl,f,c
 12128  00215A  0E10               	movlw	16
 12129  00215C  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 12130  00215E  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 12131  002160  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 12132  002162  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 12133  002164  2A14               	incf	??_disk_ioctl,f,c
 12134  002166  D005               	goto	u5600
 12135  002168                     u5605:
 12136  002168  90D8               	bcf	status,0,c
 12137  00216A  3615               	rlcf	??_disk_ioctl+1,f,c
 12138  00216C  3616               	rlcf	??_disk_ioctl+2,f,c
 12139  00216E  3617               	rlcf	??_disk_ioctl+3,f,c
 12140  002170  3618               	rlcf	??_disk_ioctl+4,f,c
 12141  002172                     u5600:
 12142  002172  2E14               	decfsz	??_disk_ioctl,f,c
 12143  002174  D7F9               	goto	u5605
 12144  002176                     L15:
 12145  002176  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 12146  00217A  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 12147  00217E  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 12148  002182  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 12149  002186  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 12150  00218A  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 12151  00218E  D6F3               	goto	u5480
 12152  002190                     l4693:
 12153                           
 12154                           ; BSR set to: 0
 12155                           ;diskio.c: 493:    if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 12156  002190  0E00               	movlw	0
 12157  002192  6E0B               	movwf	send_cmd@arg,c
 12158  002194  0E00               	movlw	0
 12159  002196  6E0C               	movwf	send_cmd@arg+1,c
 12160  002198  0E00               	movlw	0
 12161  00219A  6E0D               	movwf	send_cmd@arg+2,c
 12162  00219C  0E00               	movlw	0
 12163  00219E  6E0E               	movwf	send_cmd@arg+3,c
 12164  0021A0  0E09               	movlw	9
 12165  0021A2  EC17  F02A         	call	_send_cmd
 12166  0021A6  0900               	iorlw	0
 12167  0021A8  A4D8               	btfss	status,2,c
 12168  0021AA  D11A               	goto	l4747
 12169  0021AC  0E21               	movlw	low disk_ioctl@csd
 12170  0021AE  6E02               	movwf	rcvr_datablock@buff,c
 12171  0021B0  0E00               	movlw	high disk_ioctl@csd
 12172  0021B2  6E03               	movwf	rcvr_datablock@buff+1,c
 12173  0021B4  0E00               	movlw	0
 12174  0021B6  6E05               	movwf	rcvr_datablock@btr+1,c
 12175  0021B8  0E10               	movlw	16
 12176  0021BA  6E04               	movwf	rcvr_datablock@btr,c
 12177  0021BC  EC01  F029         	call	_rcvr_datablock	;wreg free
 12178  0021C0  0900               	iorlw	0
 12179  0021C2  B4D8               	btfsc	status,2,c
 12180  0021C4  D10D               	goto	l4747
 12181                           
 12182                           ;diskio.c: 494:     if (CardType & 0x02) {
 12183  0021C6  0100               	movlb	0	; () banked
 12184  0021C8  A3EB               	btfss	_CardType& (0+255),1,b
 12185  0021CA  D02A               	goto	l4701
 12186                           
 12187                           ; BSR set to: 0
 12188                           ;diskio.c: 495:      *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 
      +                          7) + 1) << ((csd[13] >> 6) - 1);
 12189  0021CC  C02E  F014         	movff	disk_ioctl@csd+13,??_disk_ioctl
 12190  0021D0  0E06               	movlw	6
 12191  0021D2  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 12192  0021D4                     u5645:
 12193  0021D4  90D8               	bcf	status,0,c
 12194  0021D6  3214               	rrcf	??_disk_ioctl,f,c
 12195  0021D8  2E15               	decfsz	(??_disk_ioctl+1)& (0+255),f,c
 12196  0021DA  D7FC               	goto	u5645
 12197  0021DC  0EFF               	movlw	-1
 12198  0021DE  2614               	addwf	??_disk_ioctl,f,c
 12199  0021E0  502B               	movf	disk_ioctl@csd+10,w,c
 12200  0021E2  0B3F               	andlw	63
 12201  0021E4  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 12202  0021E6  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 12203  0021E8  90D8               	bcf	status,0,c
 12204  0021EA  3616               	rlcf	??_disk_ioctl+2,f,c
 12205  0021EC  3617               	rlcf	??_disk_ioctl+3,f,c
 12206  0021EE  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 12207  0021F0  AE2C               	btfss	disk_ioctl@csd+11,7,c
 12208  0021F2  D001               	bra	u5655
 12209  0021F4  2A18               	incf	(??_disk_ioctl+4)& (0+255),f,c
 12210  0021F6                     u5655:
 12211  0021F6  0E01               	movlw	1
 12212  0021F8  1618               	andwf	??_disk_ioctl+4,f,c
 12213  0021FA  5018               	movf	??_disk_ioctl+4,w,c
 12214  0021FC  2616               	addwf	??_disk_ioctl+2,f,c
 12215  0021FE  0E00               	movlw	0
 12216  002200  2217               	addwfc	??_disk_ioctl+3,f,c
 12217  002202  0E01               	movlw	1
 12218  002204  2616               	addwf	??_disk_ioctl+2,f,c
 12219  002206  0E00               	movlw	0
 12220  002208  2217               	addwfc	??_disk_ioctl+3,f,c
 12221  00220A  2A14               	incf	??_disk_ioctl,f,c
 12222  00220C  D003               	goto	u5664
 12223  00220E                     u5665:
 12224  00220E  90D8               	bcf	status,0,c
 12225  002210  3616               	rlcf	??_disk_ioctl+2,f,c
 12226  002212  3617               	rlcf	??_disk_ioctl+3,f,c
 12227  002214                     u5664:
 12228  002214  2E14               	decfsz	??_disk_ioctl,f,c
 12229  002216  D7FB               	goto	u5665
 12230  002218  5016               	movf	??_disk_ioctl+2,w,c
 12231  00221A  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 12232  00221C  5017               	movf	??_disk_ioctl+3,w,c
 12233  00221E  D034               	goto	L16
 12234  002220                     l4701:
 12235                           
 12236                           ; BSR set to: 0
 12237                           ;diskio.c: 497:      *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3
      +                          ) << 3) + ((csd[11] & 224) >> 5) + 1);
 12238  002220  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 12239  002224  90D8               	bcf	status,0,c
 12240  002226  3214               	rrcf	??_disk_ioctl,f,c
 12241  002228  90D8               	bcf	status,0,c
 12242  00222A  3214               	rrcf	??_disk_ioctl,f,c
 12243  00222C  0E1F               	movlw	31
 12244  00222E  1614               	andwf	??_disk_ioctl,f,c
 12245  002230  0E01               	movlw	1
 12246  002232  2414               	addwf	??_disk_ioctl,w,c
 12247  002234  6E01               	movwf	___wmul@multiplier,c
 12248  002236  6A02               	clrf	___wmul@multiplier+1,c
 12249  002238  0E00               	movlw	0
 12250  00223A  2202               	addwfc	___wmul@multiplier+1,f,c
 12251  00223C  502C               	movf	disk_ioctl@csd+11,w,c
 12252  00223E  0B03               	andlw	3
 12253  002240  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 12254  002242  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 12255  002244  90D8               	bcf	status,0,c
 12256  002246  3615               	rlcf	??_disk_ioctl+1,f,c
 12257  002248  3616               	rlcf	??_disk_ioctl+2,f,c
 12258  00224A  90D8               	bcf	status,0,c
 12259  00224C  3615               	rlcf	??_disk_ioctl+1,f,c
 12260  00224E  3616               	rlcf	??_disk_ioctl+2,f,c
 12261  002250  90D8               	bcf	status,0,c
 12262  002252  3615               	rlcf	??_disk_ioctl+1,f,c
 12263  002254  3616               	rlcf	??_disk_ioctl+2,f,c
 12264  002256  C02C  F017         	movff	disk_ioctl@csd+11,??_disk_ioctl+3
 12265  00225A  0E05               	movlw	5
 12266  00225C  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 12267  00225E                     u5675:
 12268  00225E  90D8               	bcf	status,0,c
 12269  002260  3217               	rrcf	??_disk_ioctl+3,f,c
 12270  002262  2E18               	decfsz	(??_disk_ioctl+4)& (0+255),f,c
 12271  002264  D7FC               	goto	u5675
 12272  002266  0E07               	movlw	7
 12273  002268  1617               	andwf	??_disk_ioctl+3,f,c
 12274  00226A  5017               	movf	??_disk_ioctl+3,w,c
 12275  00226C  2615               	addwf	??_disk_ioctl+1,f,c
 12276  00226E  0E00               	movlw	0
 12277  002270  2216               	addwfc	??_disk_ioctl+2,f,c
 12278  002272  0E01               	movlw	1
 12279  002274  2415               	addwf	??_disk_ioctl+1,w,c
 12280  002276  6E03               	movwf	___wmul@multiplicand,c
 12281  002278  0E00               	movlw	0
 12282  00227A  2016               	addwfc	??_disk_ioctl+2,w,c
 12283  00227C  6E04               	movwf	___wmul@multiplicand+1,c
 12284  00227E  ECCD  F02A         	call	___wmul	;wreg free
 12285  002282  5001               	movf	?___wmul,w,c
 12286  002284  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 12287  002286  5002               	movf	?___wmul+1,w,c
 12288  002288                     L16:
 12289  002288  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 12290  00228A  6A1B               	clrf	(??_disk_ioctl+7)& (0+255),c
 12291  00228C  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 12292  00228E  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 12293  002292  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 12294  002296  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 12295  00229A  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 12296  00229E  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 12297  0022A2  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 12298  0022A6  D667               	goto	u5480
 12299  0022A8                     l4705:
 12300                           
 12301                           ; BSR set to: 0
 12302                           ;diskio.c: 507:   *ptr = CardType;
 12303  0022A8  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12304  0022AC  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12305  0022B0  C0EB  FFDF         	movff	_CardType,indf2
 12306  0022B4  D660               	goto	u5480
 12307  0022B6                     l4709:
 12308                           
 12309                           ; BSR set to: 0
 12310                           ;diskio.c: 512:   if (send_cmd((9), 0) == 0
 12311  0022B6  0E00               	movlw	0
 12312  0022B8  6E0B               	movwf	send_cmd@arg,c
 12313  0022BA  0E00               	movlw	0
 12314  0022BC  6E0C               	movwf	send_cmd@arg+1,c
 12315  0022BE  0E00               	movlw	0
 12316  0022C0  6E0D               	movwf	send_cmd@arg+2,c
 12317  0022C2  0E00               	movlw	0
 12318  0022C4  6E0E               	movwf	send_cmd@arg+3,c
 12319  0022C6  0E09               	movlw	9
 12320  0022C8  EC17  F02A         	call	_send_cmd
 12321  0022CC  0900               	iorlw	0
 12322  0022CE  A4D8               	btfss	status,2,c
 12323  0022D0  D087               	goto	l4747
 12324  0022D2  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12325  0022D6  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12326  0022DA  0E00               	movlw	0
 12327  0022DC  6E05               	movwf	rcvr_datablock@btr+1,c
 12328  0022DE  0E10               	movlw	16
 12329  0022E0  6E04               	movwf	rcvr_datablock@btr,c
 12330  0022E2  EC01  F029         	call	_rcvr_datablock	;wreg free
 12331  0022E6                     L14:
 12332  0022E6  0900               	iorlw	0
 12333  0022E8  A4D8               	btfss	status,2,c
 12334  0022EA  D645               	goto	u5480
 12335  0022EC  D079               	goto	l4747
 12336  0022EE                     l4715:
 12337                           
 12338                           ; BSR set to: 0
 12339                           ;diskio.c: 518:   if (send_cmd((10), 0) == 0
 12340  0022EE  0E00               	movlw	0
 12341  0022F0  6E0B               	movwf	send_cmd@arg,c
 12342  0022F2  0E00               	movlw	0
 12343  0022F4  6E0C               	movwf	send_cmd@arg+1,c
 12344  0022F6  0E00               	movlw	0
 12345  0022F8  6E0D               	movwf	send_cmd@arg+2,c
 12346  0022FA  0E00               	movlw	0
 12347  0022FC  6E0E               	movwf	send_cmd@arg+3,c
 12348  0022FE  0E0A               	movlw	10
 12349  002300  EC17  F02A         	call	_send_cmd
 12350  002304  0900               	iorlw	0
 12351  002306  A4D8               	btfss	status,2,c
 12352  002308  D06B               	goto	l4747
 12353  00230A  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12354  00230E  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12355  002312  0E00               	movlw	0
 12356  002314  6E05               	movwf	rcvr_datablock@btr+1,c
 12357  002316  0E10               	movlw	16
 12358  002318  6E04               	movwf	rcvr_datablock@btr,c
 12359  00231A  EC01  F029         	call	_rcvr_datablock	;wreg free
 12360  00231E  D7E3               	goto	L14
 12361  002320                     l4721:
 12362                           
 12363                           ; BSR set to: 0
 12364                           ;diskio.c: 524:   if (send_cmd((58), 0) == 0) {
 12365  002320  0E00               	movlw	0
 12366  002322  6E0B               	movwf	send_cmd@arg,c
 12367  002324  0E00               	movlw	0
 12368  002326  6E0C               	movwf	send_cmd@arg+1,c
 12369  002328  0E00               	movlw	0
 12370  00232A  6E0D               	movwf	send_cmd@arg+2,c
 12371  00232C  0E00               	movlw	0
 12372  00232E  6E0E               	movwf	send_cmd@arg+3,c
 12373  002330  0E3A               	movlw	58
 12374  002332  EC17  F02A         	call	_send_cmd
 12375  002336  0900               	iorlw	0
 12376  002338  A4D8               	btfss	status,2,c
 12377  00233A  D052               	goto	l4747
 12378                           
 12379                           ;diskio.c: 525:    for (n = 4; n; n--) *ptr++ = SPI1_Exchange8bit(0xFF);
 12380  00233C  0E04               	movlw	4
 12381  00233E  6E37               	movwf	disk_ioctl@n,c
 12382  002340  D00B               	goto	l4731
 12383  002342                     l4725:
 12384  002342  0EFF               	movlw	255
 12385  002344  EC11  F02B         	call	_SPI1_Exchange8bit
 12386  002348  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12387  00234C  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12388  002350  6EDF               	movwf	indf2,c
 12389  002352  4A38               	infsnz	disk_ioctl@ptr,f,c
 12390  002354  2A39               	incf	disk_ioctl@ptr+1,f,c
 12391  002356  0637               	decf	disk_ioctl@n,f,c
 12392  002358                     l4731:
 12393  002358  5037               	movf	disk_ioctl@n,w,c
 12394  00235A  B4D8               	btfsc	status,2,c
 12395  00235C  D60C               	goto	u5480
 12396  00235E  D7F1               	goto	l4725
 12397  002360                     l4735:
 12398                           
 12399                           ; BSR set to: 0
 12400                           ;diskio.c: 531:   if (send_cmd((0x80+13), 0) == 0) {
 12401  002360  0E00               	movlw	0
 12402  002362  6E0B               	movwf	send_cmd@arg,c
 12403  002364  0E00               	movlw	0
 12404  002366  6E0C               	movwf	send_cmd@arg+1,c
 12405  002368  0E00               	movlw	0
 12406  00236A  6E0D               	movwf	send_cmd@arg+2,c
 12407  00236C  0E00               	movlw	0
 12408  00236E  6E0E               	movwf	send_cmd@arg+3,c
 12409  002370  0E8D               	movlw	141
 12410  002372  EC17  F02A         	call	_send_cmd
 12411  002376  0900               	iorlw	0
 12412  002378  A4D8               	btfss	status,2,c
 12413  00237A  D032               	goto	l4747
 12414                           
 12415                           ;diskio.c: 532:    SPI1_Exchange8bit(0xFF);
 12416  00237C  0EFF               	movlw	255
 12417  00237E  EC11  F02B         	call	_SPI1_Exchange8bit
 12418                           
 12419                           ;diskio.c: 533:    if (rcvr_datablock(ptr, 64))
 12420  002382  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12421  002386  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12422  00238A  0E00               	movlw	0
 12423  00238C  6E05               	movwf	rcvr_datablock@btr+1,c
 12424  00238E  0E40               	movlw	64
 12425  002390  6E04               	movwf	rcvr_datablock@btr,c
 12426  002392  EC01  F029         	call	_rcvr_datablock	;wreg free
 12427  002396  D7A7               	goto	L14
 12428  002398                     l4743:
 12429                           
 12430                           ; BSR set to: 0
 12431                           ;diskio.c: 539:   res = RES_PARERR;
 12432  002398  0E04               	movlw	4
 12433  00239A                     L13:
 12434  00239A  6E36               	movwf	disk_ioctl@res,c
 12435                           
 12436                           ;diskio.c: 540:  }
 12437  00239C  D021               	goto	l4747
 12438  00239E                     l4745:
 12439                           
 12440                           ; BSR set to: 0
 12441  00239E  5011               	movf	disk_ioctl@cmd,w,c
 12442  0023A0  6E14               	movwf	??_disk_ioctl& (0+255),c
 12443  0023A2  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 12444                           
 12445                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12446                           ; Switch size 1, requested type "simple"
 12447                           ; Number of cases is 1, Range of values is 0 to 0
 12448                           ; switch strategies available:
 12449                           ; Name         Instructions Cycles
 12450                           ; simple_byte            4     3 (average)
 12451                           ;	Chosen strategy is simple_byte
 12452  0023A4  5015               	movf	??_disk_ioctl+1,w,c
 12453  0023A6  0A00               	xorlw	0	; case 0
 12454  0023A8  A4D8               	btfss	status,2,c
 12455  0023AA  D7F6               	goto	l4743
 12456                           
 12457                           ; BSR set to: 0
 12458                           ; Switch size 1, requested type "simple"
 12459                           ; Number of cases is 8, Range of values is 0 to 14
 12460                           ; switch strategies available:
 12461                           ; Name         Instructions Cycles
 12462                           ; simple_byte           25    13 (average)
 12463                           ;	Chosen strategy is simple_byte
 12464  0023AC  5014               	movf	??_disk_ioctl,w,c
 12465  0023AE  0A00               	xorlw	0	; case 0
 12466  0023B0  B4D8               	btfsc	status,2,c
 12467  0023B2  D5DC               	goto	l4653
 12468  0023B4  0A01               	xorlw	1	; case 1
 12469  0023B6  B4D8               	btfsc	status,2,c
 12470  0023B8  D5E0               	goto	l4657
 12471  0023BA  0A02               	xorlw	2	; case 3
 12472  0023BC  B4D8               	btfsc	status,2,c
 12473  0023BE  D69E               	goto	l155
 12474  0023C0  0A09               	xorlw	9	; case 10
 12475  0023C2  B4D8               	btfsc	status,2,c
 12476  0023C4  D771               	goto	l4705
 12477  0023C6  0A01               	xorlw	1	; case 11
 12478  0023C8  B4D8               	btfsc	status,2,c
 12479  0023CA  D775               	goto	l4709
 12480  0023CC  0A07               	xorlw	7	; case 12
 12481  0023CE  B4D8               	btfsc	status,2,c
 12482  0023D0  D78E               	goto	l4715
 12483  0023D2  0A01               	xorlw	1	; case 13
 12484  0023D4  B4D8               	btfsc	status,2,c
 12485  0023D6  D7A4               	goto	l4721
 12486  0023D8  0A03               	xorlw	3	; case 14
 12487  0023DA  B4D8               	btfsc	status,2,c
 12488  0023DC  D7C1               	goto	l4735
 12489  0023DE  D7DC               	goto	l4743
 12490  0023E0                     l4747:
 12491                           
 12492                           ;diskio.c: 542:  deselect();
 12493  0023E0  EC44  F02B         	call	_deselect	;wreg free
 12494                           
 12495                           ;diskio.c: 544:  return res;
 12496  0023E4  5036               	movf	disk_ioctl@res,w,c
 12497  0023E6  0012               	return		;funcret
 12498  0023E8                     __end_of_disk_ioctl:
 12499                           	opt callstack 0
 12500                           
 12501 ;; *************** function ___wmul *****************
 12502 ;; Defined at:
 12503 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 12504 ;; Parameters:    Size  Location     Type
 12505 ;;  multiplier      2    0[COMRAM] unsigned int 
 12506 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12507 ;; Auto vars:     Size  Location     Type
 12508 ;;  product         2    4[COMRAM] unsigned int 
 12509 ;; Return value:  Size  Location     Type
 12510 ;;                  2    0[COMRAM] unsigned int 
 12511 ;; Registers used:
 12512 ;;		wreg, status,2, status,0, prodl, prodh
 12513 ;; Tracked objects:
 12514 ;;		On entry : 0/0
 12515 ;;		On exit  : 0/0
 12516 ;;		Unchanged: 0/0
 12517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12518 ;;      Params:         4       0       0       0       0       0       0       0       0
 12519 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12520 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12521 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12522 ;;Total ram usage:        6 bytes
 12523 ;; Hardware stack levels used:    1
 12524 ;; This function calls:
 12525 ;;		Nothing
 12526 ;; This function is called by:
 12527 ;;		_disk_ioctl
 12528 ;; This function uses a non-reentrant model
 12529 ;;
 12530                           
 12531                           	psect	text37
 12532  00559A                     __ptext37:
 12533                           	opt callstack 0
 12534  00559A                     ___wmul:
 12535                           	opt callstack 25
 12536                           
 12537                           ;incstack = 0
 12538  00559A  5001               	movf	___wmul@multiplier,w,c
 12539  00559C  0203               	mulwf	___wmul@multiplicand,c
 12540  00559E  CFF3 F005          	movff	prodl,___wmul@product
 12541  0055A2  CFF4 F006          	movff	prodh,___wmul@product+1
 12542  0055A6  5001               	movf	___wmul@multiplier,w,c
 12543  0055A8  0204               	mulwf	___wmul@multiplicand+1,c
 12544  0055AA  50F3               	movf	prodl,w,c
 12545  0055AC  2606               	addwf	___wmul@product+1,f,c
 12546  0055AE  5002               	movf	___wmul@multiplier+1,w,c
 12547  0055B0  0203               	mulwf	___wmul@multiplicand,c
 12548  0055B2  50F3               	movf	prodl,w,c
 12549  0055B4  2606               	addwf	___wmul@product+1,f,c
 12550  0055B6  C005  F001         	movff	___wmul@product,?___wmul
 12551  0055BA  C006  F002         	movff	___wmul@product+1,?___wmul+1
 12552  0055BE  0012               	return		;funcret
 12553  0055C0                     __end_of___wmul:
 12554                           	opt callstack 0
 12555                           
 12556 ;; *************** function _st_clust *****************
 12557 ;; Defined at:
 12558 ;;		line 1252 in file "ff.c"
 12559 ;; Parameters:    Size  Location     Type
 12560 ;;  dir             2    0[COMRAM] PTR unsigned char 
 12561 ;;		 -> FatFs(558), NULL(0), 
 12562 ;;  cl              4    2[COMRAM] unsigned long 
 12563 ;; Auto vars:     Size  Location     Type
 12564 ;;		None
 12565 ;; Return value:  Size  Location     Type
 12566 ;;                  1    wreg      void 
 12567 ;; Registers used:
 12568 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12569 ;; Tracked objects:
 12570 ;;		On entry : 0/0
 12571 ;;		On exit  : 0/0
 12572 ;;		Unchanged: 0/0
 12573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12574 ;;      Params:         6       0       0       0       0       0       0       0       0
 12575 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12576 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12577 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12578 ;;Total ram usage:        6 bytes
 12579 ;; Hardware stack levels used:    1
 12580 ;; This function calls:
 12581 ;;		Nothing
 12582 ;; This function is called by:
 12583 ;;		_f_open
 12584 ;;		_f_sync
 12585 ;; This function uses a non-reentrant model
 12586 ;;
 12587                           
 12588                           	psect	text38
 12589  00554A                     __ptext38:
 12590                           	opt callstack 0
 12591  00554A                     _st_clust:
 12592                           	opt callstack 28
 12593                           
 12594                           ;ff.c: 1253:  BYTE* dir,;ff.c: 1254:  DWORD cl;ff.c: 1256: {;ff.c: 1257:  *(WORD*)(BYTE*
      +                          )(dir + 26)=(WORD)(cl);
 12595                           
 12596                           ;incstack = 0
 12597  00554A  EE20 F01A          	lfsr	2,26
 12598  00554E  5001               	movf	st_clust@dir,w,c
 12599  005550  26D9               	addwf	fsr2l,f,c
 12600  005552  5002               	movf	st_clust@dir+1,w,c
 12601  005554  22DA               	addwfc	fsr2h,f,c
 12602  005556  C003  FFDE         	movff	st_clust@cl,postinc2
 12603  00555A  C004  FFDD         	movff	st_clust@cl+1,postdec2
 12604                           
 12605                           ;ff.c: 1258:  *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 12606  00555E  EE20 F014          	lfsr	2,20
 12607  005562  5001               	movf	st_clust@dir,w,c
 12608  005564  26D9               	addwf	fsr2l,f,c
 12609  005566  5002               	movf	st_clust@dir+1,w,c
 12610  005568  22DA               	addwfc	fsr2h,f,c
 12611  00556A  C005  FFDE         	movff	st_clust@cl+2,postinc2
 12612  00556E  C006  FFDD         	movff	st_clust@cl+3,postdec2
 12613  005572  0012               	return		;funcret
 12614  005574                     __end_of_st_clust:
 12615                           	opt callstack 0
 12616                           
 12617 ;; *************** function _move_window *****************
 12618 ;; Defined at:
 12619 ;;		line 729 in file "ff.c"
 12620 ;; Parameters:    Size  Location     Type
 12621 ;;  fs              2   47[COMRAM] PTR struct .
 12622 ;;		 -> FatFs(558), NULL(0), 
 12623 ;;  sector          4   49[COMRAM] unsigned long 
 12624 ;; Auto vars:     Size  Location     Type
 12625 ;;  res             1   57[COMRAM] enum E93
 12626 ;; Return value:  Size  Location     Type
 12627 ;;                  1    wreg      enum E93
 12628 ;; Registers used:
 12629 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12630 ;; Tracked objects:
 12631 ;;		On entry : 0/0
 12632 ;;		On exit  : 0/0
 12633 ;;		Unchanged: 0/0
 12634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12635 ;;      Params:         6       0       0       0       0       0       0       0       0
 12636 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12637 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12638 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12639 ;;Total ram usage:       11 bytes
 12640 ;; Hardware stack levels used:    1
 12641 ;; Hardware stack levels required when called:    7
 12642 ;; This function calls:
 12643 ;;		_disk_read
 12644 ;;		_sync_window
 12645 ;; This function is called by:
 12646 ;;		_get_fat
 12647 ;;		_put_fat
 12648 ;;		_dir_alloc
 12649 ;;		_dir_find
 12650 ;;		_dir_register
 12651 ;;		_check_fs
 12652 ;;		_find_volume
 12653 ;;		_f_open
 12654 ;;		_f_write
 12655 ;;		_f_sync
 12656 ;;		_f_read
 12657 ;; This function uses a non-reentrant model
 12658 ;;
 12659                           
 12660                           	psect	text39
 12661  004E4E                     __ptext39:
 12662                           	opt callstack 0
 12663  004E4E                     _move_window:
 12664                           	opt callstack 21
 12665                           
 12666                           ;ff.c: 730:  FATFS* fs,;ff.c: 731:  DWORD sector;ff.c: 733: {;ff.c: 734:  FRESULT res = 
      +                          FR_OK;
 12667                           
 12668                           ;incstack = 0
 12669  004E4E  0E00               	movlw	0
 12670  004E50  6E3A               	movwf	move_window@res,c
 12671                           
 12672                           ;ff.c: 737:  if (sector != fs->winsect) {
 12673  004E52  EE20 F02A          	lfsr	2,42
 12674  004E56  5030               	movf	move_window@fs,w,c
 12675  004E58  26D9               	addwf	fsr2l,f,c
 12676  004E5A  5031               	movf	move_window@fs+1,w,c
 12677  004E5C  22DA               	addwfc	fsr2h,f,c
 12678  004E5E  5032               	movf	move_window@sector,w,c
 12679  004E60  18DE               	xorwf	postinc2,w,c
 12680  004E62  E10A               	bnz	u4980
 12681  004E64  5033               	movf	move_window@sector+1,w,c
 12682  004E66  18DE               	xorwf	postinc2,w,c
 12683  004E68  E107               	bnz	u4980
 12684  004E6A  5034               	movf	move_window@sector+2,w,c
 12685  004E6C  18DE               	xorwf	postinc2,w,c
 12686  004E6E  E104               	bnz	u4980
 12687  004E70  5035               	movf	move_window@sector+3,w,c
 12688  004E72  18DE               	xorwf	postinc2,w,c
 12689  004E74  B4D8               	btfsc	status,2,c
 12690  004E76  D03C               	goto	l4379
 12691  004E78                     u4980:
 12692                           
 12693                           ;ff.c: 739:   res = sync_window(fs);
 12694  004E78  C030  F01B         	movff	move_window@fs,sync_window@fs
 12695  004E7C  C031  F01C         	movff	move_window@fs+1,sync_window@fs+1
 12696  004E80  EC4C  F020         	call	_sync_window	;wreg free
 12697  004E84  6E3A               	movwf	move_window@res,c
 12698                           
 12699                           ;ff.c: 741:   if (res == FR_OK) {
 12700  004E86  503A               	movf	move_window@res,w,c
 12701  004E88  A4D8               	btfss	status,2,c
 12702  004E8A  D032               	goto	l4379
 12703                           
 12704                           ;ff.c: 742:    if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 12705  004E8C  0E2E               	movlw	46
 12706  004E8E  2430               	addwf	move_window@fs,w,c
 12707  004E90  6E11               	movwf	disk_read@buff,c
 12708  004E92  0E00               	movlw	0
 12709  004E94  2031               	addwfc	move_window@fs+1,w,c
 12710  004E96  6E12               	movwf	disk_read@buff+1,c
 12711  004E98  C032  F013         	movff	move_window@sector,disk_read@sector
 12712  004E9C  C033  F014         	movff	move_window@sector+1,disk_read@sector+1
 12713  004EA0  C034  F015         	movff	move_window@sector+2,disk_read@sector+2
 12714  004EA4  C035  F016         	movff	move_window@sector+3,disk_read@sector+3
 12715  004EA8  0E00               	movlw	0
 12716  004EAA  6E18               	movwf	disk_read@count+1,c
 12717  004EAC  0E01               	movlw	1
 12718  004EAE  6E17               	movwf	disk_read@count,c
 12719  004EB0  EE20 F001          	lfsr	2,1
 12720  004EB4  5030               	movf	move_window@fs,w,c
 12721  004EB6  26D9               	addwf	fsr2l,f,c
 12722  004EB8  5031               	movf	move_window@fs+1,w,c
 12723  004EBA  22DA               	addwfc	fsr2h,f,c
 12724  004EBC  50DF               	movf	indf2,w,c
 12725  004EBE  ECA7  F025         	call	_disk_read
 12726  004EC2  0900               	iorlw	0
 12727  004EC4  B4D8               	btfsc	status,2,c
 12728  004EC6  D006               	goto	l4377
 12729                           
 12730                           ;ff.c: 743:     sector = 0xFFFFFFFF;
 12731  004EC8  6832               	setf	move_window@sector,c
 12732  004ECA  6833               	setf	move_window@sector+1,c
 12733  004ECC  6834               	setf	move_window@sector+2,c
 12734  004ECE  6835               	setf	move_window@sector+3,c
 12735                           
 12736                           ;ff.c: 744:     res = FR_DISK_ERR;
 12737  004ED0  0E01               	movlw	1
 12738  004ED2  6E3A               	movwf	move_window@res,c
 12739  004ED4                     l4377:
 12740                           
 12741                           ;ff.c: 746:    fs->winsect = sector;
 12742  004ED4  EE20 F02A          	lfsr	2,42
 12743  004ED8  5030               	movf	move_window@fs,w,c
 12744  004EDA  26D9               	addwf	fsr2l,f,c
 12745  004EDC  5031               	movf	move_window@fs+1,w,c
 12746  004EDE  22DA               	addwfc	fsr2h,f,c
 12747  004EE0  C032  FFDE         	movff	move_window@sector,postinc2
 12748  004EE4  C033  FFDE         	movff	move_window@sector+1,postinc2
 12749  004EE8  C034  FFDE         	movff	move_window@sector+2,postinc2
 12750  004EEC  C035  FFDE         	movff	move_window@sector+3,postinc2
 12751  004EF0                     l4379:
 12752                           
 12753                           ;ff.c: 749:  return res;
 12754  004EF0  503A               	movf	move_window@res,w,c
 12755  004EF2  0012               	return		;funcret
 12756  004EF4                     __end_of_move_window:
 12757                           	opt callstack 0
 12758                           
 12759 ;; *************** function _sync_window *****************
 12760 ;; Defined at:
 12761 ;;		line 700 in file "ff.c"
 12762 ;; Parameters:    Size  Location     Type
 12763 ;;  fs              2   26[COMRAM] PTR struct .
 12764 ;;		 -> FatFs(558), NULL(0), 
 12765 ;; Auto vars:     Size  Location     Type
 12766 ;;  wsect           4   43[COMRAM] unsigned long 
 12767 ;;  nf              2   41[COMRAM] unsigned short 
 12768 ;;  res             1   40[COMRAM] enum E93
 12769 ;; Return value:  Size  Location     Type
 12770 ;;                  1    wreg      enum E93
 12771 ;; Registers used:
 12772 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12773 ;; Tracked objects:
 12774 ;;		On entry : 0/0
 12775 ;;		On exit  : 0/0
 12776 ;;		Unchanged: 0/0
 12777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12778 ;;      Params:         2       0       0       0       0       0       0       0       0
 12779 ;;      Locals:         7       0       0       0       0       0       0       0       0
 12780 ;;      Temps:         12       0       0       0       0       0       0       0       0
 12781 ;;      Totals:        21       0       0       0       0       0       0       0       0
 12782 ;;Total ram usage:       21 bytes
 12783 ;; Hardware stack levels used:    1
 12784 ;; Hardware stack levels required when called:    6
 12785 ;; This function calls:
 12786 ;;		_disk_write
 12787 ;; This function is called by:
 12788 ;;		_move_window
 12789 ;;		_sync_fs
 12790 ;;		_dir_next
 12791 ;;		_f_write
 12792 ;; This function uses a non-reentrant model
 12793 ;;
 12794                           
 12795                           	psect	text40
 12796  004098                     __ptext40:
 12797                           	opt callstack 0
 12798  004098                     _sync_window:
 12799                           	opt callstack 22
 12800                           
 12801                           ;ff.c: 701:  FATFS* fs;ff.c: 703: {;ff.c: 704:  DWORD wsect;;ff.c: 705:  UINT nf;;ff.c: 
      +                          706:  FRESULT res = FR_OK;
 12802                           
 12803                           ;incstack = 0
 12804  004098  0E00               	movlw	0
 12805  00409A  6E29               	movwf	sync_window@res,c
 12806                           
 12807                           ;ff.c: 709:  if (fs->wflag) {
 12808  00409C  EE20 F004          	lfsr	2,4
 12809  0040A0  501B               	movf	sync_window@fs,w,c
 12810  0040A2  26D9               	addwf	fsr2l,f,c
 12811  0040A4  501C               	movf	sync_window@fs+1,w,c
 12812  0040A6  22DA               	addwfc	fsr2h,f,c
 12813  0040A8  50DF               	movf	indf2,w,c
 12814  0040AA  B4D8               	btfsc	status,2,c
 12815  0040AC  D09F               	goto	l4359
 12816                           
 12817                           ;ff.c: 710:   wsect = fs->winsect;
 12818  0040AE  EE20 F02A          	lfsr	2,42
 12819  0040B2  501B               	movf	sync_window@fs,w,c
 12820  0040B4  26D9               	addwf	fsr2l,f,c
 12821  0040B6  501C               	movf	sync_window@fs+1,w,c
 12822  0040B8  22DA               	addwfc	fsr2h,f,c
 12823  0040BA  CFDE F02C          	movff	postinc2,sync_window@wsect
 12824  0040BE  CFDE F02D          	movff	postinc2,sync_window@wsect+1
 12825  0040C2  CFDE F02E          	movff	postinc2,sync_window@wsect+2
 12826  0040C6  CFDE F02F          	movff	postinc2,sync_window@wsect+3
 12827                           
 12828                           ;ff.c: 711:   if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 12829  0040CA  0E2E               	movlw	46
 12830  0040CC  241B               	addwf	sync_window@fs,w,c
 12831  0040CE  6E11               	movwf	disk_write@buff,c
 12832  0040D0  0E00               	movlw	0
 12833  0040D2  201C               	addwfc	sync_window@fs+1,w,c
 12834  0040D4  6E12               	movwf	disk_write@buff+1,c
 12835  0040D6  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12836  0040DA  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12837  0040DE  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12838  0040E2  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12839  0040E6  0E00               	movlw	0
 12840  0040E8  6E18               	movwf	disk_write@count+1,c
 12841  0040EA  0E01               	movlw	1
 12842  0040EC  6E17               	movwf	disk_write@count,c
 12843  0040EE  EE20 F001          	lfsr	2,1
 12844  0040F2  501B               	movf	sync_window@fs,w,c
 12845  0040F4  26D9               	addwf	fsr2l,f,c
 12846  0040F6  501C               	movf	sync_window@fs+1,w,c
 12847  0040F8  22DA               	addwfc	fsr2h,f,c
 12848  0040FA  50DF               	movf	indf2,w,c
 12849  0040FC  ECE1  F022         	call	_disk_write
 12850  004100  0900               	iorlw	0
 12851  004102  B4D8               	btfsc	status,2,c
 12852  004104  D003               	goto	l4341
 12853                           
 12854                           ;ff.c: 712:    res = FR_DISK_ERR;
 12855  004106  0E01               	movlw	1
 12856  004108  6E29               	movwf	sync_window@res,c
 12857                           
 12858                           ;ff.c: 713:   } else {
 12859  00410A  D070               	goto	l4359
 12860  00410C                     l4341:
 12861                           
 12862                           ;ff.c: 714:    fs->wflag = 0;
 12863  00410C  EE20 F004          	lfsr	2,4
 12864  004110  501B               	movf	sync_window@fs,w,c
 12865  004112  26D9               	addwf	fsr2l,f,c
 12866  004114  501C               	movf	sync_window@fs+1,w,c
 12867  004116  22DA               	addwfc	fsr2h,f,c
 12868  004118  0E00               	movlw	0
 12869  00411A  6EDF               	movwf	indf2,c
 12870                           
 12871                           ;ff.c: 715:    if (wsect - fs->fatbase < fs->fsize) {
 12872  00411C  EE20 F016          	lfsr	2,22
 12873  004120  501B               	movf	sync_window@fs,w,c
 12874  004122  26D9               	addwf	fsr2l,f,c
 12875  004124  501C               	movf	sync_window@fs+1,w,c
 12876  004126  22DA               	addwfc	fsr2h,f,c
 12877  004128  EE10 F01E          	lfsr	1,30
 12878  00412C  501B               	movf	sync_window@fs,w,c
 12879  00412E  26E1               	addwf	fsr1l,f,c
 12880  004130  501C               	movf	sync_window@fs+1,w,c
 12881  004132  22E2               	addwfc	fsr1h,f,c
 12882  004134  CFE6 F021          	movff	postinc1,??_sync_window+4
 12883  004138  CFE6 F022          	movff	postinc1,??_sync_window+5
 12884  00413C  CFE6 F023          	movff	postinc1,??_sync_window+6
 12885  004140  CFE6 F024          	movff	postinc1,??_sync_window+7
 12886  004144  5021               	movf	??_sync_window+4,w,c
 12887  004146  5C2C               	subwf	sync_window@wsect,w,c
 12888  004148  6E25               	movwf	(??_sync_window+8)& (0+255),c
 12889  00414A  5022               	movf	??_sync_window+5,w,c
 12890  00414C  582D               	subwfb	sync_window@wsect+1,w,c
 12891  00414E  6E26               	movwf	(??_sync_window+9)& (0+255),c
 12892  004150  5023               	movf	??_sync_window+6,w,c
 12893  004152  582E               	subwfb	sync_window@wsect+2,w,c
 12894  004154  6E27               	movwf	(??_sync_window+10)& (0+255),c
 12895  004156  5024               	movf	??_sync_window+7,w,c
 12896  004158  582F               	subwfb	sync_window@wsect+3,w,c
 12897  00415A  6E28               	movwf	(??_sync_window+11)& (0+255),c
 12898  00415C  50DE               	movf	postinc2,w,c
 12899  00415E  5C25               	subwf	??_sync_window+8,w,c
 12900  004160  50DE               	movf	postinc2,w,c
 12901  004162  5826               	subwfb	??_sync_window+9,w,c
 12902  004164  50DE               	movf	postinc2,w,c
 12903  004166  5827               	subwfb	??_sync_window+10,w,c
 12904  004168  50DE               	movf	postinc2,w,c
 12905  00416A  5828               	subwfb	??_sync_window+11,w,c
 12906  00416C  B0D8               	btfsc	status,0,c
 12907  00416E  D03E               	goto	l4359
 12908                           
 12909                           ;ff.c: 716:     for (nf = fs->n_fats; nf >= 2; nf--) {
 12910  004170  EE20 F003          	lfsr	2,3
 12911  004174  501B               	movf	sync_window@fs,w,c
 12912  004176  26D9               	addwf	fsr2l,f,c
 12913  004178  501C               	movf	sync_window@fs+1,w,c
 12914  00417A  22DA               	addwfc	fsr2h,f,c
 12915  00417C  50DF               	movf	indf2,w,c
 12916  00417E  6E1D               	movwf	??_sync_window& (0+255),c
 12917  004180  501D               	movf	??_sync_window,w,c
 12918  004182  6E2A               	movwf	sync_window@nf,c
 12919  004184  6A2B               	clrf	sync_window@nf+1,c
 12920  004186                     l4347:
 12921  004186  502B               	movf	sync_window@nf+1,w,c
 12922  004188  E104               	bnz	l4351
 12923  00418A  0E02               	movlw	2
 12924  00418C  5C2A               	subwf	sync_window@nf,w,c
 12925  00418E  A0D8               	btfss	status,0,c
 12926  004190  D02D               	goto	l4359
 12927  004192                     l4351:
 12928                           
 12929                           ;ff.c: 717:      wsect += fs->fsize;
 12930  004192  EE20 F016          	lfsr	2,22
 12931  004196  501B               	movf	sync_window@fs,w,c
 12932  004198  26D9               	addwf	fsr2l,f,c
 12933  00419A  501C               	movf	sync_window@fs+1,w,c
 12934  00419C  22DA               	addwfc	fsr2h,f,c
 12935  00419E  50DE               	movf	postinc2,w,c
 12936  0041A0  262C               	addwf	sync_window@wsect,f,c
 12937  0041A2  50DE               	movf	postinc2,w,c
 12938  0041A4  222D               	addwfc	sync_window@wsect+1,f,c
 12939  0041A6  50DE               	movf	postinc2,w,c
 12940  0041A8  222E               	addwfc	sync_window@wsect+2,f,c
 12941  0041AA  50DD               	movf	postdec2,w,c
 12942  0041AC  222F               	addwfc	sync_window@wsect+3,f,c
 12943                           
 12944                           ;ff.c: 718:      disk_write(fs->drv, fs->win, wsect, 1);
 12945  0041AE  0E2E               	movlw	46
 12946  0041B0  241B               	addwf	sync_window@fs,w,c
 12947  0041B2  6E11               	movwf	disk_write@buff,c
 12948  0041B4  0E00               	movlw	0
 12949  0041B6  201C               	addwfc	sync_window@fs+1,w,c
 12950  0041B8  6E12               	movwf	disk_write@buff+1,c
 12951  0041BA  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12952  0041BE  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12953  0041C2  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12954  0041C6  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12955  0041CA  0E00               	movlw	0
 12956  0041CC  6E18               	movwf	disk_write@count+1,c
 12957  0041CE  0E01               	movlw	1
 12958  0041D0  6E17               	movwf	disk_write@count,c
 12959  0041D2  EE20 F001          	lfsr	2,1
 12960  0041D6  501B               	movf	sync_window@fs,w,c
 12961  0041D8  26D9               	addwf	fsr2l,f,c
 12962  0041DA  501C               	movf	sync_window@fs+1,w,c
 12963  0041DC  22DA               	addwfc	fsr2h,f,c
 12964  0041DE  50DF               	movf	indf2,w,c
 12965  0041E0  ECE1  F022         	call	_disk_write
 12966                           
 12967                           ;ff.c: 719:     }
 12968  0041E4  062A               	decf	sync_window@nf,f,c
 12969  0041E6  A0D8               	btfss	status,0,c
 12970  0041E8  062B               	decf	sync_window@nf+1,f,c
 12971  0041EA  D7CD               	goto	l4347
 12972  0041EC                     l4359:
 12973                           
 12974                           ;ff.c: 723:  return res;
 12975  0041EC  5029               	movf	sync_window@res,w,c
 12976  0041EE  0012               	return		;funcret
 12977  0041F0                     __end_of_sync_window:
 12978                           	opt callstack 0
 12979                           
 12980 ;; *************** function _disk_write *****************
 12981 ;; Defined at:
 12982 ;;		line 405 in file "diskio.c"
 12983 ;; Parameters:    Size  Location     Type
 12984 ;;  pdrv            1    wreg     unsigned char 
 12985 ;;  buff            2   16[COMRAM] PTR const unsigned char 
 12986 ;;		 -> FatFs.win(512), FatFs(558), main@letra(1), NULL(0), 
 12987 ;;  sector          4   18[COMRAM] unsigned long 
 12988 ;;  count           2   22[COMRAM] unsigned short 
 12989 ;; Auto vars:     Size  Location     Type
 12990 ;;  pdrv            1   25[COMRAM] unsigned char 
 12991 ;; Return value:  Size  Location     Type
 12992 ;;                  1    wreg      enum E43
 12993 ;; Registers used:
 12994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12995 ;; Tracked objects:
 12996 ;;		On entry : 0/0
 12997 ;;		On exit  : 0/0
 12998 ;;		Unchanged: 0/0
 12999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13000 ;;      Params:         8       0       0       0       0       0       0       0       0
 13001 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13002 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13003 ;;      Totals:        10       0       0       0       0       0       0       0       0
 13004 ;;Total ram usage:       10 bytes
 13005 ;; Hardware stack levels used:    1
 13006 ;; Hardware stack levels required when called:    5
 13007 ;; This function calls:
 13008 ;;		_deselect
 13009 ;;		_send_cmd
 13010 ;;		_xmit_datablock
 13011 ;; This function is called by:
 13012 ;;		_sync_window
 13013 ;;		_sync_fs
 13014 ;;		_f_write
 13015 ;; This function uses a non-reentrant model
 13016 ;;
 13017                           
 13018                           	psect	text41
 13019  0045C2                     __ptext41:
 13020                           	opt callstack 0
 13021  0045C2                     _disk_write:
 13022                           	opt callstack 22
 13023                           
 13024                           ;incstack = 0
 13025                           ;disk_write@pdrv stored from wreg
 13026  0045C2  6E1A               	movwf	disk_write@pdrv,c
 13027                           
 13028                           ;diskio.c: 406:  BYTE pdrv,;diskio.c: 407:  const BYTE *buff,;diskio.c: 408:  DWORD sect
      +                          or,;diskio.c: 409:  UINT count;diskio.c: 411: {;diskio.c: 412:  if (pdrv || !count) retu
      +                          rn RES_PARERR;
 13029  0045C4  501A               	movf	disk_write@pdrv,w,c
 13030  0045C6  A4D8               	btfss	status,2,c
 13031  0045C8  D004               	goto	u4670
 13032  0045CA  5017               	movf	disk_write@count,w,c
 13033  0045CC  1018               	iorwf	disk_write@count+1,w,c
 13034  0045CE  A4D8               	btfss	status,2,c
 13035  0045D0  D002               	goto	l126
 13036  0045D2                     u4670:
 13037  0045D2  0E04               	movlw	4
 13038  0045D4  0012               	return	
 13039  0045D6                     l126:
 13040                           
 13041                           ;diskio.c: 413:  if (Stat & 0x01) return RES_NOTRDY;
 13042  0045D6  0100               	movlb	0	; () banked
 13043  0045D8  A1F6               	btfss	_Stat& (0+255),0,b
 13044  0045DA  D002               	goto	l130
 13045                           
 13046                           ; BSR set to: 0
 13047  0045DC  0E03               	movlw	3
 13048  0045DE  0012               	return	
 13049  0045E0                     l130:
 13050                           
 13051                           ; BSR set to: 0
 13052                           ;diskio.c: 414:  if (Stat & 0x04) return RES_WRPRT;
 13053  0045E0  A5F6               	btfss	_Stat& (0+255),2,b
 13054  0045E2  D002               	goto	l131
 13055                           
 13056                           ; BSR set to: 0
 13057  0045E4  0E02               	movlw	2
 13058  0045E6  0012               	return	
 13059  0045E8                     l131:
 13060                           
 13061                           ; BSR set to: 0
 13062                           ;diskio.c: 416:  if (!(CardType & 0x08)) sector *= 512;
 13063  0045E8  B7EB               	btfsc	_CardType& (0+255),3,b
 13064  0045EA  D008               	goto	l132
 13065                           
 13066                           ; BSR set to: 0
 13067  0045EC  0E09               	movlw	9
 13068  0045EE                     u4715:
 13069  0045EE  90D8               	bcf	status,0,c
 13070  0045F0  3613               	rlcf	disk_write@sector,f,c
 13071  0045F2  3614               	rlcf	disk_write@sector+1,f,c
 13072  0045F4  3615               	rlcf	disk_write@sector+2,f,c
 13073  0045F6  3616               	rlcf	disk_write@sector+3,f,c
 13074  0045F8  2EE8               	decfsz	wreg,f,c
 13075  0045FA  D7F9               	goto	u4715
 13076  0045FC                     l132:
 13077                           
 13078                           ; BSR set to: 0
 13079                           ;diskio.c: 418:  if (count == 1) {
 13080  0045FC  0417               	decf	disk_write@count,w,c
 13081  0045FE  1018               	iorwf	disk_write@count+1,w,c
 13082  004600  A4D8               	btfss	status,2,c
 13083  004602  D01D               	goto	l4273
 13084                           
 13085                           ; BSR set to: 0
 13086                           ;diskio.c: 419:   if ((send_cmd((24), sector) == 0)
 13087  004604  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 13088  004608  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 13089  00460C  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 13090  004610  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 13091  004614  0E18               	movlw	24
 13092  004616  EC17  F02A         	call	_send_cmd
 13093  00461A  0900               	iorlw	0
 13094  00461C  A4D8               	btfss	status,2,c
 13095  00461E  D04F               	goto	l4287
 13096  004620  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 13097  004624  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 13098  004628  0EFE               	movlw	254
 13099  00462A  6E06               	movwf	xmit_datablock@token,c
 13100  00462C  EC6A  F029         	call	_xmit_datablock	;wreg free
 13101  004630  0900               	iorlw	0
 13102  004632  B4D8               	btfsc	status,2,c
 13103  004634  D044               	goto	l4287
 13104                           
 13105                           ;diskio.c: 421:    count = 0;
 13106  004636  0E00               	movlw	0
 13107  004638  6E18               	movwf	disk_write@count+1,c
 13108  00463A  0E00               	movlw	0
 13109  00463C  D03F               	goto	L17
 13110  00463E                     l4273:
 13111                           
 13112                           ; BSR set to: 0
 13113                           ;diskio.c: 424:   if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 13114  00463E  C0EB  F019         	movff	_CardType,??_disk_write
 13115  004642  0E06               	movlw	6
 13116  004644  1619               	andwf	??_disk_write,f,c
 13117  004646  B4D8               	btfsc	status,2,c
 13118  004648  D009               	goto	l136
 13119                           
 13120                           ; BSR set to: 0
 13121  00464A  C017  F00B         	movff	disk_write@count,send_cmd@arg
 13122  00464E  C018  F00C         	movff	disk_write@count+1,send_cmd@arg+1
 13123  004652  6A0D               	clrf	send_cmd@arg+2,c
 13124  004654  6A0E               	clrf	send_cmd@arg+3,c
 13125  004656  0E97               	movlw	151
 13126  004658  EC17  F02A         	call	_send_cmd
 13127  00465C                     l136:
 13128                           
 13129                           ;diskio.c: 425:   if (send_cmd((25), sector) == 0) {
 13130  00465C  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 13131  004660  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 13132  004664  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 13133  004668  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 13134  00466C  0E19               	movlw	25
 13135  00466E  EC17  F02A         	call	_send_cmd
 13136  004672  0900               	iorlw	0
 13137  004674  A4D8               	btfss	status,2,c
 13138  004676  D023               	goto	l4287
 13139  004678                     u4760:
 13140                           
 13141                           ;diskio.c: 427:     if (!xmit_datablock(buff, 0xFC)) break;
 13142  004678  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 13143  00467C  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 13144  004680  0EFC               	movlw	252
 13145  004682  6E06               	movwf	xmit_datablock@token,c
 13146  004684  EC6A  F029         	call	_xmit_datablock	;wreg free
 13147  004688  0900               	iorlw	0
 13148  00468A  B4D8               	btfsc	status,2,c
 13149  00468C  D009               	goto	u4780
 13150                           
 13151                           ;diskio.c: 428:     buff += 512;
 13152  00468E  0E02               	movlw	2
 13153  004690  2612               	addwf	disk_write@buff+1,f,c
 13154                           
 13155                           ;diskio.c: 429:    } while (--count);
 13156  004692  0617               	decf	disk_write@count,f,c
 13157  004694  A0D8               	btfss	status,0,c
 13158  004696  0618               	decf	disk_write@count+1,f,c
 13159  004698  5017               	movf	disk_write@count,w,c
 13160  00469A  1018               	iorwf	disk_write@count+1,w,c
 13161  00469C  A4D8               	btfss	status,2,c
 13162  00469E  D7EC               	goto	u4760
 13163  0046A0                     u4780:
 13164                           
 13165                           ;diskio.c: 430:    if (!xmit_datablock(0, 0xFD))
 13166  0046A0  0E00               	movlw	0
 13167  0046A2  6E04               	movwf	xmit_datablock@buff,c
 13168  0046A4  0E00               	movlw	0
 13169  0046A6  6E05               	movwf	xmit_datablock@buff+1,c
 13170  0046A8  0EFD               	movlw	253
 13171  0046AA  6E06               	movwf	xmit_datablock@token,c
 13172  0046AC  EC6A  F029         	call	_xmit_datablock	;wreg free
 13173  0046B0  0900               	iorlw	0
 13174  0046B2  A4D8               	btfss	status,2,c
 13175  0046B4  D004               	goto	l4287
 13176                           
 13177                           ;diskio.c: 431:     count = 1;
 13178  0046B6  0E00               	movlw	0
 13179  0046B8  6E18               	movwf	disk_write@count+1,c
 13180  0046BA  0E01               	movlw	1
 13181  0046BC                     L17:
 13182  0046BC  6E17               	movwf	disk_write@count,c
 13183  0046BE                     l4287:
 13184                           
 13185                           ;diskio.c: 434:  deselect();
 13186  0046BE  EC44  F02B         	call	_deselect	;wreg free
 13187                           
 13188                           ;diskio.c: 436:  return count ? RES_ERROR : RES_OK;
 13189  0046C2  5017               	movf	disk_write@count,w,c
 13190  0046C4  1018               	iorwf	disk_write@count+1,w,c
 13191  0046C6  B4D8               	btfsc	status,2,c
 13192  0046C8  D002               	goto	u4800
 13193  0046CA  0E01               	movlw	1
 13194  0046CC  0012               	return	
 13195  0046CE                     u4800:
 13196  0046CE  0E00               	movlw	0
 13197  0046D0  0012               	return		;funcret
 13198  0046D2                     __end_of_disk_write:
 13199                           	opt callstack 0
 13200                           
 13201 ;; *************** function _xmit_datablock *****************
 13202 ;; Defined at:
 13203 ;;		line 156 in file "diskio.c"
 13204 ;; Parameters:    Size  Location     Type
 13205 ;;  buff            2    3[COMRAM] PTR const unsigned char 
 13206 ;;		 -> FatFs.win(512), FatFs(558), main@letra(1), NULL(0), 
 13207 ;;  token           1    5[COMRAM] unsigned char 
 13208 ;; Auto vars:     Size  Location     Type
 13209 ;;  i               2    6[COMRAM] unsigned short 
 13210 ;;  resp            1    8[COMRAM] unsigned char 
 13211 ;; Return value:  Size  Location     Type
 13212 ;;                  1    wreg      unsigned char 
 13213 ;; Registers used:
 13214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13215 ;; Tracked objects:
 13216 ;;		On entry : 0/0
 13217 ;;		On exit  : 0/0
 13218 ;;		Unchanged: 0/0
 13219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13220 ;;      Params:         3       0       0       0       0       0       0       0       0
 13221 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13222 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13223 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13224 ;;Total ram usage:        6 bytes
 13225 ;; Hardware stack levels used:    1
 13226 ;; Hardware stack levels required when called:    2
 13227 ;; This function calls:
 13228 ;;		_SPI1_Exchange8bit
 13229 ;;		_wait_ready
 13230 ;; This function is called by:
 13231 ;;		_disk_write
 13232 ;; This function uses a non-reentrant model
 13233 ;;
 13234                           
 13235                           	psect	text42
 13236  0052D4                     __ptext42:
 13237                           	opt callstack 0
 13238  0052D4                     _xmit_datablock:
 13239                           	opt callstack 24
 13240                           
 13241                           ;diskio.c: 157:  const BYTE *buff,;diskio.c: 158:  BYTE token;diskio.c: 160: {;diskio.c:
      +                           161:  BYTE resp;;diskio.c: 162:  WORD i;;diskio.c: 165:  if (!wait_ready()) return 0;
 13242                           
 13243                           ;incstack = 0
 13244  0052D4  EC38  F02A         	call	_wait_ready	;wreg free
 13245  0052D8  0900               	iorlw	0
 13246  0052DA  A4D8               	btfss	status,2,c
 13247  0052DC  D002               	goto	l4179
 13248  0052DE                     u4560:
 13249  0052DE  0E00               	movlw	0
 13250  0052E0  0012               	return	
 13251  0052E2                     l4179:
 13252                           
 13253                           ;diskio.c: 167:  SPI1_Exchange8bit(token);
 13254  0052E2  5006               	movf	xmit_datablock@token,w,c
 13255  0052E4  EC11  F02B         	call	_SPI1_Exchange8bit
 13256                           
 13257                           ;diskio.c: 168:  if (token != 0xFD) {
 13258  0052E8  0EFD               	movlw	253
 13259  0052EA  1806               	xorwf	xmit_datablock@token,w,c
 13260  0052EC  B4D8               	btfsc	status,2,c
 13261  0052EE  D023               	goto	l4199
 13262                           
 13263                           ;diskio.c: 169:   i = 512;
 13264  0052F0  0E02               	movlw	2
 13265  0052F2  6E08               	movwf	xmit_datablock@i+1,c
 13266  0052F4  0E00               	movlw	0
 13267  0052F6  6E07               	movwf	xmit_datablock@i,c
 13268  0052F8                     l4185:
 13269                           
 13270                           ;diskio.c: 171:    SPI1_Exchange8bit(*buff++);
 13271  0052F8  C004  FFD9         	movff	xmit_datablock@buff,fsr2l
 13272  0052FC  C005  FFDA         	movff	xmit_datablock@buff+1,fsr2h
 13273  005300  50DF               	movf	indf2,w,c
 13274  005302  EC11  F02B         	call	_SPI1_Exchange8bit
 13275  005306  4A04               	infsnz	xmit_datablock@buff,f,c
 13276  005308  2A05               	incf	xmit_datablock@buff+1,f,c
 13277  00530A  0607               	decf	xmit_datablock@i,f,c
 13278  00530C  A0D8               	btfss	status,0,c
 13279  00530E  0608               	decf	xmit_datablock@i+1,f,c
 13280  005310  5007               	movf	xmit_datablock@i,w,c
 13281  005312  1008               	iorwf	xmit_datablock@i+1,w,c
 13282  005314  A4D8               	btfss	status,2,c
 13283  005316  D7F0               	goto	l4185
 13284                           
 13285                           ;diskio.c: 173:   SPI1_Exchange8bit(0xFF);
 13286  005318  0EFF               	movlw	255
 13287  00531A  EC11  F02B         	call	_SPI1_Exchange8bit
 13288                           
 13289                           ;diskio.c: 174:   SPI1_Exchange8bit(0xFF);
 13290  00531E  0EFF               	movlw	255
 13291  005320  EC11  F02B         	call	_SPI1_Exchange8bit
 13292                           
 13293                           ;diskio.c: 175:   resp = SPI1_Exchange8bit(0xFF);
 13294  005324  0EFF               	movlw	255
 13295  005326  EC11  F02B         	call	_SPI1_Exchange8bit
 13296  00532A  6E09               	movwf	xmit_datablock@resp,c
 13297                           
 13298                           ;diskio.c: 176:   if ((resp & 0x1F) != 0x05)
 13299  00532C  5009               	movf	xmit_datablock@resp,w,c
 13300  00532E  0B1F               	andlw	31
 13301  005330  0A05               	xorlw	5
 13302  005332  A4D8               	btfss	status,2,c
 13303  005334  D7D4               	goto	u4560
 13304  005336                     l4199:
 13305                           
 13306                           ;diskio.c: 180:  return 1;
 13307  005336  0E01               	movlw	1
 13308  005338  0012               	return		;funcret
 13309  00533A                     __end_of_xmit_datablock:
 13310                           	opt callstack 0
 13311                           
 13312 ;; *************** function _disk_read *****************
 13313 ;; Defined at:
 13314 ;;		line 370 in file "diskio.c"
 13315 ;; Parameters:    Size  Location     Type
 13316 ;;  pdrv            1    wreg     unsigned char 
 13317 ;;  buff            2   16[COMRAM] PTR unsigned char 
 13318 ;;		 -> FatFs(558), NULL(0), 
 13319 ;;  sector          4   18[COMRAM] unsigned long 
 13320 ;;  count           2   22[COMRAM] unsigned short 
 13321 ;; Auto vars:     Size  Location     Type
 13322 ;;  pdrv            1   24[COMRAM] unsigned char 
 13323 ;;  cmd             1   27[COMRAM] unsigned char 
 13324 ;; Return value:  Size  Location     Type
 13325 ;;                  1    wreg      enum E43
 13326 ;; Registers used:
 13327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13328 ;; Tracked objects:
 13329 ;;		On entry : 0/0
 13330 ;;		On exit  : 0/0
 13331 ;;		Unchanged: 0/0
 13332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13333 ;;      Params:         8       0       0       0       0       0       0       0       0
 13334 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13335 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13336 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13337 ;;Total ram usage:       12 bytes
 13338 ;; Hardware stack levels used:    1
 13339 ;; Hardware stack levels required when called:    5
 13340 ;; This function calls:
 13341 ;;		_deselect
 13342 ;;		_rcvr_datablock
 13343 ;;		_send_cmd
 13344 ;; This function is called by:
 13345 ;;		_move_window
 13346 ;;		_f_read
 13347 ;; This function uses a non-reentrant model
 13348 ;;
 13349                           
 13350                           	psect	text43
 13351  004B4E                     __ptext43:
 13352                           	opt callstack 0
 13353  004B4E                     _disk_read:
 13354                           	opt callstack 22
 13355                           
 13356                           ;incstack = 0
 13357                           ;disk_read@pdrv stored from wreg
 13358  004B4E  6E19               	movwf	disk_read@pdrv,c
 13359                           
 13360                           ;diskio.c: 371:  BYTE pdrv,;diskio.c: 372:  BYTE *buff,;diskio.c: 373:  DWORD sector,;di
      +                          skio.c: 374:  UINT count;diskio.c: 376: {;diskio.c: 377:  BYTE cmd;;diskio.c: 380:  if (
      +                          pdrv || !count) return RES_PARERR;
 13361  004B50  5019               	movf	disk_read@pdrv,w,c
 13362  004B52  A4D8               	btfss	status,2,c
 13363  004B54  D004               	goto	u4830
 13364  004B56  5017               	movf	disk_read@count,w,c
 13365  004B58  1018               	iorwf	disk_read@count+1,w,c
 13366  004B5A  A4D8               	btfss	status,2,c
 13367  004B5C  D002               	goto	l109
 13368  004B5E                     u4830:
 13369  004B5E  0E04               	movlw	4
 13370  004B60  0012               	return	
 13371  004B62                     l109:
 13372                           
 13373                           ;diskio.c: 381:  if (Stat & 0x01) return RES_NOTRDY;
 13374  004B62  0100               	movlb	0	; () banked
 13375  004B64  A1F6               	btfss	_Stat& (0+255),0,b
 13376  004B66  D002               	goto	l113
 13377                           
 13378                           ; BSR set to: 0
 13379  004B68  0E03               	movlw	3
 13380  004B6A  0012               	return	
 13381  004B6C                     l113:
 13382                           
 13383                           ; BSR set to: 0
 13384                           ;diskio.c: 383:  if (!(CardType & 0x08)) sector *= 512;
 13385  004B6C  B7EB               	btfsc	_CardType& (0+255),3,b
 13386  004B6E  D008               	goto	l114
 13387                           
 13388                           ; BSR set to: 0
 13389  004B70  0E09               	movlw	9
 13390  004B72                     u4865:
 13391  004B72  90D8               	bcf	status,0,c
 13392  004B74  3613               	rlcf	disk_read@sector,f,c
 13393  004B76  3614               	rlcf	disk_read@sector+1,f,c
 13394  004B78  3615               	rlcf	disk_read@sector+2,f,c
 13395  004B7A  3616               	rlcf	disk_read@sector+3,f,c
 13396  004B7C  2EE8               	decfsz	wreg,f,c
 13397  004B7E  D7F9               	goto	u4865
 13398  004B80                     l114:
 13399                           
 13400                           ; BSR set to: 0
 13401                           ;diskio.c: 385:  cmd = count > 1 ? (18) : (17);
 13402  004B80  5018               	movf	disk_read@count+1,w,c
 13403  004B82  E108               	bnz	l4309
 13404  004B84  0E02               	movlw	2
 13405  004B86  5C17               	subwf	disk_read@count,w,c
 13406  004B88  B0D8               	btfsc	status,0,c
 13407  004B8A  D004               	goto	l4309
 13408                           
 13409                           ; BSR set to: 0
 13410  004B8C  0E00               	movlw	0
 13411  004B8E  6E1B               	movwf	_disk_read$143+1,c
 13412  004B90  0E11               	movlw	17
 13413  004B92  D003               	goto	L18
 13414  004B94                     l4309:
 13415                           
 13416                           ; BSR set to: 0
 13417  004B94  0E00               	movlw	0
 13418  004B96  6E1B               	movwf	_disk_read$143+1,c
 13419  004B98  0E12               	movlw	18
 13420  004B9A                     L18:
 13421  004B9A  6E1A               	movwf	_disk_read$143,c
 13422                           
 13423                           ; BSR set to: 0
 13424  004B9C  C01A  F01C         	movff	_disk_read$143,disk_read@cmd
 13425                           
 13426                           ; BSR set to: 0
 13427                           ;diskio.c: 386:  if (send_cmd(cmd, sector) == 0) {
 13428  004BA0  C013  F00B         	movff	disk_read@sector,send_cmd@arg
 13429  004BA4  C014  F00C         	movff	disk_read@sector+1,send_cmd@arg+1
 13430  004BA8  C015  F00D         	movff	disk_read@sector+2,send_cmd@arg+2
 13431  004BAC  C016  F00E         	movff	disk_read@sector+3,send_cmd@arg+3
 13432  004BB0  501C               	movf	disk_read@cmd,w,c
 13433  004BB2  EC17  F02A         	call	_send_cmd
 13434  004BB6  0900               	iorlw	0
 13435  004BB8  A4D8               	btfss	status,2,c
 13436  004BBA  D025               	goto	l4325
 13437  004BBC                     u4880:
 13438                           
 13439                           ;diskio.c: 388:    if (!rcvr_datablock(buff, 512)) break;
 13440  004BBC  C011  F002         	movff	disk_read@buff,rcvr_datablock@buff
 13441  004BC0  C012  F003         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 13442  004BC4  0E02               	movlw	2
 13443  004BC6  6E05               	movwf	rcvr_datablock@btr+1,c
 13444  004BC8  0E00               	movlw	0
 13445  004BCA  6E04               	movwf	rcvr_datablock@btr,c
 13446  004BCC  EC01  F029         	call	_rcvr_datablock	;wreg free
 13447  004BD0  0900               	iorlw	0
 13448  004BD2  B4D8               	btfsc	status,2,c
 13449  004BD4  D009               	goto	u4900
 13450                           
 13451                           ;diskio.c: 389:    buff += 512;
 13452  004BD6  0E02               	movlw	2
 13453  004BD8  2612               	addwf	disk_read@buff+1,f,c
 13454                           
 13455                           ;diskio.c: 390:   } while (--count);
 13456  004BDA  0617               	decf	disk_read@count,f,c
 13457  004BDC  A0D8               	btfss	status,0,c
 13458  004BDE  0618               	decf	disk_read@count+1,f,c
 13459  004BE0  5017               	movf	disk_read@count,w,c
 13460  004BE2  1018               	iorwf	disk_read@count+1,w,c
 13461  004BE4  A4D8               	btfss	status,2,c
 13462  004BE6  D7EA               	goto	u4880
 13463  004BE8                     u4900:
 13464                           
 13465                           ;diskio.c: 391:   if (cmd == (18)) send_cmd((12), 0);
 13466  004BE8  0E12               	movlw	18
 13467  004BEA  181C               	xorwf	disk_read@cmd,w,c
 13468  004BEC  A4D8               	btfss	status,2,c
 13469  004BEE  D00B               	goto	l4325
 13470  004BF0  0E00               	movlw	0
 13471  004BF2  6E0B               	movwf	send_cmd@arg,c
 13472  004BF4  0E00               	movlw	0
 13473  004BF6  6E0C               	movwf	send_cmd@arg+1,c
 13474  004BF8  0E00               	movlw	0
 13475  004BFA  6E0D               	movwf	send_cmd@arg+2,c
 13476  004BFC  0E00               	movlw	0
 13477  004BFE  6E0E               	movwf	send_cmd@arg+3,c
 13478  004C00  0E0C               	movlw	12
 13479  004C02  EC17  F02A         	call	_send_cmd
 13480  004C06                     l4325:
 13481                           
 13482                           ;diskio.c: 393:  deselect();
 13483  004C06  EC44  F02B         	call	_deselect	;wreg free
 13484                           
 13485                           ;diskio.c: 395:  return count ? RES_ERROR : RES_OK;
 13486  004C0A  5017               	movf	disk_read@count,w,c
 13487  004C0C  1018               	iorwf	disk_read@count+1,w,c
 13488  004C0E  B4D8               	btfsc	status,2,c
 13489  004C10  D002               	goto	u4920
 13490  004C12  0E01               	movlw	1
 13491  004C14  0012               	return	
 13492  004C16                     u4920:
 13493  004C16  0E00               	movlw	0
 13494  004C18  0012               	return		;funcret
 13495  004C1A                     __end_of_disk_read:
 13496                           	opt callstack 0
 13497                           
 13498 ;; *************** function _send_cmd *****************
 13499 ;; Defined at:
 13500 ;;		line 231 in file "diskio.c"
 13501 ;; Parameters:    Size  Location     Type
 13502 ;;  cmd             1    wreg     unsigned char 
 13503 ;;  arg             4   10[COMRAM] unsigned long 
 13504 ;; Auto vars:     Size  Location     Type
 13505 ;;  cmd             1   14[COMRAM] unsigned char 
 13506 ;;  res             1   15[COMRAM] unsigned char 
 13507 ;; Return value:  Size  Location     Type
 13508 ;;                  1    wreg      unsigned char 
 13509 ;; Registers used:
 13510 ;;		wreg, status,2, status,0, cstack
 13511 ;; Tracked objects:
 13512 ;;		On entry : 0/0
 13513 ;;		On exit  : 0/0
 13514 ;;		Unchanged: 0/0
 13515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13516 ;;      Params:         4       0       0       0       0       0       0       0       0
 13517 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13518 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13519 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13520 ;;Total ram usage:        6 bytes
 13521 ;; Hardware stack levels used:    1
 13522 ;; Hardware stack levels required when called:    4
 13523 ;; This function calls:
 13524 ;;		___send_cmd
 13525 ;; This function is called by:
 13526 ;;		_disk_initialize
 13527 ;;		_disk_read
 13528 ;;		_disk_write
 13529 ;;		_disk_ioctl
 13530 ;; This function uses a non-reentrant model
 13531 ;;
 13532                           
 13533                           	psect	text44
 13534  00542E                     __ptext44:
 13535                           	opt callstack 0
 13536  00542E                     _send_cmd:
 13537                           	opt callstack 22
 13538                           
 13539                           ;incstack = 0
 13540                           ;send_cmd@cmd stored from wreg
 13541  00542E  6E0F               	movwf	send_cmd@cmd,c
 13542                           
 13543                           ;diskio.c: 232:  BYTE cmd,;diskio.c: 233:  DWORD arg;diskio.c: 235: {;diskio.c: 239:  BY
      +                          TE res;;diskio.c: 242:  if (cmd & 0x80) {
 13544  005430  AE0F               	btfss	send_cmd@cmd,7,c
 13545  005432  D012               	goto	l4215
 13546                           
 13547                           ;diskio.c: 243:   cmd &= 0x7F;
 13548  005434  9E0F               	bcf	send_cmd@cmd,7,c
 13549                           
 13550                           ;diskio.c: 245:   res = __send_cmd((55), 0);
 13551  005436  0E00               	movlw	0
 13552  005438  6E04               	movwf	___send_cmd@arg,c
 13553  00543A  0E00               	movlw	0
 13554  00543C  6E05               	movwf	___send_cmd@arg+1,c
 13555  00543E  0E00               	movlw	0
 13556  005440  6E06               	movwf	___send_cmd@arg+2,c
 13557  005442  0E00               	movlw	0
 13558  005444  6E07               	movwf	___send_cmd@arg+3,c
 13559  005446  0E37               	movlw	55
 13560  005448  EC05  F028         	call	___send_cmd
 13561  00544C  6E10               	movwf	send_cmd@res,c
 13562                           
 13563                           ;diskio.c: 249:   if (res > 1) return res;
 13564  00544E  0E01               	movlw	1
 13565  005450  6410               	cpfsgt	send_cmd@res,c
 13566  005452  D002               	goto	l4215
 13567  005454  5010               	movf	send_cmd@res,w,c
 13568  005456  0012               	return	
 13569  005458                     l4215:
 13570                           
 13571                           ;diskio.c: 253:  return __send_cmd(cmd, arg);
 13572  005458  C00B  F004         	movff	send_cmd@arg,___send_cmd@arg
 13573  00545C  C00C  F005         	movff	send_cmd@arg+1,___send_cmd@arg+1
 13574  005460  C00D  F006         	movff	send_cmd@arg+2,___send_cmd@arg+2
 13575  005464  C00E  F007         	movff	send_cmd@arg+3,___send_cmd@arg+3
 13576  005468  500F               	movf	send_cmd@cmd,w,c
 13577  00546A  EC05  F028         	call	___send_cmd
 13578  00546E  0012               	return		;funcret
 13579  005470                     __end_of_send_cmd:
 13580                           	opt callstack 0
 13581                           
 13582 ;; *************** function ___send_cmd *****************
 13583 ;; Defined at:
 13584 ;;		line 195 in file "diskio.c"
 13585 ;; Parameters:    Size  Location     Type
 13586 ;;  cmd             1    wreg     unsigned char 
 13587 ;;  arg             4    3[COMRAM] unsigned long 
 13588 ;; Auto vars:     Size  Location     Type
 13589 ;;  cmd             1    9[COMRAM] unsigned char 
 13590 ;;  n               1    8[COMRAM] unsigned char 
 13591 ;;  res             1    7[COMRAM] unsigned char 
 13592 ;; Return value:  Size  Location     Type
 13593 ;;                  1    wreg      unsigned char 
 13594 ;; Registers used:
 13595 ;;		wreg, status,2, status,0, cstack
 13596 ;; Tracked objects:
 13597 ;;		On entry : 0/0
 13598 ;;		On exit  : 0/0
 13599 ;;		Unchanged: 0/0
 13600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13601 ;;      Params:         4       0       0       0       0       0       0       0       0
 13602 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13603 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13604 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13605 ;;Total ram usage:        7 bytes
 13606 ;; Hardware stack levels used:    1
 13607 ;; Hardware stack levels required when called:    3
 13608 ;; This function calls:
 13609 ;;		_SPI1_Exchange8bit
 13610 ;;		_deselect
 13611 ;;		_select
 13612 ;; This function is called by:
 13613 ;;		_send_cmd
 13614 ;; This function uses a non-reentrant model
 13615 ;;
 13616                           
 13617                           	psect	text45
 13618  00500A                     __ptext45:
 13619                           	opt callstack 0
 13620  00500A                     ___send_cmd:
 13621                           	opt callstack 22
 13622                           
 13623                           ;incstack = 0
 13624                           ;___send_cmd@cmd stored from wreg
 13625  00500A  6E0A               	movwf	___send_cmd@cmd,c
 13626                           
 13627                           ;diskio.c: 196:  BYTE cmd,;diskio.c: 197:  DWORD arg;diskio.c: 199: {;diskio.c: 200:  BY
      +                          TE n, res;;diskio.c: 203:  if (cmd != (12)) {
 13628  00500C  0E0C               	movlw	12
 13629  00500E  180A               	xorwf	___send_cmd@cmd,w,c
 13630  005010  B4D8               	btfsc	status,2,c
 13631  005012  D009               	goto	l4135
 13632                           
 13633                           ;diskio.c: 204:   deselect();
 13634  005014  EC44  F02B         	call	_deselect	;wreg free
 13635                           
 13636                           ;diskio.c: 205:   if (!select()) return 0xFF;
 13637  005018  ECF0  F02A         	call	_select	;wreg free
 13638  00501C  0900               	iorlw	0
 13639  00501E  A4D8               	btfss	status,2,c
 13640  005020  D002               	goto	l4135
 13641  005022  0EFF               	movlw	255
 13642  005024  0012               	return	
 13643  005026                     l4135:
 13644                           
 13645                           ;diskio.c: 209:  SPI1_Exchange8bit(0x40 | cmd);
 13646  005026  500A               	movf	___send_cmd@cmd,w,c
 13647  005028  0940               	iorlw	64
 13648  00502A  EC11  F02B         	call	_SPI1_Exchange8bit
 13649                           
 13650                           ;diskio.c: 210:  SPI1_Exchange8bit((BYTE)(arg >> 24));
 13651  00502E  5007               	movf	___send_cmd@arg+3,w,c
 13652  005030  EC11  F02B         	call	_SPI1_Exchange8bit
 13653                           
 13654                           ;diskio.c: 211:  SPI1_Exchange8bit((BYTE)(arg >> 16));
 13655  005034  5006               	movf	___send_cmd@arg+2,w,c
 13656  005036  EC11  F02B         	call	_SPI1_Exchange8bit
 13657                           
 13658                           ;diskio.c: 212:  SPI1_Exchange8bit((BYTE)(arg >> 8));
 13659  00503A  5005               	movf	___send_cmd@arg+1,w,c
 13660  00503C  EC11  F02B         	call	_SPI1_Exchange8bit
 13661                           
 13662                           ;diskio.c: 213:  SPI1_Exchange8bit((BYTE)arg);
 13663  005040  5004               	movf	___send_cmd@arg,w,c
 13664  005042  EC11  F02B         	call	_SPI1_Exchange8bit
 13665                           
 13666                           ;diskio.c: 214:  n = 0x01;
 13667  005046  0E01               	movlw	1
 13668  005048  6E09               	movwf	___send_cmd@n,c
 13669                           
 13670                           ;diskio.c: 215:  if (cmd == (0)) n = 0x95;
 13671  00504A  500A               	movf	___send_cmd@cmd,w,c
 13672  00504C  A4D8               	btfss	status,2,c
 13673  00504E  D002               	goto	l4151
 13674  005050  0E95               	movlw	149
 13675  005052  6E09               	movwf	___send_cmd@n,c
 13676  005054                     l4151:
 13677                           
 13678                           ;diskio.c: 216:  if (cmd == (8)) n = 0x87;
 13679  005054  0E08               	movlw	8
 13680  005056  180A               	xorwf	___send_cmd@cmd,w,c
 13681  005058  A4D8               	btfss	status,2,c
 13682  00505A  D002               	goto	l4155
 13683  00505C  0E87               	movlw	135
 13684  00505E  6E09               	movwf	___send_cmd@n,c
 13685  005060                     l4155:
 13686                           
 13687                           ;diskio.c: 217:  SPI1_Exchange8bit(n);
 13688  005060  5009               	movf	___send_cmd@n,w,c
 13689  005062  EC11  F02B         	call	_SPI1_Exchange8bit
 13690                           
 13691                           ;diskio.c: 220:  if (cmd == (12)) SPI1_Exchange8bit(0xFF);
 13692  005066  0E0C               	movlw	12
 13693  005068  180A               	xorwf	___send_cmd@cmd,w,c
 13694  00506A  A4D8               	btfss	status,2,c
 13695  00506C  D003               	goto	l4161
 13696  00506E  0EFF               	movlw	255
 13697  005070  EC11  F02B         	call	_SPI1_Exchange8bit
 13698  005074                     l4161:
 13699                           
 13700                           ;diskio.c: 221:  n = 10;
 13701  005074  0E0A               	movlw	10
 13702  005076  6E09               	movwf	___send_cmd@n,c
 13703  005078                     l4163:
 13704                           
 13705                           ;diskio.c: 223:   res = SPI1_Exchange8bit(0xFF);
 13706  005078  0EFF               	movlw	255
 13707  00507A  EC11  F02B         	call	_SPI1_Exchange8bit
 13708  00507E  6E08               	movwf	___send_cmd@res,c
 13709  005080  AE08               	btfss	___send_cmd@res,7,c
 13710  005082  D002               	goto	l4169
 13711  005084  2E09               	decfsz	___send_cmd@n,f,c
 13712  005086  D7F8               	goto	l4163
 13713  005088                     l4169:
 13714                           
 13715                           ;diskio.c: 226:  return res;
 13716  005088  5008               	movf	___send_cmd@res,w,c
 13717  00508A  0012               	return		;funcret
 13718  00508C                     __end_of___send_cmd:
 13719                           	opt callstack 0
 13720                           
 13721 ;; *************** function _select *****************
 13722 ;; Defined at:
 13723 ;;		line 106 in file "diskio.c"
 13724 ;; Parameters:    Size  Location     Type
 13725 ;;		None
 13726 ;; Auto vars:     Size  Location     Type
 13727 ;;		None
 13728 ;; Return value:  Size  Location     Type
 13729 ;;                  1    wreg      unsigned char 
 13730 ;; Registers used:
 13731 ;;		wreg, status,2, status,0, cstack
 13732 ;; Tracked objects:
 13733 ;;		On entry : 0/0
 13734 ;;		On exit  : 0/0
 13735 ;;		Unchanged: 0/0
 13736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13737 ;;      Params:         0       0       0       0       0       0       0       0       0
 13738 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13739 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13740 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13741 ;;Total ram usage:        0 bytes
 13742 ;; Hardware stack levels used:    1
 13743 ;; Hardware stack levels required when called:    2
 13744 ;; This function calls:
 13745 ;;		_SPI1_Exchange8bit
 13746 ;;		_deselect
 13747 ;;		_wait_ready
 13748 ;; This function is called by:
 13749 ;;		___send_cmd
 13750 ;;		_disk_ioctl
 13751 ;; This function uses a non-reentrant model
 13752 ;;
 13753                           
 13754                           	psect	text46
 13755  0055E0                     __ptext46:
 13756                           	opt callstack 0
 13757  0055E0                     _select:
 13758                           	opt callstack 22
 13759                           
 13760                           ;incstack = 0
 13761                           ;diskio.c: 108:  do { LATBbits.LATB2 = 0; } while(0);
 13762  0055E0  948A               	bcf	3978,2,c	;volatile
 13763                           
 13764                           ;diskio.c: 109:  SPI1_Exchange8bit(0xFF);
 13765  0055E2  0EFF               	movlw	255
 13766  0055E4  EC11  F02B         	call	_SPI1_Exchange8bit
 13767                           
 13768                           ;diskio.c: 110:  if (wait_ready()) return 1;
 13769  0055E8  EC38  F02A         	call	_wait_ready	;wreg free
 13770  0055EC  0900               	iorlw	0
 13771  0055EE  B4D8               	btfsc	status,2,c
 13772  0055F0  D002               	goto	l4119
 13773  0055F2  0E01               	movlw	1
 13774  0055F4  0012               	return	
 13775  0055F6                     l4119:
 13776                           
 13777                           ;diskio.c: 112:  deselect();
 13778  0055F6  EC44  F02B         	call	_deselect	;wreg free
 13779                           
 13780                           ;diskio.c: 113:  return 0;
 13781  0055FA  0E00               	movlw	0
 13782  0055FC  0012               	return		;funcret
 13783  0055FE                     __end_of_select:
 13784                           	opt callstack 0
 13785                           
 13786 ;; *************** function _wait_ready *****************
 13787 ;; Defined at:
 13788 ;;		line 74 in file "diskio.c"
 13789 ;; Parameters:    Size  Location     Type
 13790 ;;		None
 13791 ;; Auto vars:     Size  Location     Type
 13792 ;;  tmr             2    1[COMRAM] unsigned short 
 13793 ;; Return value:  Size  Location     Type
 13794 ;;                  1    wreg      unsigned char 
 13795 ;; Registers used:
 13796 ;;		wreg, status,2, status,0, cstack
 13797 ;; Tracked objects:
 13798 ;;		On entry : 0/0
 13799 ;;		On exit  : 0/0
 13800 ;;		Unchanged: 0/0
 13801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13802 ;;      Params:         0       0       0       0       0       0       0       0       0
 13803 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13804 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13805 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13806 ;;Total ram usage:        2 bytes
 13807 ;; Hardware stack levels used:    1
 13808 ;; Hardware stack levels required when called:    1
 13809 ;; This function calls:
 13810 ;;		_SPI1_Exchange8bit
 13811 ;; This function is called by:
 13812 ;;		_select
 13813 ;;		_xmit_datablock
 13814 ;; This function uses a non-reentrant model
 13815 ;;
 13816                           
 13817                           	psect	text47
 13818  005470                     __ptext47:
 13819                           	opt callstack 0
 13820  005470                     _wait_ready:
 13821                           	opt callstack 24
 13822                           
 13823                           ;diskio.c: 76:  UINT tmr;;diskio.c: 78:  for (tmr = 5000; tmr; tmr--) {
 13824                           
 13825                           ;incstack = 0
 13826  005470  0E13               	movlw	19
 13827  005472  6E03               	movwf	wait_ready@tmr+1,c
 13828  005474  0E88               	movlw	136
 13829  005476  6E02               	movwf	wait_ready@tmr,c
 13830  005478  D00D               	goto	l17
 13831  00547A                     l4097:
 13832                           
 13833                           ;diskio.c: 79:   if (SPI1_Exchange8bit(0xFF) == 0xFF) break;
 13834  00547A  0EFF               	movlw	255
 13835  00547C  EC11  F02B         	call	_SPI1_Exchange8bit
 13836  005480  0AFF               	xorlw	255
 13837  005482  B4D8               	btfsc	status,2,c
 13838  005484  D00B               	goto	u4460
 13839                           
 13840                           ;diskio.c: 80:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 13841  005486  0E42               	movlw	66
 13842  005488                     u8897:
 13843  005488  2EE8               	decfsz	wreg,f,c
 13844  00548A  D7FE               	bra	u8897
 13845  00548C  D000               	nop2	
 13846                           
 13847                           ;diskio.c: 81:  }
 13848  00548E  0602               	decf	wait_ready@tmr,f,c
 13849  005490  A0D8               	btfss	status,0,c
 13850  005492  0603               	decf	wait_ready@tmr+1,f,c
 13851  005494                     l17:
 13852  005494  5002               	movf	wait_ready@tmr,w,c
 13853  005496  1003               	iorwf	wait_ready@tmr+1,w,c
 13854  005498  A4D8               	btfss	status,2,c
 13855  00549A  D7EF               	goto	l4097
 13856  00549C                     u4460:
 13857                           
 13858                           ;diskio.c: 83:  return tmr ? 1 : 0;
 13859  00549C  5002               	movf	wait_ready@tmr,w,c
 13860  00549E  1003               	iorwf	wait_ready@tmr+1,w,c
 13861  0054A0  B4D8               	btfsc	status,2,c
 13862  0054A2  D002               	goto	u4470
 13863  0054A4  0E01               	movlw	1
 13864  0054A6  0012               	return	
 13865  0054A8                     u4470:
 13866  0054A8  0E00               	movlw	0
 13867  0054AA  0012               	return		;funcret
 13868  0054AC                     __end_of_wait_ready:
 13869                           	opt callstack 0
 13870                           
 13871 ;; *************** function _deselect *****************
 13872 ;; Defined at:
 13873 ;;		line 93 in file "diskio.c"
 13874 ;; Parameters:    Size  Location     Type
 13875 ;;		None
 13876 ;; Auto vars:     Size  Location     Type
 13877 ;;		None
 13878 ;; Return value:  Size  Location     Type
 13879 ;;                  1    wreg      void 
 13880 ;; Registers used:
 13881 ;;		wreg, status,2, cstack
 13882 ;; Tracked objects:
 13883 ;;		On entry : 0/0
 13884 ;;		On exit  : 0/0
 13885 ;;		Unchanged: 0/0
 13886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13887 ;;      Params:         0       0       0       0       0       0       0       0       0
 13888 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13889 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13890 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13891 ;;Total ram usage:        0 bytes
 13892 ;; Hardware stack levels used:    1
 13893 ;; Hardware stack levels required when called:    1
 13894 ;; This function calls:
 13895 ;;		_SPI1_Exchange8bit
 13896 ;; This function is called by:
 13897 ;;		_select
 13898 ;;		___send_cmd
 13899 ;;		_disk_initialize
 13900 ;;		_disk_read
 13901 ;;		_disk_write
 13902 ;;		_disk_ioctl
 13903 ;; This function uses a non-reentrant model
 13904 ;;
 13905                           
 13906                           	psect	text48
 13907  005688                     __ptext48:
 13908                           	opt callstack 0
 13909  005688                     _deselect:
 13910                           	opt callstack 22
 13911                           
 13912                           ;incstack = 0
 13913                           ;diskio.c: 95:  do { LATBbits.LATB2 = 1; } while(0);
 13914  005688  848A               	bsf	3978,2,c	;volatile
 13915                           
 13916                           ;diskio.c: 96:  SPI1_Exchange8bit(0xFF);
 13917  00568A  0EFF               	movlw	255
 13918  00568C  EC11  F02B         	call	_SPI1_Exchange8bit
 13919  005690  0012               	return		;funcret
 13920  005692                     __end_of_deselect:
 13921                           	opt callstack 0
 13922                           
 13923 ;; *************** function _rcvr_datablock *****************
 13924 ;; Defined at:
 13925 ;;		line 123 in file "diskio.c"
 13926 ;; Parameters:    Size  Location     Type
 13927 ;;  buff            2    1[COMRAM] PTR unsigned char 
 13928 ;;		 -> FatFs(558), disk_ioctl@csd(16), NULL(0), 
 13929 ;;  btr             2    3[COMRAM] unsigned short 
 13930 ;; Auto vars:     Size  Location     Type
 13931 ;;  tmr             2    5[COMRAM] unsigned short 
 13932 ;;  token           1    7[COMRAM] unsigned char 
 13933 ;; Return value:  Size  Location     Type
 13934 ;;                  1    wreg      unsigned char 
 13935 ;; Registers used:
 13936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13937 ;; Tracked objects:
 13938 ;;		On entry : 0/0
 13939 ;;		On exit  : 0/0
 13940 ;;		Unchanged: 0/0
 13941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13942 ;;      Params:         4       0       0       0       0       0       0       0       0
 13943 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13944 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13945 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13946 ;;Total ram usage:        7 bytes
 13947 ;; Hardware stack levels used:    1
 13948 ;; Hardware stack levels required when called:    1
 13949 ;; This function calls:
 13950 ;;		_SPI1_Exchange8bit
 13951 ;; This function is called by:
 13952 ;;		_disk_read
 13953 ;;		_disk_ioctl
 13954 ;; This function uses a non-reentrant model
 13955 ;;
 13956                           
 13957                           	psect	text49
 13958  005202                     __ptext49:
 13959                           	opt callstack 0
 13960  005202                     _rcvr_datablock:
 13961                           	opt callstack 25
 13962                           
 13963                           ;diskio.c: 124:  BYTE *buff,;diskio.c: 125:  UINT btr;diskio.c: 127: {;diskio.c: 128:  B
      +                          YTE token;;diskio.c: 129:  UINT tmr;;diskio.c: 132:  for (tmr = 2000; tmr; tmr--) {
 13964                           
 13965                           ;incstack = 0
 13966  005202  0E07               	movlw	7
 13967  005204  6E07               	movwf	rcvr_datablock@tmr+1,c
 13968  005206  0ED0               	movlw	208
 13969  005208  6E06               	movwf	rcvr_datablock@tmr,c
 13970  00520A  D00E               	goto	l35
 13971  00520C                     l4221:
 13972                           
 13973                           ;diskio.c: 133:   token = SPI1_Exchange8bit(0xFF);
 13974  00520C  0EFF               	movlw	255
 13975  00520E  EC11  F02B         	call	_SPI1_Exchange8bit
 13976  005212  6E08               	movwf	rcvr_datablock@token,c
 13977                           
 13978                           ;diskio.c: 134:   if (token != 0xFF) break;
 13979  005214  2808               	incf	rcvr_datablock@token,w,c
 13980  005216  A4D8               	btfss	status,2,c
 13981  005218  D00B               	goto	u4630
 13982                           
 13983                           ;diskio.c: 135:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 13984  00521A  0E42               	movlw	66
 13985  00521C                     u8907:
 13986  00521C  2EE8               	decfsz	wreg,f,c
 13987  00521E  D7FE               	bra	u8907
 13988  005220  D000               	nop2	
 13989                           
 13990                           ;diskio.c: 136:  }
 13991  005222  0606               	decf	rcvr_datablock@tmr,f,c
 13992  005224  A0D8               	btfss	status,0,c
 13993  005226  0607               	decf	rcvr_datablock@tmr+1,f,c
 13994  005228                     l35:
 13995  005228  5006               	movf	rcvr_datablock@tmr,w,c
 13996  00522A  1007               	iorwf	rcvr_datablock@tmr+1,w,c
 13997  00522C  A4D8               	btfss	status,2,c
 13998  00522E  D7EE               	goto	l4221
 13999  005230                     u4630:
 14000                           
 14001                           ;diskio.c: 137:  if (token != 0xFE) return 0;
 14002  005230  0EFE               	movlw	254
 14003  005232  1808               	xorwf	rcvr_datablock@token,w,c
 14004  005234  B4D8               	btfsc	status,2,c
 14005  005236  D002               	goto	l4237
 14006  005238  0E00               	movlw	0
 14007  00523A  0012               	return	
 14008  00523C                     l4237:
 14009                           
 14010                           ;diskio.c: 140:   *buff++ = SPI1_Exchange8bit(0xFF);
 14011  00523C  0EFF               	movlw	255
 14012  00523E  EC11  F02B         	call	_SPI1_Exchange8bit
 14013  005242  C002  FFD9         	movff	rcvr_datablock@buff,fsr2l
 14014  005246  C003  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 14015  00524A  6EDF               	movwf	indf2,c
 14016  00524C  4A02               	infsnz	rcvr_datablock@buff,f,c
 14017  00524E  2A03               	incf	rcvr_datablock@buff+1,f,c
 14018  005250  0604               	decf	rcvr_datablock@btr,f,c
 14019  005252  A0D8               	btfss	status,0,c
 14020  005254  0605               	decf	rcvr_datablock@btr+1,f,c
 14021  005256  5004               	movf	rcvr_datablock@btr,w,c
 14022  005258  1005               	iorwf	rcvr_datablock@btr+1,w,c
 14023  00525A  A4D8               	btfss	status,2,c
 14024  00525C  D7EF               	goto	l4237
 14025                           
 14026                           ;diskio.c: 142:  SPI1_Exchange8bit(0xFF);
 14027  00525E  0EFF               	movlw	255
 14028  005260  EC11  F02B         	call	_SPI1_Exchange8bit
 14029                           
 14030                           ;diskio.c: 143:  SPI1_Exchange8bit(0xFF);
 14031  005264  0EFF               	movlw	255
 14032  005266  EC11  F02B         	call	_SPI1_Exchange8bit
 14033                           
 14034                           ;diskio.c: 145:  return 1;
 14035  00526A  0E01               	movlw	1
 14036  00526C  0012               	return		;funcret
 14037  00526E                     __end_of_rcvr_datablock:
 14038                           	opt callstack 0
 14039                           
 14040 ;; *************** function _SPI1_Exchange8bit *****************
 14041 ;; Defined at:
 14042 ;;		line 90 in file "mcc_generated_files/spi1.c"
 14043 ;; Parameters:    Size  Location     Type
 14044 ;;  data            1    wreg     unsigned char 
 14045 ;; Auto vars:     Size  Location     Type
 14046 ;;  data            1    0[COMRAM] unsigned char 
 14047 ;; Return value:  Size  Location     Type
 14048 ;;                  1    wreg      unsigned char 
 14049 ;; Registers used:
 14050 ;;		wreg, status,2
 14051 ;; Tracked objects:
 14052 ;;		On entry : 0/0
 14053 ;;		On exit  : 0/0
 14054 ;;		Unchanged: 0/0
 14055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14056 ;;      Params:         0       0       0       0       0       0       0       0       0
 14057 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14058 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14059 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14060 ;;Total ram usage:        1 bytes
 14061 ;; Hardware stack levels used:    1
 14062 ;; This function calls:
 14063 ;;		Nothing
 14064 ;; This function is called by:
 14065 ;;		_wait_ready
 14066 ;;		_deselect
 14067 ;;		_select
 14068 ;;		_rcvr_datablock
 14069 ;;		_xmit_datablock
 14070 ;;		___send_cmd
 14071 ;;		_disk_initialize
 14072 ;;		_disk_ioctl
 14073 ;;		_SPI1_Exchange8bitBuffer
 14074 ;; This function uses a non-reentrant model
 14075 ;;
 14076                           
 14077                           	psect	text50
 14078  005622                     __ptext50:
 14079                           	opt callstack 0
 14080  005622                     _SPI1_Exchange8bit:
 14081                           	opt callstack 24
 14082                           
 14083                           ;incstack = 0
 14084                           ;SPI1_Exchange8bit@data stored from wreg
 14085  005622  6E01               	movwf	SPI1_Exchange8bit@data,c
 14086                           
 14087                           ;mcc_generated_files/spi1.c: 90: uint8_t SPI1_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi1.c: 91: {;mcc_generated_files/spi1.c: 93:     SSP1CON1bits.WCOL = 0;
 14088  005624  9EC6               	bcf	4038,7,c	;volatile
 14089                           
 14090                           ;mcc_generated_files/spi1.c: 95:     SSP1BUF = data;
 14091  005626  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
 14092  00562A                     l748:
 14093                           
 14094                           ;mcc_generated_files/spi1.c: 97:     while(SSP1STATbits.BF == 0x0)
 14095  00562A  A0C7               	btfss	4039,0,c	;volatile
 14096  00562C  D7FE               	goto	l748
 14097                           
 14098                           ;mcc_generated_files/spi1.c: 101:     return (SSP1BUF);
 14099  00562E  50C9               	movf	4041,w,c	;volatile
 14100  005630  0012               	return		;funcret
 14101  005632                     __end_of_SPI1_Exchange8bit:
 14102                           	opt callstack 0
 14103                           
 14104 ;; *************** function ___delay_sec *****************
 14105 ;; Defined at:
 14106 ;;		line 107 in file "Main.c"
 14107 ;; Parameters:    Size  Location     Type
 14108 ;;  sec             1    wreg     unsigned char 
 14109 ;; Auto vars:     Size  Location     Type
 14110 ;;  sec             1    3[COMRAM] unsigned char 
 14111 ;;  i               1    4[COMRAM] unsigned char 
 14112 ;; Return value:  Size  Location     Type
 14113 ;;                  1    wreg      void 
 14114 ;; Registers used:
 14115 ;;		wreg, status,2, status,0, prodl, prodh
 14116 ;; Tracked objects:
 14117 ;;		On entry : 0/0
 14118 ;;		On exit  : 0/0
 14119 ;;		Unchanged: 0/0
 14120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14121 ;;      Params:         0       0       0       0       0       0       0       0       0
 14122 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14123 ;;      Temps:          3       0       0       0       0       0       0       0       0
 14124 ;;      Totals:         5       0       0       0       0       0       0       0       0
 14125 ;;Total ram usage:        5 bytes
 14126 ;; Hardware stack levels used:    1
 14127 ;; This function calls:
 14128 ;;		Nothing
 14129 ;; This function is called by:
 14130 ;;		_guardar
 14131 ;; This function uses a non-reentrant model
 14132 ;;
 14133                           
 14134                           	psect	text51
 14135  0054E6                     __ptext51:
 14136                           	opt callstack 0
 14137  0054E6                     ___delay_sec:
 14138                           	opt callstack 29
 14139                           
 14140                           ;incstack = 0
 14141                           ;___delay_sec@sec stored from wreg
 14142  0054E6  6E04               	movwf	___delay_sec@sec,c
 14143                           
 14144                           ;Main.c: 108:     for(char i=0;i<=(50*sec);i++) {
 14145  0054E8  0E00               	movlw	0
 14146  0054EA  6E05               	movwf	___delay_sec@i,c
 14147  0054EC  D008               	goto	l6317
 14148  0054EE                     l6313:
 14149                           
 14150                           ;Main.c: 109:         _delay((unsigned long)((20)*(8000000/4000.0)));
 14151  0054EE  0E34               	movlw	52
 14152  0054F0  6E01               	movwf	??___delay_sec& (0+255),c
 14153  0054F2  0EF2               	movlw	242
 14154  0054F4                     u8917:
 14155  0054F4  2EE8               	decfsz	wreg,f,c
 14156  0054F6  D7FE               	bra	u8917
 14157  0054F8  2E01               	decfsz	??___delay_sec& (0+255),f,c
 14158  0054FA  D7FC               	bra	u8917
 14159                           
 14160                           ;Main.c: 110:     }
 14161  0054FC  2A05               	incf	___delay_sec@i,f,c
 14162  0054FE                     l6317:
 14163  0054FE  5005               	movf	___delay_sec@i,w,c
 14164  005500  6E01               	movwf	??___delay_sec& (0+255),c
 14165  005502  6A02               	clrf	(??___delay_sec+1)& (0+255),c
 14166  005504  5004               	movf	___delay_sec@sec,w,c
 14167  005506  0D32               	mullw	50
 14168  005508  5001               	movf	??___delay_sec,w,c
 14169  00550A  5CF3               	subwf	prodl,w,c
 14170  00550C  50F4               	movf	prodh,w,c
 14171  00550E  0A80               	xorlw	128
 14172  005510  6E03               	movwf	(??___delay_sec+2)& (0+255),c
 14173  005512  5002               	movf	??___delay_sec+1,w,c
 14174  005514  0A80               	xorlw	128
 14175  005516  5803               	subwfb	(??___delay_sec+2)& (0+255),w,c
 14176  005518  A0D8               	btfss	status,0,c
 14177  00551A  0012               	return	
 14178  00551C  D7E8               	goto	l6313
 14179  00551E                     __end_of___delay_sec:
 14180                           	opt callstack 0
 14181                           
 14182 ;; *************** function _SYSTEM_Initialize *****************
 14183 ;; Defined at:
 14184 ;;		line 116 in file "mcc_generated_files/mcc.c"
 14185 ;; Parameters:    Size  Location     Type
 14186 ;;		None
 14187 ;; Auto vars:     Size  Location     Type
 14188 ;;		None
 14189 ;; Return value:  Size  Location     Type
 14190 ;;                  1    wreg      void 
 14191 ;; Registers used:
 14192 ;;		wreg, status,2, cstack
 14193 ;; Tracked objects:
 14194 ;;		On entry : 0/0
 14195 ;;		On exit  : 0/0
 14196 ;;		Unchanged: 0/0
 14197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14198 ;;      Params:         0       0       0       0       0       0       0       0       0
 14199 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14200 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14201 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14202 ;;Total ram usage:        0 bytes
 14203 ;; Hardware stack levels used:    1
 14204 ;; Hardware stack levels required when called:    1
 14205 ;; This function calls:
 14206 ;;		_OSCILLATOR_Initialize
 14207 ;;		_PIN_MANAGER_Initialize
 14208 ;;		_SPI1_Initialize
 14209 ;; This function is called by:
 14210 ;;		_guardar
 14211 ;; This function uses a non-reentrant model
 14212 ;;
 14213                           
 14214                           	psect	text52
 14215  005660                     __ptext52:
 14216                           	opt callstack 0
 14217  005660                     _SYSTEM_Initialize:
 14218                           	opt callstack 28
 14219                           
 14220                           ;mcc_generated_files/mcc.c: 119:     PIN_MANAGER_Initialize();
 14221                           
 14222                           ;incstack = 0
 14223  005660  ECE0  F02A         	call	_PIN_MANAGER_Initialize	;wreg free
 14224                           
 14225                           ;mcc_generated_files/mcc.c: 120:     OSCILLATOR_Initialize();
 14226  005664  EC08  F02B         	call	_OSCILLATOR_Initialize	;wreg free
 14227                           
 14228                           ;mcc_generated_files/mcc.c: 121:     SPI1_Initialize();
 14229  005668  EC37  F02B         	call	_SPI1_Initialize	;wreg free
 14230  00566C  0012               	return		;funcret
 14231  00566E                     __end_of_SYSTEM_Initialize:
 14232                           	opt callstack 0
 14233                           
 14234 ;; *************** function _SPI1_Initialize *****************
 14235 ;; Defined at:
 14236 ;;		line 63 in file "mcc_generated_files/spi1.c"
 14237 ;; Parameters:    Size  Location     Type
 14238 ;;		None
 14239 ;; Auto vars:     Size  Location     Type
 14240 ;;		None
 14241 ;; Return value:  Size  Location     Type
 14242 ;;                  1    wreg      void 
 14243 ;; Registers used:
 14244 ;;		wreg, status,2
 14245 ;; Tracked objects:
 14246 ;;		On entry : 0/0
 14247 ;;		On exit  : 0/0
 14248 ;;		Unchanged: 0/0
 14249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14250 ;;      Params:         0       0       0       0       0       0       0       0       0
 14251 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14252 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14253 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14254 ;;Total ram usage:        0 bytes
 14255 ;; Hardware stack levels used:    1
 14256 ;; This function calls:
 14257 ;;		Nothing
 14258 ;; This function is called by:
 14259 ;;		_disk_initialize
 14260 ;;		_SYSTEM_Initialize
 14261 ;; This function uses a non-reentrant model
 14262 ;;
 14263                           
 14264                           	psect	text53
 14265  00566E                     __ptext53:
 14266                           	opt callstack 0
 14267  00566E                     _SPI1_Initialize:
 14268                           	opt callstack 26
 14269                           
 14270                           ;mcc_generated_files/spi1.c: 68:     SSP1STAT = 0x40;
 14271                           
 14272                           ;incstack = 0
 14273  00566E  0E40               	movlw	64
 14274  005670  6EC7               	movwf	4039,c	;volatile
 14275                           
 14276                           ;mcc_generated_files/spi1.c: 71:     SSP1CON1 = 0x22;
 14277  005672  0E22               	movlw	34
 14278  005674  6EC6               	movwf	4038,c	;volatile
 14279                           
 14280                           ;mcc_generated_files/spi1.c: 74:     SSP1ADD = 0x00;
 14281  005676  0E00               	movlw	0
 14282  005678  6EC8               	movwf	4040,c	;volatile
 14283  00567A  0012               	return		;funcret
 14284  00567C                     __end_of_SPI1_Initialize:
 14285                           	opt callstack 0
 14286                           
 14287 ;; *************** function _PIN_MANAGER_Initialize *****************
 14288 ;; Defined at:
 14289 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 14290 ;; Parameters:    Size  Location     Type
 14291 ;;		None
 14292 ;; Auto vars:     Size  Location     Type
 14293 ;;		None
 14294 ;; Return value:  Size  Location     Type
 14295 ;;                  1    wreg      void 
 14296 ;; Registers used:
 14297 ;;		wreg, status,2
 14298 ;; Tracked objects:
 14299 ;;		On entry : 0/0
 14300 ;;		On exit  : 0/0
 14301 ;;		Unchanged: 0/0
 14302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14303 ;;      Params:         0       0       0       0       0       0       0       0       0
 14304 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14305 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14306 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14307 ;;Total ram usage:        0 bytes
 14308 ;; Hardware stack levels used:    1
 14309 ;; This function calls:
 14310 ;;		Nothing
 14311 ;; This function is called by:
 14312 ;;		_SYSTEM_Initialize
 14313 ;; This function uses a non-reentrant model
 14314 ;;
 14315                           
 14316                           	psect	text54
 14317  0055C0                     __ptext54:
 14318                           	opt callstack 0
 14319  0055C0                     _PIN_MANAGER_Initialize:
 14320                           	opt callstack 28
 14321                           
 14322                           ;mcc_generated_files/pin_manager.c: 59:     LATB = 0x04;
 14323                           
 14324                           ;incstack = 0
 14325  0055C0  0E04               	movlw	4
 14326  0055C2  6E8A               	movwf	3978,c	;volatile
 14327                           
 14328                           ;mcc_generated_files/pin_manager.c: 60:     LATC = 0x00;
 14329  0055C4  0E00               	movlw	0
 14330  0055C6  6E8B               	movwf	3979,c	;volatile
 14331                           
 14332                           ;mcc_generated_files/pin_manager.c: 67:     TRISB = 0xF1;
 14333  0055C8  0EF1               	movlw	241
 14334  0055CA  6E93               	movwf	3987,c	;volatile
 14335                           
 14336                           ;mcc_generated_files/pin_manager.c: 68:     TRISC = 0xC7;
 14337  0055CC  0EC7               	movlw	199
 14338  0055CE  6E94               	movwf	3988,c	;volatile
 14339                           
 14340                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xC4;
 14341  0055D0  0EC4               	movlw	196
 14342  0055D2  010F               	movlb	15	; () banked
 14343  0055D4  6F5D               	movwf	93,b	;volatile
 14344                           
 14345                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
 14346  0055D6  0E30               	movlw	48
 14347  0055D8  6F5C               	movwf	92,b	;volatile
 14348                           
 14349                           ; BSR set to: 15
 14350                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0xFF;
 14351  0055DA  6885               	setf	3973,c	;volatile
 14352                           
 14353                           ; BSR set to: 15
 14354                           ;mcc_generated_files/pin_manager.c: 84:     INTCON2bits.nRBPU = 0;
 14355  0055DC  9EF1               	bcf	4081,7,c	;volatile
 14356                           
 14357                           ; BSR set to: 15
 14358  0055DE  0012               	return		;funcret
 14359  0055E0                     __end_of_PIN_MANAGER_Initialize:
 14360                           	opt callstack 0
 14361                           
 14362 ;; *************** function _OSCILLATOR_Initialize *****************
 14363 ;; Defined at:
 14364 ;;		line 124 in file "mcc_generated_files/mcc.c"
 14365 ;; Parameters:    Size  Location     Type
 14366 ;;		None
 14367 ;; Auto vars:     Size  Location     Type
 14368 ;;		None
 14369 ;; Return value:  Size  Location     Type
 14370 ;;                  1    wreg      void 
 14371 ;; Registers used:
 14372 ;;		wreg, status,2
 14373 ;; Tracked objects:
 14374 ;;		On entry : 0/0
 14375 ;;		On exit  : 0/0
 14376 ;;		Unchanged: 0/0
 14377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14378 ;;      Params:         0       0       0       0       0       0       0       0       0
 14379 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14380 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14381 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14382 ;;Total ram usage:        0 bytes
 14383 ;; Hardware stack levels used:    1
 14384 ;; This function calls:
 14385 ;;		Nothing
 14386 ;; This function is called by:
 14387 ;;		_SYSTEM_Initialize
 14388 ;; This function uses a non-reentrant model
 14389 ;;
 14390                           
 14391                           	psect	text55
 14392  005610                     __ptext55:
 14393                           	opt callstack 0
 14394  005610                     _OSCILLATOR_Initialize:
 14395                           	opt callstack 28
 14396                           
 14397                           ;mcc_generated_files/mcc.c: 127:     OSCCON = 0x60;
 14398                           
 14399                           ; BSR set to: 15
 14400                           ;incstack = 0
 14401  005610  0E60               	movlw	96
 14402  005612  6ED3               	movwf	4051,c	;volatile
 14403                           
 14404                           ;mcc_generated_files/mcc.c: 129:     OSCCON2 = 0x00;
 14405  005614  0E00               	movlw	0
 14406  005616  6ED2               	movwf	4050,c	;volatile
 14407                           
 14408                           ;mcc_generated_files/mcc.c: 131:     OSCTUNE = 0x00;
 14409  005618  0E00               	movlw	0
 14410  00561A  6E9B               	movwf	3995,c	;volatile
 14411                           
 14412                           ;mcc_generated_files/mcc.c: 133:     ACTCON = 0x00;
 14413  00561C  0E00               	movlw	0
 14414  00561E  6EB5               	movwf	4021,c	;volatile
 14415  005620  0012               	return		;funcret
 14416  005622                     __end_of_OSCILLATOR_Initialize:
 14417                           	opt callstack 0
 14418                           
 14419 ;; *************** function _Error *****************
 14420 ;; Defined at:
 14421 ;;		line 13 in file "./Errores.h"
 14422 ;; Parameters:    Size  Location     Type
 14423 ;;  a               2    0[COMRAM] int 
 14424 ;; Auto vars:     Size  Location     Type
 14425 ;;  v_seg          10    3[COMRAM] unsigned char [10]
 14426 ;; Return value:  Size  Location     Type
 14427 ;;                  1    wreg      void 
 14428 ;; Registers used:
 14429 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14430 ;; Tracked objects:
 14431 ;;		On entry : 0/0
 14432 ;;		On exit  : 0/0
 14433 ;;		Unchanged: 0/0
 14434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14435 ;;      Params:         2       0       0       0       0       0       0       0       0
 14436 ;;      Locals:        10       0       0       0       0       0       0       0       0
 14437 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14438 ;;      Totals:        13       0       0       0       0       0       0       0       0
 14439 ;;Total ram usage:       13 bytes
 14440 ;; Hardware stack levels used:    1
 14441 ;; This function calls:
 14442 ;;		Nothing
 14443 ;; This function is called by:
 14444 ;;		_guardar
 14445 ;; This function uses a non-reentrant model
 14446 ;;
 14447                           
 14448                           	psect	text56
 14449  004C1A                     __ptext56:
 14450                           	opt callstack 0
 14451  004C1A                     _Error:
 14452                           	opt callstack 29
 14453                           
 14454                           ;./Errores.h: 14:     LATD = 0x00;
 14455                           
 14456                           ;incstack = 0
 14457  004C1A  0E00               	movlw	0
 14458  004C1C  6E8C               	movwf	3980,c	;volatile
 14459                           
 14460                           ;./Errores.h: 15:     TRISD = 0x00;
 14461  004C1E  0E00               	movlw	0
 14462  004C20  6E95               	movwf	3989,c	;volatile
 14463                           
 14464                           ;./Errores.h: 16:     ANSELD = 0x00;
 14465  004C22  0E00               	movlw	0
 14466  004C24  010F               	movlb	15	; () banked
 14467  004C26  6F5E               	movwf	94,b	;volatile
 14468                           
 14469                           ;./Errores.h: 17:     LATE = 0x00;
 14470  004C28  0E00               	movlw	0
 14471  004C2A  6E8D               	movwf	3981,c	;volatile
 14472                           
 14473                           ;./Errores.h: 18:     TRISE = 0x00;
 14474  004C2C  0E00               	movlw	0
 14475  004C2E  6E96               	movwf	3990,c	;volatile
 14476                           
 14477                           ;./Errores.h: 19:     ANSELE = 0x00;
 14478  004C30  0E00               	movlw	0
 14479  004C32  6F5F               	movwf	95,b	;volatile
 14480                           
 14481                           ; BSR set to: 15
 14482                           ;./Errores.h: 21:     unsigned char v_seg[10]={0x7E,0x30,0x6D,0x79,0x33,0x5B,0x5F,0x70,0
      +                          x7F,0x73};
 14483  004C34  EE20  F0EC         	lfsr	2,Error@F5051
 14484  004C38  EE10  F004         	lfsr	1,Error@v_seg
 14485  004C3C  0E09               	movlw	9
 14486  004C3E                     u8471:
 14487  004C3E  CFDB FFE3          	movff	plusw2,plusw1
 14488  004C42  06E8               	decf	wreg,f,c
 14489  004C44  E2FC               	bc	u8471
 14490                           
 14491                           ; BSR set to: 15
 14492                           ;./Errores.h: 22:     if(a != 33 && a != 55){
 14493  004C46  0E21               	movlw	33
 14494  004C48  1801               	xorwf	Error@a,w,c
 14495  004C4A  1002               	iorwf	Error@a+1,w,c
 14496  004C4C  B4D8               	btfsc	status,2,c
 14497  004C4E  D010               	goto	l6283
 14498                           
 14499                           ; BSR set to: 15
 14500  004C50  0E37               	movlw	55
 14501  004C52  1801               	xorwf	Error@a,w,c
 14502  004C54  1002               	iorwf	Error@a+1,w,c
 14503  004C56  B4D8               	btfsc	status,2,c
 14504  004C58  D00B               	goto	l6283
 14505                           
 14506                           ; BSR set to: 15
 14507                           ;./Errores.h: 23:     LATD = v_seg[a];
 14508  004C5A  0E04               	movlw	low Error@v_seg
 14509  004C5C  2401               	addwf	Error@a,w,c
 14510  004C5E  6ED9               	movwf	fsr2l,c
 14511  004C60  0E00               	movlw	high Error@v_seg
 14512  004C62  2002               	addwfc	Error@a+1,w,c
 14513  004C64  6EDA               	movwf	fsr2h,c
 14514  004C66  50DF               	movf	indf2,w,c
 14515  004C68  6E8C               	movwf	3980,c	;volatile
 14516                           
 14517                           ; BSR set to: 15
 14518                           ;./Errores.h: 24:     LATE = 0x01;
 14519  004C6A  0E01               	movlw	1
 14520  004C6C  6E8D               	movwf	3981,c	;volatile
 14521                           
 14522                           ;./Errores.h: 25:     }
 14523  004C6E  0012               	return	
 14524  004C70                     l6283:
 14525                           
 14526                           ; BSR set to: 15
 14527  004C70  0E21               	movlw	33
 14528  004C72  1801               	xorwf	Error@a,w,c
 14529  004C74  1002               	iorwf	Error@a+1,w,c
 14530  004C76  A4D8               	btfss	status,2,c
 14531  004C78  D005               	goto	l6289
 14532                           
 14533                           ; BSR set to: 15
 14534                           ;./Errores.h: 27:     LATD = v_seg[6];
 14535  004C7A  C00A  FF8C         	movff	Error@v_seg+6,3980	;volatile
 14536                           
 14537                           ; BSR set to: 15
 14538                           ;./Errores.h: 28:     LATE = 0x02;
 14539  004C7E  0E02               	movlw	2
 14540  004C80  6E8D               	movwf	3981,c	;volatile
 14541                           
 14542                           ;./Errores.h: 29:     }
 14543  004C82  0012               	return	
 14544  004C84                     l6289:
 14545                           
 14546                           ; BSR set to: 15
 14547  004C84  0EE7               	movlw	231
 14548  004C86  1801               	xorwf	Error@a,w,c
 14549  004C88  E107               	bnz	l854
 14550  004C8A  0E03               	movlw	3
 14551  004C8C  1802               	xorwf	Error@a+1,w,c
 14552  004C8E  A4D8               	btfss	status,2,c
 14553  004C90  D003               	goto	l854
 14554  004C92                     u8510:
 14555                           
 14556                           ;./Errores.h: 31:     LATE = 0x00;
 14557  004C92  0E00               	movlw	0
 14558  004C94  6E8D               	movwf	3981,c	;volatile
 14559                           
 14560                           ;./Errores.h: 32:     }
 14561  004C96  0012               	return	
 14562  004C98                     l854:
 14563                           
 14564                           ; BSR set to: 15
 14565                           ;./Errores.h: 34:     LATD = v_seg[0];
 14566  004C98  C004  FF8C         	movff	Error@v_seg,3980	;volatile
 14567                           
 14568                           ; BSR set to: 15
 14569                           ;./Errores.h: 35:     LATE = 0x01;
 14570  004C9C  0E01               	movlw	1
 14571  004C9E  6E8D               	movwf	3981,c	;volatile
 14572                           
 14573                           ; BSR set to: 15
 14574                           ;./Errores.h: 36:     _delay((unsigned long)((1)*(8000000/4000.0)));
 14575  004CA0  0E03               	movlw	3
 14576  004CA2  6E03               	movwf	??_Error& (0+255),c
 14577  004CA4  0E98               	movlw	152
 14578  004CA6                     u8927:
 14579  004CA6  2EE8               	decfsz	wreg,f,c
 14580  004CA8  D7FE               	bra	u8927
 14581  004CAA  2E03               	decfsz	??_Error& (0+255),f,c
 14582  004CAC  D7FC               	bra	u8927
 14583                           
 14584                           ;./Errores.h: 38:     LATE = 0x00;
 14585  004CAE  0E00               	movlw	0
 14586  004CB0  6E8D               	movwf	3981,c	;volatile
 14587                           
 14588                           ;./Errores.h: 39:     LATD = v_seg[9];
 14589  004CB2  C00D  FF8C         	movff	Error@v_seg+9,3980	;volatile
 14590                           
 14591                           ;./Errores.h: 40:     LATE = 0x02;
 14592  004CB6  0E02               	movlw	2
 14593  004CB8  6E8D               	movwf	3981,c	;volatile
 14594                           
 14595                           ;./Errores.h: 41:     _delay((unsigned long)((1)*(8000000/4000.0)));
 14596  004CBA  0E03               	movlw	3
 14597  004CBC  6E03               	movwf	??_Error& (0+255),c
 14598  004CBE  0E98               	movlw	152
 14599  004CC0                     u8937:
 14600  004CC0  2EE8               	decfsz	wreg,f,c
 14601  004CC2  D7FE               	bra	u8937
 14602  004CC4  2E03               	decfsz	??_Error& (0+255),f,c
 14603  004CC6  D7FC               	bra	u8937
 14604                           
 14605                           ;./Errores.h: 43:     LATE = 0x00;
 14606  004CC8  0E00               	movlw	0
 14607  004CCA  6E8D               	movwf	3981,c	;volatile
 14608                           
 14609                           ;./Errores.h: 44:     LATD = v_seg[6];
 14610  004CCC  C00A  FF8C         	movff	Error@v_seg+6,3980	;volatile
 14611                           
 14612                           ;./Errores.h: 45:     LATE = 0x04;
 14613  004CD0  0E04               	movlw	4
 14614  004CD2  6E8D               	movwf	3981,c	;volatile
 14615                           
 14616                           ;./Errores.h: 46:     _delay((unsigned long)((1)*(8000000/4000.0)));
 14617  004CD4  0E03               	movlw	3
 14618  004CD6  6E03               	movwf	??_Error& (0+255),c
 14619  004CD8  0E98               	movlw	152
 14620  004CDA                     u8947:
 14621  004CDA  2EE8               	decfsz	wreg,f,c
 14622  004CDC  D7FE               	bra	u8947
 14623  004CDE  2E03               	decfsz	??_Error& (0+255),f,c
 14624  004CE0  D7FC               	bra	u8947
 14625  004CE2  D7D7               	goto	u8510
 14626  004CE4                     __end_of_Error:
 14627                           	opt callstack 0
 14628                           
 14629 ;; *************** function _InitPortC *****************
 14630 ;; Defined at:
 14631 ;;		line 84 in file "Main.c"
 14632 ;; Parameters:    Size  Location     Type
 14633 ;;		None
 14634 ;; Auto vars:     Size  Location     Type
 14635 ;;		None
 14636 ;; Return value:  Size  Location     Type
 14637 ;;                  1    wreg      void 
 14638 ;; Registers used:
 14639 ;;		wreg, status,2
 14640 ;; Tracked objects:
 14641 ;;		On entry : 0/0
 14642 ;;		On exit  : 0/0
 14643 ;;		Unchanged: 0/0
 14644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14645 ;;      Params:         0       0       0       0       0       0       0       0       0
 14646 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14647 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14648 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14649 ;;Total ram usage:        0 bytes
 14650 ;; Hardware stack levels used:    1
 14651 ;; This function calls:
 14652 ;;		Nothing
 14653 ;; This function is called by:
 14654 ;;		_main
 14655 ;; This function uses a non-reentrant model
 14656 ;;
 14657                           
 14658                           	psect	text57
 14659  005632                     __ptext57:
 14660                           	opt callstack 0
 14661  005632                     _InitPortC:
 14662                           	opt callstack 30
 14663                           
 14664                           ;Main.c: 86:     LATC = 0x00;
 14665                           
 14666                           ;incstack = 0
 14667  005632  0E00               	movlw	0
 14668  005634  6E8B               	movwf	3979,c	;volatile
 14669                           
 14670                           ;Main.c: 87:     TRISC = 0x04;
 14671  005636  0E04               	movlw	4
 14672  005638  6E94               	movwf	3988,c	;volatile
 14673                           
 14674                           ;Main.c: 88:     ANSELC = 0x04;
 14675  00563A  0E04               	movlw	4
 14676  00563C  010F               	movlb	15	; () banked
 14677  00563E  6F5D               	movwf	93,b	;volatile
 14678                           
 14679                           ; BSR set to: 15
 14680  005640  0012               	return		;funcret
 14681  005642                     __end_of_InitPortC:
 14682                           	opt callstack 0
 14683                           
 14684 ;; *************** function _InitPortA *****************
 14685 ;; Defined at:
 14686 ;;		line 75 in file "Main.c"
 14687 ;; Parameters:    Size  Location     Type
 14688 ;;		None
 14689 ;; Auto vars:     Size  Location     Type
 14690 ;;		None
 14691 ;; Return value:  Size  Location     Type
 14692 ;;                  1    wreg      void 
 14693 ;; Registers used:
 14694 ;;		wreg, status,2
 14695 ;; Tracked objects:
 14696 ;;		On entry : 0/0
 14697 ;;		On exit  : 0/0
 14698 ;;		Unchanged: 0/0
 14699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14700 ;;      Params:         0       0       0       0       0       0       0       0       0
 14701 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14702 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14703 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14704 ;;Total ram usage:        0 bytes
 14705 ;; Hardware stack levels used:    1
 14706 ;; This function calls:
 14707 ;;		Nothing
 14708 ;; This function is called by:
 14709 ;;		_main
 14710 ;; This function uses a non-reentrant model
 14711 ;;
 14712                           
 14713                           	psect	text58
 14714  005642                     __ptext58:
 14715                           	opt callstack 0
 14716  005642                     _InitPortA:
 14717                           	opt callstack 30
 14718                           
 14719                           ;Main.c: 77:     LATA = 0x00;
 14720                           
 14721                           ; BSR set to: 15
 14722                           ;incstack = 0
 14723  005642  0E00               	movlw	0
 14724  005644  6E89               	movwf	3977,c	;volatile
 14725                           
 14726                           ;Main.c: 78:     TRISA = 0x00;
 14727  005646  0E00               	movlw	0
 14728  005648  6E92               	movwf	3986,c	;volatile
 14729                           
 14730                           ;Main.c: 79:     ANSELA = 0x00;
 14731  00564A  0E00               	movlw	0
 14732  00564C  010F               	movlb	15	; () banked
 14733  00564E  6F5B               	movwf	91,b	;volatile
 14734                           
 14735                           ; BSR set to: 15
 14736  005650  0012               	return		;funcret
 14737  005652                     __end_of_InitPortA:
 14738                           	opt callstack 0
 14739                           
 14740                           	psect	rparam
 14741  0000                     tosu	equ	0xFFF
 14742                           tosh	equ	0xFFE
 14743                           tosl	equ	0xFFD
 14744                           stkptr	equ	0xFFC
 14745                           pclatu	equ	0xFFB
 14746                           pclath	equ	0xFFA
 14747                           pcl	equ	0xFF9
 14748                           tblptru	equ	0xFF8
 14749                           tblptrh	equ	0xFF7
 14750                           tblptrl	equ	0xFF6
 14751                           tablat	equ	0xFF5
 14752                           prodh	equ	0xFF4
 14753                           prodl	equ	0xFF3
 14754                           indf0	equ	0xFEF
 14755                           postinc0	equ	0xFEE
 14756                           postdec0	equ	0xFED
 14757                           preinc0	equ	0xFEC
 14758                           plusw0	equ	0xFEB
 14759                           fsr0h	equ	0xFEA
 14760                           fsr0l	equ	0xFE9
 14761                           wreg	equ	0xFE8
 14762                           indf1	equ	0xFE7
 14763                           postinc1	equ	0xFE6
 14764                           postdec1	equ	0xFE5
 14765                           preinc1	equ	0xFE4
 14766                           plusw1	equ	0xFE3
 14767                           fsr1h	equ	0xFE2
 14768                           fsr1l	equ	0xFE1
 14769                           bsr	equ	0xFE0
 14770                           indf2	equ	0xFDF
 14771                           postinc2	equ	0xFDE
 14772                           postdec2	equ	0xFDD
 14773                           preinc2	equ	0xFDC
 14774                           plusw2	equ	0xFDB
 14775                           fsr2h	equ	0xFDA
 14776                           fsr2l	equ	0xFD9
 14777                           status	equ	0xFD8


Data Sizes:
    Strings     40
    Constant    0
    Data        11
    BSS         607
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    123     153
    BANK1           256      0      32
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    guardar@data	PTR unsigned char  size(2) Largest target is 1
		 -> main@letra(BANK0[1]), NULL(NULL[0]), 

    word	PTR unsigned char  size(2) Largest target is 1
		 -> main@letra(BANK0[1]), NULL(NULL[0]), 

    Fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    Fil.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_write@bw	PTR unsigned short  size(2) Largest target is 2
		 -> guardar@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 1
		 -> main@letra(BANK0[1]), NULL(NULL[0]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 1
		 -> main@letra(BANK0[1]), NULL(NULL[0]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_6(CODE[11]), STR_5(CODE[1]), STR_4(CODE[1]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dj.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_6(CODE[11]), STR_5(CODE[1]), STR_4(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_6(CODE[11]), STR_5(CODE[1]), STR_4(CODE[1]), 

    S221$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S221$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@fil.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@obj	PTR void  size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    validate@fil	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ff@FatFs	PTR struct .[1] size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), f_mount@fs(COMRAM[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_6(CODE[11]), STR_5(CODE[1]), STR_4(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_6(CODE[11]), STR_5(CODE[1]), STR_4(CODE[1]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), f_mount@rp(COMRAM[2]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_6(CODE[11]), STR_5(CODE[1]), STR_4(CODE[1]), 

    create_name@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_name@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_name@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_6(CODE[11]), STR_5(CODE[1]), STR_4(CODE[1]), 

    dir_register@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_register@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_register@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_next@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_next@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_next@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    S210$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_sdi@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    S210$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S210$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), main@letra(BANK0[1]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), main@letra(BANK0[1]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), main@letra(BANK0[1]), NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    xmit_datablock@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), main@letra(BANK0[1]), NULL(NULL[0]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), disk_ioctl@csd(COMRAM[16]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _f_write->_create_chain
    _f_open->_remove_chain
    _remove_chain->_get_fat
    _remove_chain->_put_fat
    _create_name->_mem_set
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_lseek->_create_chain
    _create_chain->_get_fat
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _clust2sect->___lmul
    _f_close->_f_sync
    _f_sync->_sync_fs
    _validate->_disk_status
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _xmit_datablock->_wait_ready
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    _select->_wait_ready
    _wait_ready->_SPI1_Exchange8bit
    _deselect->_SPI1_Exchange8bit
    _rcvr_datablock->_SPI1_Exchange8bit

Critical Paths under _main in BANK0

    _main->_guardar
    _guardar->_f_open
    _f_write->_create_chain
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_next->_create_chain
    _f_mount->_find_volume
    _f_lseek->_create_chain

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0  431131
                                            116 BANK0      7     7      0
                          _InitPortA
                          _InitPortC
                            _guardar
                       _interruptadc
 ---------------------------------------------------------------------------------
 (1) _interruptadc                                         4     2      2      99
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _guardar                                              4     2      2  431004
                                            112 BANK0      4     2      2
                              _Error
                  _SYSTEM_Initialize
                        ___delay_sec
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _f_write
 ---------------------------------------------------------------------------------
 (2) _f_write                                             36    28      8   54898
                                             13 BANK0     36    28      8
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (2) _f_open                                              54    49      5  266319
                                             58 BANK0     54    49      5
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (3) _remove_chain                                        15     9      6   27554
                                             85 COMRAM    10     4      6
                                              0 BANK0      5     5      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _follow_path                                          8     4      4   99588
                                             38 BANK0      8     4      4
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (3) _ld_clust                                            14    10      4     546
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) _dir_find                                             6     4      2   79471
                                             32 BANK0      6     4      2
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _mem_cmp                                             14     8      6     364
                                              0 COMRAM    14     8      6
 ---------------------------------------------------------------------------------
 (4) _create_name                                         23    19      4    2632
                                              8 COMRAM    23    19      4
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (5) _chk_chr                                              6     2      4     241
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _dir_register                                         3     1      2   93436
                                             42 BANK0      3     1      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _mem_cpy                                             10     4      6    1323
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (4) _dir_alloc                                           10     6      4   79139
                                             32 BANK0     10     6      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _dir_sdi                                             21    17      4   16225
                                             85 COMRAM     4     0      4
                                              0 BANK0     17    17      0
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (5) _dir_next                                            19    15      4   50796
                                             13 BANK0     19    15      4
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _f_mount                                             12     7      5   32640
                                             81 COMRAM    12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (3) _find_volume                                         71    66      5   31300
                                             68 COMRAM    13     8      5
                                              0 BANK0     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _get_ldnumber                                        14    12      2     536
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                     13    13      0    2686
                                             16 COMRAM    13    13      0
                  _SPI1_Exchange8bit
                    _SPI1_Initialize
                          _SPI1_Open
                           _deselect
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) _SPI1_Open                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _check_fs                                            10     4      6   12132
                                             58 COMRAM    10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _f_lseek                                             39    33      6   46625
                                             13 BANK0     39    33      6
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (3) _create_chain                                        23    17      6   28695
                                             85 COMRAM    10     4      6
                                              0 BANK0     13    13      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (4) _put_fat                                             27    17     10   13520
                                             58 COMRAM    27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _get_fat                                             27    21      6   13479
                                             58 COMRAM    27    21      6
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _clust2sect                                          11     5      6    1535
                                             12 COMRAM    11     5      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     512
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     564
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _f_close                                              3     1      2   29443
                                             77 COMRAM     3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (3) _f_sync                                               9     7      2   28692
                                             68 COMRAM     9     7      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (3) _validate                                             8     6      2     557
                                              1 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (4) _disk_status                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _sync_fs                                             11     9      2   15570
                                             57 COMRAM    11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (6) _mem_set                                              8     2      6    1002
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _disk_ioctl                                          41    38      3    5270
                                             16 COMRAM    41    38      3
                  _SPI1_Exchange8bit
                             ___wmul
                           _deselect
                     _rcvr_datablock
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     711
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _st_clust                                             6     0      6     392
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (3) _move_window                                         11     5      6   11674
                                             47 COMRAM    11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (3) _sync_window                                         21    19      2    4808
                                             26 COMRAM    21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (4) _disk_write                                          10     2      8    3972
                                             16 COMRAM    10     2      8
                           _deselect
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (5) _xmit_datablock                                       6     3      3     659
                                              3 COMRAM     6     3      3
                  _SPI1_Exchange8bit
                         _wait_ready
 ---------------------------------------------------------------------------------
 (4) _disk_read                                           12     4      8    4058
                                             16 COMRAM    12     4      8
                           _deselect
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) _send_cmd                                             6     2      4    2155
                                             10 COMRAM     6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (6) ___send_cmd                                           7     3      4     599
                                              3 COMRAM     7     3      4
                  _SPI1_Exchange8bit
                           _deselect
                             _select
 ---------------------------------------------------------------------------------
 (7) _select                                               0     0      0     112
                  _SPI1_Exchange8bit
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (6) _wait_ready                                           2     2      0      68
                                              1 COMRAM     2     2      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (8) _deselect                                             0     0      0      22
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _rcvr_datablock                                       7     3      4    1200
                                              1 COMRAM     7     3      4
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI1_Exchange8bit                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___delay_sec                                          5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
 ---------------------------------------------------------------------------------
 (5) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Error                                               13    11      2     909
                                              0 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (1) _InitPortC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitPortA                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitPortA
   _InitPortC
   _guardar
     _Error
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _SPI1_Initialize
     ___delay_sec
     _f_close
       _f_sync
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _st_clust
         _sync_fs
           _disk_ioctl
             _SPI1_Exchange8bit
             ___wmul
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _validate
           _disk_status
       _validate
         _disk_status
     _f_lseek
       ___lldiv
       _clust2sect
         ___lmul
       _create_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _validate
         _disk_status
     _f_mount
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _get_ldnumber
     _f_open
       _dir_register
         _dir_alloc
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _mem_cpy
         _mem_set
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _follow_path
         _create_name
           _chk_chr
           _mem_set
         _dir_find
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _mem_cmp
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _ld_clust
       _ld_clust
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _remove_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _st_clust
     _f_write
       _clust2sect
         ___lmul
       _create_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _disk_write
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
         _xmit_datablock
           _SPI1_Exchange8bit
           _wait_ready
             _SPI1_Exchange8bit
       _mem_cpy
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _sync_window
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
       _validate
         _disk_status
   _interruptadc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     22E      21       27.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      20       8       12.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     7B      99       5       95.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     118       6        0.0%
DATA                 0      0     346       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed May 29 15:29:30 2019

              _SPI1_Exchange8bit 5622                      get_fat@clst 003D  
                   create_name@b 0015                     create_name@c 001F  
                   create_name@d 001A                     create_name@i 001D  
                   create_name@p 0018               ?_SPI1_Exchange8bit 0001  
               get_ldnumber@path 0001                               l17 5494  
                             l35 5228                               l70 3B9C  
                             l81 3C64                               l92 3D62  
                             l95 3D32                      disk_ioctl@n 0037  
            ___wmul@multiplicand 0003                   ??_dir_register 0060  
               disk_write@sector 0013                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                    create_name@dp 0009  
                  create_name@ni 0016                     __CFG_CP2$OFF 000000  
                  create_name@si 0013                   create_chain@cs 0069  
                   __CFG_CP3$OFF 000000                   create_chain@fs 0056  
                    __CFG_LVP$ON 000000                              l113 4B6C  
                            l114 4B80                              l130 45E0  
                            l131 45E8                              l132 45FC  
                            l109 4B62                              l126 45D6  
                            l302 4316                              l136 465C  
                            l242 3F36                              l155 20FC  
                            l252 2C58                              l317 345C  
                            l334 3638                              l255 2FA8  
                            l336 3630                              l520 09CA  
                            l432 3A12                              l257 2C62  
                            l533 0B12                              l349 3808  
                            l278 241E                              l391 47BE  
                            l456 3B68                              l547 100A  
                            l539 0CAC                              l469 4418  
                            l581 309C                              l590 320E  
                            l582 3094                              l671 1C54  
                            l667 19C4                              l748 562A  
                            l588 3226                              l854 4C98  
                            l937 4FF8                              _GIE 007F97  
                   __CFG_CPB$OFF 000000                     __CFG_CPD$OFF 000000  
                            _Fil 0100              ??_SPI1_Exchange8bit 0001  
                   disk_read@cmd 001C                   ??_create_chain 005C  
                            wreg 000FE8                disk_initialize@ty 001A  
                 create_name@sfn 001B                  create_chain@ncl 0065  
                     Error@F5051 00EC                  create_chain@scl 0061  
                create_chain@res 0060                      ld_clust@dir 0003  
                           l4221 520C                             l4119 55F6  
                           l4151 5054                             l4135 5026  
                           l4215 5458                             l5023 3CF0  
                           l5015 3CBC                             l5007 3C94  
                           l4161 5074                             l5025 3D02  
                           l4163 5078                             l4155 5060  
                           l4411 2DEC                             l5019 3CCA  
                           l5123 478C                             l4237 523C  
                           l4325 4C06                             l4309 4B94  
                           l4341 410C                             l4421 2EB2  
                           l4413 2DF6                             l4501 27D0  
                           l5125 4794                             l5109 46F8  
                           l5301 3B56                             l4351 4192  
                           l4431 2F7C                             l5071 5176  
                           l5055 511C                             l5063 514C  
                           l5223 3A08                             l6111 181C  
                           l6031 13AE                             l6015 1286  
                           l4097 547A                             l4169 5088  
                           l4185 52F8                             l4273 463E  
                           l5401 4F80                             l4521 53B4  
                           l4409 2DCE                             l4505 27E2  
                           l5065 515A                             l5153 47E6  
                           l6105 17D2                             l6041 13DA  
                           l4179 52E2                             l4347 4186  
                           l4531 5538                             l4507 280E  
                           l6211 1CE2                             l6203 1C7E  
                           l5323 49C0                             l5219 39EE  
                           l5139 50F8                             l6115 1892  
                           l6051 144E                             l6123 18CE  
                           l4701 2220                             l5405 4F84  
                           l4517 53A0                             l4541 4D3A  
                           l4461 250E                             l4613 3618  
                           l6221 1D2A                             l6213 1D16  
                           l5325 49C4                             l5173 488C  
                           l5501 43B8                             l6029 136E  
                           l4199 5336                             l4287 46BE  
                           l4359 41EC                             l4527 5528  
                           l5415 4FAA                             l4607 35B0  
                           l5351 4A64                             l5183 391E  
                           l5167 484C                             l6047 13FE  
                           l6313 54EE                             l4377 4ED4  
                           l4721 2320                             l4705 22A8  
                           l5097 3F0E                             l4633 560A  
                           l5417 4FB6                             l4481 262C  
                           l6153 1956                             l5257 3AAA  
                           l5281 3AFC                             l5185 3922  
                           l6129 192A                             l6073 15A0  
                           l4379 4EF0                             l4731 2358  
                           l4715 22EE                             l5427 4FEA  
                           l4491 26DE                             l4459 24DA  
                           l4571 346C                             l4563 3408  
                           l4555 33B8                             l6235 1DAA  
                           l5355 4A6E                             l5611 0948  
                           l6067 1518                             l6059 14B6  
                           l6317 54FE                             l4725 2342  
                           l4709 22B6                             l4653 1F6C  
                           l4645 1F5E                             l4477 25F6  
                           l6253 1E72                             l5381 495C  
                           l5621 09AE                             l4805 3756  
                           l5277 3AE6                             l5269 3AD4  
                           l5197 3990                             l5453 428C  
                           l5437 4226                             l6085 16CE  
                           l4743 2398                             l4735 2360  
                           l4583 34CA                             l4567 342C  
                           l6175 1B94                             l6159 1978  
                           l5375 491E                             l5551 0858  
                           l4815 37C8                             l4807 377C  
                           l5287 3B26                             l5279 3AF6  
                           l5463 4306                             l5439 422E  
                           l6095 1748                             l6079 15F4  
                           l6087 16EE                             l6335 3F6E  
                           l4657 1F7A                             l4745 239E  
                           l5369 4900                             l5641 0A82  
                           l5633 0A16                             l4905 2A18  
                           l5537 447C                             l6097 176C  
                           l6283 4C70                             l4683 2142  
                           l4667 2058                             l4747 23E0  
                           l6259 1EE4                             l5387 4996  
                           l5627 0A00                             l4851 2858  
                           l4827 3848                             l5483 4B48  
                           l4771 53EC                             l4763 5286  
                           l6099 178A                             l6355 400E  
                           l4693 2190                             l6197 1C38  
                           l6189 1C12                             l5653 0AA8  
                           l4917 2AB8                             l4933 2B56  
                           l4861 28BC                             l5493 4364  
                           l6365 4058                             l6525 51D0  
                           l4687 214A                             l5831 45BE  
                           l4599 353E                             l6199 1C70  
                           l5735 0D98                             l5655 0AAE  
                           l5639 0A5C                             l5591 0900  
                           l5575 08C2                             l5559 087E  
                           l4871 2962                             l6375 408A  
                           l6383 558C                             _ADIE 007CEE  
                           _ADIF 007CF6                             l6289 4C84  
                           l5681 0B70                             l4929 2B0E  
                           l4937 2BB4                             l4769 53E8  
                           l4963 3BBA                             l4955 3BA8  
                           l5771 0FDC                             l5739 0DAE  
                           l5659 0AB2                             l5579 08C6  
                           l4795 3704                             l5915 306C  
                           l5907 3042                             l5853 4DC2  
                           l4893 29FA                             l4877 2978  
                           l4789 36B4                             l4959 3BB2  
                           l5759 0EE8                             l5599 090A  
                           l5863 4E04                             l5919 3078  
                           l4977 3C00                             l5873 4E30  
                           l5795 11AE                             l5859 4DF0  
                           l5955 31F4                             l4989 3C34  
                           l5973 326C                             l5885 2FC8  
                           l5989 334C                             STR_1 0801  
                           STR_2 0801                             STR_3 0810  
                           STR_4 0828                             STR_5 0828  
                           STR_6 081E                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _LATD 000F8C                             _LATE 000F8D  
                           u5010 2C28                             u5100 2EF4  
                           u5020 2C48                             u5200 2614  
                           u5120 23F8                             u6000 295E  
                           u5105 2EEA                             u5130 2418  
                           u6010 2974                             u5035 2CAC  
                           u5220 2720                             u5300 33A6  
                           u5205 260A                             u5055 2D4A  
                           u5320 341A                             u6200 3C6C  
                           u6120 3BA2                             u7000 4200  
                           u5225 2716                             u5145 2468  
                           u6105 2BD6                             u7010 4220  
                           _PEIE 007F96                             u4460 549C  
                           u5085 2DDA                             u4630 5230  
                           u4470 54A8                             u5430 35F0  
                           u5350 34B8                             u7110 435E  
                           u5175 255A                             u4560 52DE  
                           u4800 46CE                             u5600 2172  
                           u6400 4778                             u5370 3516  
                           u4715 45EE                             u4900 4BE8  
                           u6420 47B2                             u7060 42E0  
                           u5605 2168                             u5525 2030  
                           u4830 4B5E                             u4670 45D2  
                           u5550 20F6                             u6270 3D3A  
                           u7070 4336                             u5535 2060  
                           u4920 4C16                             u4760 4678  
                           u5480 1F76                             u7240 08BE  
                           u7160 4412                             u5545 2086  
                           u6290 3D5E                             u5810 36B0  
                           u6450 47E0                             u5555 20EC  
                           u4780 46A0                             u7500 0DAA  
                           u7340 0A9C                             u6620 3A1E  
                           u5645 21D4                             u8230 1952  
                           u5655 21F6                             u8135 1694  
                           u4880 4BBC                             u5664 2214  
                           u8400 1DBE                             u8320 1BFE  
                           u7360 0AAE                             u6640 3A2A  
                           u5760 5296                             u4865 4B72  
                           u5665 220E                             u8145 16D8  
                           u8330 1C24                             u6570 39D8  
                           u5770 52CA                             u5675 225E  
                           u5915 387E                             u4980 4E78  
                           u6900 4958                             u5940 2854  
                           u6660 3A54                             u5925 38CA  
                           u8085 1530                             u8510 4C92  
                           u8430 1E5E                             u6830 49E6  
                           u7710 4E2C                             u5870 37D8  
                           u5790 541C                             u6590 39EA  
                           u8190 18D6                             u7535 0EC8  
                           u7560 1030                             u6680 3A60  
                           u7465 0CE0                             u8450 1EC8  
                           u7490 0D94                             u8435 1E54  
                           u8380 1D3A                             u8540 3F8C  
                           u8285 1A3C                             u7565 1026  
                           u8471 4C3E                             u6960 4F80  
                           u5985 28C8                             u6890 491A  
                           u6980 4FBA                             u7970 12E0  
                           u8907 521C                             u8917 54F4  
                           u8927 4CA6                             u7975 12D6  
                           u8937 4CC0                             u8947 4CDA  
                           u8877 3C56                             u8887 3D24  
                           u8897 5488                             _WPUB 000F85  
                           _Fsid 00E7                             _Stat 00F6  
                           _data 00DB                             _main 5188  
                   find_volume@i 0095                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf1 000FE7  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                             _word 00F7  
                  __CFG_BORV$190 000000                    disk_ioctl@cmd 0011  
                  disk_ioctl@csd 0021                    disk_read@buff 0011  
                  disk_ioctl@res 0036                    disk_ioctl@ptr 0038  
                  disk_read@pdrv 0019                             prodh 000FF4  
                           prodl 000FF3                   ??_get_ldnumber 0003  
                           start 0000        __end_of_SPI1_Exchange8bit 5632  
                  __CFG_IESO$OFF 000000                       Error@v_seg 0004  
                  __CFG_MCLRE$ON 000000               disk_initialize@cmd 0019  
                   ?_follow_path 0086               disk_initialize@ocr 0013  
                   ___param_bank 000000               disk_initialize@tmr 001B  
                create_name@path 000B                 create_chain@clst 0058  
                    _sync_window 4098   __size_of_OSCILLATOR_Initialize 0012  
  __end_of_OSCILLATOR_Initialize 5622                            ?_main 0001  
                __end_of___lldiv 500A                   __CFG_DEBUG$OFF 000000  
                          _PORTA 000F80                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _TRISE 000F96  
                __end_of_f_close 54E6                            _FatFs 0120  
                __end_of_chk_chr 542E               __size_of_SPI1_Open 000E  
                __end_of_f_lseek 1F4A                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
            ___lmul@multiplicand 0005                    __CFG_WRT3$OFF 000000  
                __end_of_f_mount 4E4E                            _Error 4C1A  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                   ___send_cmd@n 0009                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                  __end_of_dir_sdi 390C  
                 __CFG_EBTR3$OFF 000000                  __end_of_f_write 193C  
                __end_of_get_fat 2FBA                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                          _adcin 00E5                   __CFG_EBTRB$OFF 000000  
                __end_of_mem_cmp 52D4                  __end_of_mem_cpy 5188  
                __end_of_mem_set 554A                  __end_of_guardar 4098  
                  find_volume@br 0060                    find_volume@fs 0098  
                  find_volume@pt 007A                            main@o 00D8  
                 disk_ioctl@buff 0012                   disk_read@count 0017  
                          tablat 000FF5                   disk_ioctl@pdrv 0031  
                          plusw1 000FE3                            plusw2 000FDB  
                __end_of_put_fat 2812                            status 000FD8  
                 __CFG_T3CMX$RC0 000000                  __end_of_sync_fs 3F3A  
                 __CFG_ICPRT$OFF 000000                    get_ldnumber@i 000B  
       __size_of_SPI1_Initialize 000E                  __initialization 533A  
            disk_initialize@pdrv 0012                     __end_of_main 5202  
                   clust2sect@fs 000D                   __CFG_PCLKEN$ON 000000  
                         ??_main 00D4                    __activetblptr 000002  
                 __CFG_SDOMX$RB3 000000                           ?_Error 0001  
                __CFG_CCP2MX$RC1 000000                           _ADCON0 000FC2  
                         _ADCON1 000FC1                           _ADCON2 000FC0  
                         _ACTCON 000FB5                           _ADRESH 000FC4  
                         _ADRESL 000FC3                           _ANSELA 000F5B  
                         _ANSELB 000F5C                           _ANSELC 000F5D  
                         _ANSELD 000F5E                           _ANSELE 000F5F  
                 __CFG_WDTEN$OFF 000000                           _OSCCON 000FD3  
             __size_of_InitPortA 0010               __size_of_InitPortC 0010  
           __end_of_dir_register 4B4E                 __end_of_check_fs 499A  
                    guardar@data 00D0            SPI1_Exchange8bit@data 0001  
                         Error@a 0001       __size_of_SPI1_Exchange8bit 0010  
           __size_of_create_name 0284         __size_of_disk_initialize 01EA  
               __end_of_deselect 5692                 __end_of_dir_find 48AE  
                 __CFG_XINST$OFF 000000                __end_of_SPI1_Open 5660  
               __end_of_dir_next 2C18                     ?_move_window 0030  
           __end_of_create_chain 364A                 __end_of_ld_clust 510A  
                         ___lmul 5390             __size_of_find_volume 09AE  
           __size_of_disk_status 0012                           ___wmul 559A  
                 __CFG_STVREN$ON 000000                        ??___lldiv 0009  
                         _f_open 2FBA                           _f_sync 4480  
                      ??_f_close 0050                   find_volume@fmt 0097  
                         clear_0 5362                           clear_1 5374  
                         clear_2 5380                   find_volume@rfs 0045  
                      ??_chk_chr 0005                   find_volume@vol 0080  
                         _select 55E0                        ??_f_lseek 0073  
                      ??_f_mount 0057                        ??_dir_sdi 0060  
                      ??_f_write 0075                        ??_get_fat 0041  
               __end_of_send_cmd 5470                        ??_mem_cmp 0007  
                      ??_mem_cpy 0007                        ??_mem_set 0007  
                      ??_guardar 0060                  disk_ioctl@csize 0032  
               __end_of_validate 4F88             __end_of_get_ldnumber 4A78  
                   __mediumconst 0000                  disk_read@sector 0013  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                 __end_of_st_clust 5574  
                      ??_put_fat 0045                  xmit_datablock@i 0007  
                      ??_sync_fs 003C               rcvr_datablock@buff 0002  
           __CFG_LS48MHZ$SYS24X4 000000                _SYSTEM_Initialize 5660  
                     __accesstop 0060          __end_of__initialization 5386  
                __CFG_PBADEN$OFF 000000                   disk_write@buff 0011  
                 get_ldnumber@tp 0007                   get_ldnumber@tt 000D  
                 disk_write@pdrv 001A               ?_SYSTEM_Initialize 0001  
                  ___rparam_used 000001          __size_of_rcvr_datablock 006C  
                  __end_of_Error 4CE4                   __pcstackCOMRAM 0001  
               __CFG_nPWRTEN$OFF 000000                    ?_interruptadc 0001  
                   __pidataBANK0 567C              ??_SYSTEM_Initialize 0001  
                     ___send_cmd 500A             __size_of_follow_path 0146  
              ??_SPI1_Initialize 0001                    ??___delay_sec 0001  
              __end_of_InitPortA 5652                __end_of_InitPortC 5642  
             __size_of_dir_alloc 00F0                          ??_Error 0003  
             __size_of_disk_read 00CC        __end_of_SYSTEM_Initialize 566E  
                     __pbssBANK0 00DB                       __pbssBANK1 0100  
              __CFG_PLLSEL$PLL4X 000000                   ??_interruptadc 0003  
                        ?___lmul 0001                          ?___wmul 0001  
                        ?_f_open 009A          __size_of_xmit_datablock 0066  
                        ?_f_sync 0045                ??_disk_initialize 0011  
                   ?_sync_window 001B                   ___lmul@product 0009  
                        ?_select 0001                        ?_check_fs 003B  
                     _disk_ioctl 1F4A                   follow_path@dir 008A  
                        _OSCCON2 000FD2                   follow_path@res 008D  
                     _disk_write 45C2                          _OSCTUNE 000F9B  
                    send_cmd@cmd 000F                        ?_deselect 0001  
                    send_cmd@arg 000B                          _SSP1ADD 000FC8  
                    send_cmd@res 0010                   remove_chain@fs 0056  
                        _SSP1BUF 000FC9                        ?_dir_find 0080  
            __end_of___delay_sec 551E                        ?_dir_next 006D  
          __size_of_dir_register 00D6                        ?_ld_clust 0001  
                     _clust2sect 4CE4                 sync_window@wsect 002C  
                  ?_remove_chain 0056            __size_of_create_chain 02FA  
              __end_of_dir_alloc 47C2                        ?_send_cmd 000B  
                        __Hparam 0000                   ___send_cmd@cmd 000A  
                 ___send_cmd@arg 0004                   ___send_cmd@res 0008  
                        __Lparam 0000                        ?_validate 0002  
              __end_of_disk_read 4C1A                          ff@FatFs 00E9  
                     f_close@res 0050                  __size_of___lmul 0056  
                      ?_st_clust 0001                      ?___send_cmd 0004  
                        ___lldiv 4F88                  __size_of___wmul 0026  
           __size_of_move_window 00A6                       check_fs@fs 003B  
                __size_of_f_open 0396                     __psmallconst 0800  
                __size_of_f_sync 0142                          _f_close 54AC  
            _disk_initialize$134 0017            __size_of_get_ldnumber 00DE  
                        __pcinit 533A                          _chk_chr 53E6  
                        _f_lseek 193C                          __ramtop 0800  
                        _f_mount 4D9E                  __size_of_select 001E  
                        __ptext0 5188                          __ptext1 5574  
                        __ptext2 3F3A                          __ptext3 11D8  
                        __ptext4 2FBA                          __ptext5 41F0  
                        __ptext6 433A                          __ptext7 508C  
                        __ptext8 47C2                          __ptext9 526E  
                        _dir_sdi 364A                      validate@fil 0008  
                        _f_write 11D8                      validate@obj 0002  
                        _get_fat 2C18                       chk_chr@chr 0003  
                   _dir_register 4A78                       chk_chr@str 0001  
                        _mem_cmp 526E                          _mem_cpy 510A  
          _OSCILLATOR_Initialize 5610                          _mem_set 551E  
                        _guardar 3F3A                       ??_check_fs 0041  
                find_volume@path 0047                  find_volume@nrsv 0082  
                find_volume@stat 008C         ??_PIN_MANAGER_Initialize 0001  
                   _create_chain 3350                       ??_deselect 0002  
                     ??_dir_find 0060                          _put_fat 23E8  
                     ??_dir_next 0071       __size_of_SYSTEM_Initialize 000E  
                     f_lseek@bcs 008C                       ??_ld_clust 0005  
                        _sync_fs 3D7A                       f_lseek@ofs 006F  
                     f_lseek@res 0087             end_of_initialization 5386  
                     f_open@mode 009E                       f_open@path 009C  
                 ??_remove_chain 005C                    __Lmediumconst 0000  
                disk_status@pdrv 0001                   _rcvr_datablock 5202  
                ___lldiv@divisor 0005                       f_mount@cfs 0058  
                     f_mount@res 0057                       ??_send_cmd 000F  
                     f_mount@opt 0056                       f_mount@vol 005C  
                ___lldiv@counter 000D                     _get_ldnumber 499A  
                     ??_validate 0004                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
                     ??_st_clust 0007                   move_window@res 003A  
                      _SPI1_Open 5652                       _wait_ready 5470  
                     dir_alloc@n 0087                 remove_chain@clst 0058  
                     dir_find@dp 0080                  _create_name$624 0011  
                     dir_sdi@idx 0058                      ___delay_sec 54E6  
                     dir_next@dp 006D                      ?_disk_ioctl 0011  
            rcvr_datablock@token 0008                       f_write@btw 0071  
                     f_write@res 0081                      ?_disk_write 0011  
                     get_fat@val 004C             __end_of_interruptadc 559A  
                get_ldnumber@vol 0009                  disk_write@count 0017  
                    ?_clust2sect 000D              __size_of___send_cmd 0082  
         __end_of_rcvr_datablock 526E                    ??_create_name 000D  
               disk_initialize@n 001D                       ld_clust@cl 000B  
                     ld_clust@fs 0001                  _SPI1_Initialize 566E  
                  ??_find_volume 004A                    ??_disk_status 0001  
                 _xmit_datablock 52D4                       ?_SPI1_Open 0001  
                 __end_of___lmul 53E6                      st_clust@dir 0001  
                 __end_of___wmul 55C0                   __end_of_f_open 3350  
                 __end_of_f_sync 45C2                   clust2sect@clst 000F  
         ?_OSCILLATOR_Initialize 0001                   __end_of_select 55FE  
           __size_of_sync_window 0158              start_initialization 533A  
__size_of_PIN_MANAGER_Initialize 0020                        _InitPortA 5642  
                      _InitPortC 5632                       mem_cmp@cnt 0005  
                     mem_cmp@dst 0001                       mem_cmp@src 0003  
                     mem_cpy@cnt 0005                      put_fat@clst 003D  
                     mem_cpy@dst 0001                       mem_cpy@src 0003  
                ?_rcvr_datablock 0002                  __CFG_nLPBOR$OFF 000000  
                _disk_initialize 3B90                       mem_set@cnt 0005  
                     mem_set@dst 0001                       mem_set@val 0003  
         __end_of_xmit_datablock 533A                    ??_follow_path 0060  
            __size_of_disk_ioctl 049E              __end_of_create_name 3B90  
            __size_of_disk_write 0110                         ??___lmul 0009  
                       ??___wmul 0005                         ??_f_open 009F  
                       ??_f_sync 0047                      ?_wait_ready 0001  
                    __pdataBANK0 00EC              __end_of_find_volume 11D8  
            __end_of_disk_status 5610              __size_of_clust2sect 00BA  
                       ??_select 0004             __end_of_remove_chain 433A  
              rcvr_datablock@btr 0004                rcvr_datablock@tmr 0006  
                    __pbssBIGRAM 0120                    __pcstackBANK0 0060  
                     ?_InitPortA 0001                       ?_InitPortC 0001  
              __size_of_check_fs 00EC          __end_of_SPI1_Initialize 567C  
                   check_fs@sect 003D                __size_of_deselect 000A  
              __size_of_dir_find 00EC                __size_of_dir_next 0406  
              __size_of_ld_clust 007E                        __pnvBANK0 00F7  
                _find_volume$728 0070                  _find_volume$729 0074  
         _PIN_MANAGER_Initialize 55C0                  ?_xmit_datablock 0004  
              __size_of_send_cmd 0042                     ??___send_cmd 0008  
                      _dir_alloc 46D2                         ?___lldiv 0001  
              __size_of_validate 0094                interruptadc@adcin 0001  
                    ??_SPI1_Open 0001                         ?_f_close 004E  
                      _disk_read 4B4E                         ?_chk_chr 0001  
                  follow_path@dp 0086                         ?_f_lseek 006D  
                  follow_path@ns 008C                __size_of_st_clust 002A  
            __end_of_follow_path 4480                         ?_f_mount 0052  
                       ?_dir_sdi 0056                         ?_f_write 006D  
                       ?_get_fat 003B            __size_of_interruptadc 0026  
                    __smallconst 0800                         ?_mem_cmp 0001  
                       ?_mem_cpy 0001                         ?_mem_set 0001  
                       ?_guardar 00D0                   __size_of_Error 00CA  
                      f_close@fp 004E                         ?_put_fat 003B  
        __end_of_disk_initialize 3D7A                         ?_sync_fs 003A  
                    _get_fat$374 004A                find_volume@fasize 008D  
            __size_of_wait_ready 003C               __end_of___send_cmd 508C  
                    _create_name 390C                   ___wmul@product 0005  
                       _LATBbits 000F8A                        f_lseek@fp 006D  
              find_volume@szbfat 0076                        f_open@dir 00B8  
                      f_open@res 00B7                        f_open@sfn 00A3  
              find_volume@sysect 007C                      _find_volume 082A  
                    _disk_status 55FE                    ??_move_window 0036  
                      f_mount@fs 0052                        f_mount@rp 005A  
                follow_path@path 0088                    move_window@fs 0030  
               __CFG_WDTPS$32768 000000                         _SSP1CON1 000FC6  
                   _interruptadc 5574                        dir_find@c 0082  
                     ?_dir_alloc 0080                  remove_chain@res 0060  
                remove_chain@nxt 0061                         _SSP1STAT 000FC7  
                      f_sync@dir 004C                        f_sync@res 004B  
                      dir_sdi@ic 0067                        dir_sdi@dp 0056  
                      dir_next@c 0078                        dir_next@i 007A  
                     ?_disk_read 0011                        f_write@cc 0085  
                      f_write@bw 0073                        f_write@fp 006D  
                      get_fat@bc 0054                        get_fat@fs 003B  
                      get_fat@wc 0050                       _ADCON0bits 000FC2  
              ___wmul@multiplier 0001                     ?___delay_sec 0001  
                       _CardType 00EB                     ??_disk_ioctl 0014  
                      main@letra 00DA                __CFG_CFGPLLEN$OFF 000000  
                   ??_disk_write 0019                      ??_InitPortA 0001  
                    ??_InitPortC 0001                     f_lseek@ifptr 0083  
                   f_lseek@nsect 0088                       st_clust@cl 0003  
               ?_SPI1_Initialize 0001                     ??_clust2sect 0013  
              ___lmul@multiplier 0001                      _INTCON2bits 000FF1  
                      copy_data0 534E                       put_fat@res 0053  
                     put_fat@val 0041                move_window@sector 0032  
                dir_next@stretch 006F                         __Hrparam 0000  
                      guardar@bw 00D2                         __Lrparam 0000  
                    _follow_path 433A               __CFG_BOREN$SBORDIS 000000  
             __end_of_disk_ioctl 23E8            __size_of_remove_chain 014A  
             __end_of_disk_write 46D2          ??_OSCILLATOR_Initialize 0001  
               __size_of___lldiv 0082              __end_of_move_window 4EF4  
             __end_of_clust2sect 4D9E                 __size_of_f_close 003A  
               __size_of_chk_chr 0048                 __size_of_f_lseek 060E  
               __size_of_f_mount 00B0                 __size_of_dir_sdi 02C2  
               __size_of_f_write 0764                 __size_of_get_fat 03A2  
                       _check_fs 48AE                 __size_of_mem_cmp 0066  
               __size_of_mem_cpy 007E                 __size_of_mem_set 002C  
               __size_of_guardar 015E              xmit_datablock@token 0006  
                ___delay_sec@sec 0004                 ??_rcvr_datablock 0006  
                dir_register@res 008C                         _deselect 5688  
                       __ptext10 390C                         __ptext11 53E6  
                       __ptext20 3B90                         __ptext12 4A78  
                       __ptext21 5652                         __ptext13 510A  
                       __ptext30 54AC                         __ptext22 48AE  
                       __ptext14 46D2                         __ptext31 4480  
                       __ptext23 193C                         __ptext15 364A  
                       __ptext40 4098                         __ptext32 4EF4  
                       __ptext24 3350                         __ptext16 2812  
                       __ptext41 45C2                         __ptext33 55FE  
                       __ptext25 23E8                         __ptext17 4D9E  
                       __ptext50 5622                         __ptext42 52D4  
                       __ptext34 3D7A                         __ptext26 2C18  
                       __ptext18 082A                         __ptext51 54E6  
                       __ptext43 4B4E                         __ptext35 551E  
                       __ptext27 4CE4                         __ptext19 499A  
                       __ptext52 5660                         __ptext44 542E  
                       __ptext36 1F4A                         __ptext28 5390  
                       __ptext53 566E                         __ptext45 500A  
                       __ptext37 559A                         __ptext29 4F88  
                       __ptext54 55C0                         __ptext46 55E0  
                       __ptext38 554A                         __ptext55 5610  
                       __ptext47 5470                         __ptext39 4E4E  
                       __ptext56 4C1A                         __ptext48 5688  
                       __ptext57 5632                         __ptext49 5202  
                       __ptext58 5642                         _dir_find 47C2  
                   _SSP1CON1bits 000FC6                         _dir_next 2812  
                  dir_alloc@nent 0082                 ?_disk_initialize 0001  
                       _ld_clust 508C                 __size_of_put_fat 042A  
                 sync_window@res 0029                 __size_of_sync_fs 01C0  
                  __size_of_main 007A                       sync_fs@res 0044  
                   _remove_chain 41F0                 find_volume@bsect 0091  
               find_volume@nclst 0088                 find_volume@tsect 0084  
               find_volume@wmode 0049                         f_open@dj 00BA  
                       f_open@cl 00AF                         f_open@fp 009A  
                       f_open@dw 00B3                         _send_cmd 542E  
                       _validate 4EF4                         f_sync@fp 0045  
                    ??_dir_alloc 0084                         _st_clust 554A  
                       get_fat@p 0052                     ??_wait_ready 0002  
                  ??_sync_window 001D                     _SSP1STATbits 000FC7  
                    ??_disk_read 0019                    _disk_read$143 001A  
                    f_lseek@clst 0090                         mem_cmp@d 0009  
                       mem_cmp@r 000D                         mem_cmp@s 000B  
                      put_fat@bc 0051                         mem_cpy@d 0007  
                      put_fat@fs 003B                         mem_cpy@s 0009  
                       mem_set@d 0007                    wait_ready@tmr 0002  
             xmit_datablock@buff 0004               xmit_datablock@resp 0009  
                 dir_register@dp 008A                 ??_xmit_datablock 0007  
             __end_of_wait_ready 54AC                 ___lldiv@dividend 0001  
        ?_PIN_MANAGER_Initialize 0001                     dir_alloc@res 0089  
                  sync_window@fs 001B                    sync_window@nf 002A  
                    f_mount@path 0054                        sync_fs@fs 003A  
                    _move_window 4E4E             __CFG_CPUDIV$NOCLKDIV 000000  
                       put_fat@p 0054                    ?_dir_register 008A  
                  ___delay_sec@i 0005                      dir_alloc@dp 0080  
               ___lldiv@quotient 0009                      dir_find@dir 0083  
            __end_of_sync_window 41F0                      dir_find@res 0085  
           __size_of___delay_sec 0038                    ?_create_chain 0056  
                   dir_next@clst 007C               __CFG_FOSC$INTOSCIO 000000  
                    dir_sdi@clst 006D   __end_of_PIN_MANAGER_Initialize 55E0  
                    dir_sdi@sect 0069                     ?_create_name 0009  
                   f_write@csect 0084                     f_write@wbuff 0082  
                    f_write@buff 006F                      f_write@clst 008B  
                    f_write@sect 0087                     ?_find_volume 0045  
                    f_write@wcnt 008F                    ?_get_ldnumber 0001  
                    _put_fat$400 004D                      _put_fat$401 004F  
                   ?_disk_status 0001  
